{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Android-Interview \u4ed3\u5e93\u542f\u52a8\u65f6\u95f4\uff1a2020\u5e746\u670829\u65e5 \u8fd9\u91cc\u662f777\u76842021\u5e74\u6821\u62db\u51c6\u5907\u4ed3\u5e93\uff0c\u51c6\u5907\u671f\u95f4\u8fd8\u4e0d\u592a\u5b8c\u5584\uff0c\u660e\u5e746\u6708\u5e0c\u671b\u80fd\u6bd4\u8f83\u4e30\u6ee1\u5566\uff01 \u4f7f\u7528Mkdocs-Material\u751f\u6210\u4e86\u8fd9\u4e2a\u9759\u6001\u7f51\u7ad9\uff0c\u65b9\u4fbf\u67e5\u770b\u3002 \u65f6\u95f4\u8282\u70b9 \u672c\u4eba\u662f\u534e\u5e082019\u7ea7\u8f6f\u4ef6\u5de5\u7a0b\u4e13\u7855\uff0c\u5b66\u52362.5\u5e74\uff0c\u79cb\u62db\u65f6\u95f4\u662f2021\u5e746\u6708-10\u6708\u3002 \u5b57\u8282\u8df3\u52a8\u7b49\u4e92\u8054\u7f51\u5382\u5b50\u7684\u63d0\u524d\u62796\u6708\u4e2d\u65ec\u5c31\u4f1a\u5f00\u59cb\uff0c\u6301\u7eed\u4e00\u5230\u4e24\u4e2a\u6708\uff0c\u7406\u60f3\u60c5\u51b5\u662f\u63d0\u524d\u6279\u76f4\u63a5\u4e0a\u5cb8\u7136\u540e\u5c31\u4e0d\u7528\u53bb\u521a\u79cb\u62db\u4e86\uff08\u68a6\u60f3\u603b\u662f\u8981\u6709\u7684T.T \u5f00\u5e93\u76ee\u7684 \u51c6\u5907\u4e86\u4e00\u906d\u6821\u62db\u603b\u8981\u7559\u4e0b\u70b9\u4ec0\u4e48\uff0c\u81ea\u5df1\u590d\u76d8\u4e5f\u597d\uff0c\u7ed9\u60f3\u8981\u627e\u5b89\u5353\u5c97\u7684\u5144\u5f1f\u4eec\u4e00\u4e2a\u53c2\u8003\u4e5f\u597d\uff0c\u603b\u4f1a\u521b\u9020\u70b9\u4ef7\u503c\u54d2\u3002","title":"Home"},{"location":"#android-interview","text":"\u4ed3\u5e93\u542f\u52a8\u65f6\u95f4\uff1a2020\u5e746\u670829\u65e5 \u8fd9\u91cc\u662f777\u76842021\u5e74\u6821\u62db\u51c6\u5907\u4ed3\u5e93\uff0c\u51c6\u5907\u671f\u95f4\u8fd8\u4e0d\u592a\u5b8c\u5584\uff0c\u660e\u5e746\u6708\u5e0c\u671b\u80fd\u6bd4\u8f83\u4e30\u6ee1\u5566\uff01 \u4f7f\u7528Mkdocs-Material\u751f\u6210\u4e86\u8fd9\u4e2a\u9759\u6001\u7f51\u7ad9\uff0c\u65b9\u4fbf\u67e5\u770b\u3002","title":"Android-Interview"},{"location":"#_1","text":"\u672c\u4eba\u662f\u534e\u5e082019\u7ea7\u8f6f\u4ef6\u5de5\u7a0b\u4e13\u7855\uff0c\u5b66\u52362.5\u5e74\uff0c\u79cb\u62db\u65f6\u95f4\u662f2021\u5e746\u6708-10\u6708\u3002 \u5b57\u8282\u8df3\u52a8\u7b49\u4e92\u8054\u7f51\u5382\u5b50\u7684\u63d0\u524d\u62796\u6708\u4e2d\u65ec\u5c31\u4f1a\u5f00\u59cb\uff0c\u6301\u7eed\u4e00\u5230\u4e24\u4e2a\u6708\uff0c\u7406\u60f3\u60c5\u51b5\u662f\u63d0\u524d\u6279\u76f4\u63a5\u4e0a\u5cb8\u7136\u540e\u5c31\u4e0d\u7528\u53bb\u521a\u79cb\u62db\u4e86\uff08\u68a6\u60f3\u603b\u662f\u8981\u6709\u7684T.T","title":"\u65f6\u95f4\u8282\u70b9"},{"location":"#_2","text":"\u51c6\u5907\u4e86\u4e00\u906d\u6821\u62db\u603b\u8981\u7559\u4e0b\u70b9\u4ec0\u4e48\uff0c\u81ea\u5df1\u590d\u76d8\u4e5f\u597d\uff0c\u7ed9\u60f3\u8981\u627e\u5b89\u5353\u5c97\u7684\u5144\u5f1f\u4eec\u4e00\u4e2a\u53c2\u8003\u4e5f\u597d\uff0c\u603b\u4f1a\u521b\u9020\u70b9\u4ef7\u503c\u54d2\u3002","title":"\u5f00\u5e93\u76ee\u7684"},{"location":"Android/","text":"Android O\u6ce1\u7b14\u8bb0 Omooo/Android-Notes Android \u9762\u8bd5QA Omooo/Android_QA \u539f\u751f\u5b89\u5353 \u6846\u67b6\u5f00\u53d1","title":"Android"},{"location":"Android/#android","text":"O\u6ce1\u7b14\u8bb0 Omooo/Android-Notes Android \u9762\u8bd5QA Omooo/Android_QA","title":"Android"},{"location":"Android/#_1","text":"","title":"\u539f\u751f\u5b89\u5353"},{"location":"Android/#_2","text":"","title":"\u6846\u67b6\u5f00\u53d1"},{"location":"Java/","text":"Java","title":"Java"},{"location":"Java/#java","text":"","title":"Java"},{"location":"Kotlin/","text":"Kotlin Kotlin\u8bed\u6cd5\u7cd6\u7740\u5b9e\u662f\u9999","title":"Kotlin"},{"location":"Kotlin/#kotlin","text":"Kotlin\u8bed\u6cd5\u7cd6\u7740\u5b9e\u662f\u9999","title":"Kotlin"},{"location":"%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","text":"\u64cd\u4f5c\u7cfb\u7edf","title":"\u64cd\u4f5c\u7cfb\u7edf"},{"location":"%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_1","text":"","title":"\u64cd\u4f5c\u7cfb\u7edf"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/","text":"\u6570\u636e\u5e93","title":"\u6570\u636e\u5e93"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/#_1","text":"","title":"\u6570\u636e\u5e93"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/","text":"\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 \u5251\u6307Offer \u4e2d\u6c47\u603b\u4e86\u6211\u5237\u5251\u6307\u671f\u95f4\u7684\u7b14\u8bb0\u4ee5\u53caJava&Koltin\u7684\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5 \u5728\u6211\u7684\u535a\u5ba2\u91cc\u67e5\u770b \u3002 \u529b\u6263\u7684\u5237\u9898\u8bb0\u5f55\u4e5f\u53ef\u4ee5\u5728\u6211\u7684\u535a\u5ba2\u91cc\u770b\u5230\uff0c\u672c\u4eba\u771f\u7684\u7b97\u6cd5\u5e9f\u7269\uff0c\u4e00\u5f00\u59cb\u597d\u591a\u9898\u76ee\u5b8c\u5168\u6ca1\u6709\u601d\u8def\u8fd8\u6b7b\u78d5\u4e00\u4e24\u4e2a\u5c0f\u65f6\uff0c\u7eaf\u7cb9\u6d6a\u8d39\u65f6\u95f4\uff0c\u5efa\u8bae\u4e00\u9053\u9898\u76ee10\u5206\u949f\u5de6\u53f3\u6ca1\u5565\u601d\u8def\u5c31\u8fc7\uff0c\u5c31\u53bb\u770b\u9898\u89e3\uff0c\u770b\u660e\u767d\u9898\u89e3\u4e4b\u540e\u518d\u81ea\u5df1\u628a\u4ee3\u7801\u5199\u51fa\u6765AC\u6389\u5c31\u7b97\u8fc7\u4e86\u4e00\u904d\u4e86\uff0c\u4e4b\u540e\u8fc7\u6bb5\u65f6\u95f4\u518d\u590d\u76d8\uff0c\u5237\u9898\u5237\u9898\u5237\u9898\uff0c\u591a\u5237\u624d\u6709\u7528\u561b\uff08\u9488\u5bf9\u548c\u6211\u4e00\u6837\u7684\u7b97\u6cd5\u5e9f\uff0c\u7b97\u6cd5\u5927\u4f6c\u618b\u7406\u6211\uff09 \u5237\u9898\u7f51\u7ad9\uff1a \u529b\u6263 \u725b\u5ba2 \u6ce8\u610f\uff1a\u529b\u6263\u6240\u6709\u7684\u9898\u76ee\u4e0d\u9700\u8981\u7528\u6237\u81ea\u5df1\u5904\u7406\u8f93\u5165\u8f93\u51fa\uff0c\u80fd\u591f\u5b9e\u73b0\u51fd\u6570\u529f\u80fd\u5373\u53ef\uff0c\u7136\u800c\u76ee\u524d\u5927\u591a\u6570\u4e92\u8054\u7f51\u516c\u53f8\u90fd\u5728\u725b\u5ba2\u4e0a\u8fdb\u884c\u7b14\u8bd5\u4ee5\u53ca\u9762\u8bd5\uff0c\u7b14\u8bd5\u4e2d\u8bb8\u591a\u9898\u76ee\u9700\u8981\u81ea\u5df1\u6765\u5904\u7406\u8f93\u5165\u8f93\u51fa\uff0c\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u6ce8\u610f\uff0c\u522b\u7b49\u5f00\u59cb\u9762\u8bd5\u4e86\u5fd8\u8bb0\u4e86Scanner\u8981\u600e\u4e48\u7528\uff0c\u9762\u8bd5\u7684\u65f6\u5019\u6bd4\u8f83\u968f\u673a\uff0c\u6839\u636e\u9762\u8bd5\u5b98\u7684\u9762\u8bd5\u98ce\u683c\u89c6\u60c5\u51b5\u800c\u5b9a\uff0c\u603b\u800c\u8a00\u4e4b\u81ea\u5df1\u5fc5\u987b\u719f\u6089\u638c\u63e1\u5982\u4f55\u5904\u7406\u8f93\u5165\u8f93\u51fa\u7684\u95ee\u9898\u3002 \u6811 \u6811\u7684\u904d\u5386 \u524d\u5e8f\u904d\u5386\uff1a\u6839\u5de6\u53f3 \u4e2d\u5e8f\u904d\u5386\uff1a\u5de6\u6839\u53f3 \u540e\u5e8f\u904d\u5386\uff1a\u5de6\u53f3\u6839 \u6839\u636e\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u91cd\u5efa\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5177\u4f53\u9898\u76ee\u89c1 \u5251\u6307 Offer 07 \u3002 \u603b\u5171\u4e24\u79cd\u89e3\u6cd5\uff1a 1. \u9012\u5f52 2. \u8fed\u4ee3 \u6570\u7ec4 \u4e8c\u5206\u67e5\u627e \u52a8\u6001\u89c4\u5212 \u5b57\u7b26\u4e32 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u8d2a\u5fc3\u7b97\u6cd5 \u53cc\u6307\u9488 \u56de\u6eaf\u7b97\u6cd5 \u5206\u6cbb\u7b97\u6cd5 \u94fe\u8868 \u54c8\u5e0c\u8868 \u9012\u5f52 \u961f\u5217 \u4f4d\u8fd0\u7b97 \u6808 \u961f\u5217 \u53c2\u8003 \u767e\u5ea6\u767e\u79d1 \u7ef4\u57fa\u767e\u79d1 \u8c37\u6b4c","title":"\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_1","text":"\u5251\u6307Offer \u4e2d\u6c47\u603b\u4e86\u6211\u5237\u5251\u6307\u671f\u95f4\u7684\u7b14\u8bb0\u4ee5\u53caJava&Koltin\u7684\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5 \u5728\u6211\u7684\u535a\u5ba2\u91cc\u67e5\u770b \u3002 \u529b\u6263\u7684\u5237\u9898\u8bb0\u5f55\u4e5f\u53ef\u4ee5\u5728\u6211\u7684\u535a\u5ba2\u91cc\u770b\u5230\uff0c\u672c\u4eba\u771f\u7684\u7b97\u6cd5\u5e9f\u7269\uff0c\u4e00\u5f00\u59cb\u597d\u591a\u9898\u76ee\u5b8c\u5168\u6ca1\u6709\u601d\u8def\u8fd8\u6b7b\u78d5\u4e00\u4e24\u4e2a\u5c0f\u65f6\uff0c\u7eaf\u7cb9\u6d6a\u8d39\u65f6\u95f4\uff0c\u5efa\u8bae\u4e00\u9053\u9898\u76ee10\u5206\u949f\u5de6\u53f3\u6ca1\u5565\u601d\u8def\u5c31\u8fc7\uff0c\u5c31\u53bb\u770b\u9898\u89e3\uff0c\u770b\u660e\u767d\u9898\u89e3\u4e4b\u540e\u518d\u81ea\u5df1\u628a\u4ee3\u7801\u5199\u51fa\u6765AC\u6389\u5c31\u7b97\u8fc7\u4e86\u4e00\u904d\u4e86\uff0c\u4e4b\u540e\u8fc7\u6bb5\u65f6\u95f4\u518d\u590d\u76d8\uff0c\u5237\u9898\u5237\u9898\u5237\u9898\uff0c\u591a\u5237\u624d\u6709\u7528\u561b\uff08\u9488\u5bf9\u548c\u6211\u4e00\u6837\u7684\u7b97\u6cd5\u5e9f\uff0c\u7b97\u6cd5\u5927\u4f6c\u618b\u7406\u6211\uff09 \u5237\u9898\u7f51\u7ad9\uff1a \u529b\u6263 \u725b\u5ba2 \u6ce8\u610f\uff1a\u529b\u6263\u6240\u6709\u7684\u9898\u76ee\u4e0d\u9700\u8981\u7528\u6237\u81ea\u5df1\u5904\u7406\u8f93\u5165\u8f93\u51fa\uff0c\u80fd\u591f\u5b9e\u73b0\u51fd\u6570\u529f\u80fd\u5373\u53ef\uff0c\u7136\u800c\u76ee\u524d\u5927\u591a\u6570\u4e92\u8054\u7f51\u516c\u53f8\u90fd\u5728\u725b\u5ba2\u4e0a\u8fdb\u884c\u7b14\u8bd5\u4ee5\u53ca\u9762\u8bd5\uff0c\u7b14\u8bd5\u4e2d\u8bb8\u591a\u9898\u76ee\u9700\u8981\u81ea\u5df1\u6765\u5904\u7406\u8f93\u5165\u8f93\u51fa\uff0c\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u6ce8\u610f\uff0c\u522b\u7b49\u5f00\u59cb\u9762\u8bd5\u4e86\u5fd8\u8bb0\u4e86Scanner\u8981\u600e\u4e48\u7528\uff0c\u9762\u8bd5\u7684\u65f6\u5019\u6bd4\u8f83\u968f\u673a\uff0c\u6839\u636e\u9762\u8bd5\u5b98\u7684\u9762\u8bd5\u98ce\u683c\u89c6\u60c5\u51b5\u800c\u5b9a\uff0c\u603b\u800c\u8a00\u4e4b\u81ea\u5df1\u5fc5\u987b\u719f\u6089\u638c\u63e1\u5982\u4f55\u5904\u7406\u8f93\u5165\u8f93\u51fa\u7684\u95ee\u9898\u3002","title":"\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_2","text":"","title":"\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_3","text":"\u524d\u5e8f\u904d\u5386\uff1a\u6839\u5de6\u53f3 \u4e2d\u5e8f\u904d\u5386\uff1a\u5de6\u6839\u53f3 \u540e\u5e8f\u904d\u5386\uff1a\u5de6\u53f3\u6839 \u6839\u636e\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u91cd\u5efa\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5177\u4f53\u9898\u76ee\u89c1 \u5251\u6307 Offer 07 \u3002 \u603b\u5171\u4e24\u79cd\u89e3\u6cd5\uff1a 1. \u9012\u5f52 2. \u8fed\u4ee3","title":"\u6811\u7684\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_4","text":"","title":"\u6570\u7ec4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_5","text":"","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_6","text":"","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_7","text":"","title":"\u5b57\u7b26\u4e32"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_8","text":"","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_9","text":"","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_10","text":"","title":"\u8d2a\u5fc3\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_11","text":"","title":"\u53cc\u6307\u9488"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_12","text":"","title":"\u56de\u6eaf\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_13","text":"","title":"\u5206\u6cbb\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_14","text":"","title":"\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_15","text":"","title":"\u54c8\u5e0c\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_16","text":"","title":"\u9012\u5f52"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_17","text":"","title":"\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_18","text":"","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_19","text":"","title":"\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_20","text":"","title":"\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_21","text":"\u767e\u5ea6\u767e\u79d1 \u7ef4\u57fa\u767e\u79d1 \u8c37\u6b4c","title":"\u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/","text":"1. \u95ee\u9898 \u627e\u51fa\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\u3002 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 nums \u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u5728 0\uff5en-1 \u7684\u8303\u56f4\u5185\u3002\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [2, 3, 1, 0, 2, 5, 3] \u8f93\u51fa\uff1a2 \u6216 3 \u9650\u5236\uff1a 2 <= n <= 100000 2. \u89e3\u6cd51 - \u6392\u5e8f 2.1 Java class Solution { public int findRepeatNumber(int[] nums) { Arrays.sort(nums); for (int i=0;i<nums.length;i++) { if (nums[i] == nums[i+1]) return nums[i]; } return -1; } } 2.2 Kotlin class Solution { fun findRepeatNumber(nums: IntArray): Int { Arrays.sort(nums) for (i in nums.indices) { if (nums[i] == nums[i + 1]) return nums[i] } return -1 } } 3. \u89e3\u6cd52 - \u54c8\u5e0c\u8868 3.1 Java class Solution { public int findRepeatNumber(int[] nums) { Map<Integer, Integer> map = new HashMap<>(); for(int num: nums){ if(map.containsKey(num)){ return num; }else{ map.put(num, 1); } } return -1; } } 3.2 Kotlin class Solution { fun findRepeatNumber(nums: IntArray): Int { val map = HashMap<Int, Int>() for (num in nums) { if (map.containsKey(num)) { return num } else { map[num] = 1 } } return -1 } } 4. \u89e3\u6cd53 - \u6bd4\u8f83\u4ea4\u6362 4.1 Java class Solution { public int findRepeatNumber(int[] nums) { // \u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u5b57 for(int i=0;i<nums.length;i++) { // \u5f53\u524d\u626b\u63cf\u7684\u6570\u5b57\u4e3acur int cur = nums[i]; // \u5224\u65adcur\u548ci\u662f\u5426\u76f8\u7b49 // \u82e5\u76f8\u7b49\uff0c\u7ee7\u7eed\u626b\u63cf\u4e0b\u4e00\u4e2a\u6570 // \u82e5\u4e0d\u76f8\u7b49\uff0c\u6bd4\u8f83cur\u548c\u7b2ccur\u4e2a\u6570 while (cur != i) { if (cur == nums[cur]) { // cur\u548c\u7b2ccur\u4e2a\u6570\u76f8\u7b49\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u91cd\u590d\u6570\uff0c\u8fd4\u56de\u5373\u53ef return cur; } else { // \u4e0d\u76f8\u7b49\uff0c\u4ea4\u6362\u4e24\u4e2a\u6570 int tmp = nums[cur]; nums[cur] = nums[i]; nums[i] = tmp; cur = nums[i]; } } } return -1; } } 4.2 Kotlin class Solution { fun findRepeatNumber(nums: IntArray): Int { // \u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u5b57 for (i in nums.indices) { // \u5f53\u524d\u626b\u63cf\u7684\u6570\u5b57\u4e3acur var cur = nums[i] // \u5224\u65adcur\u548ci\u662f\u5426\u76f8\u7b49 // \u82e5\u76f8\u7b49\uff0c\u7ee7\u7eed\u626b\u63cf\u4e0b\u4e00\u4e2a\u6570 // \u82e5\u4e0d\u76f8\u7b49\uff0c\u6bd4\u8f83cur\u548c\u7b2ccur\u4e2a\u6570 while (cur != i) { if (cur == nums[cur]) { // cur\u548c\u7b2ccur\u4e2a\u6570\u76f8\u7b49\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u91cd\u590d\u6570\uff0c\u8fd4\u56de\u5373\u53ef return cur } else { // \u4e0d\u76f8\u7b49\uff0c\u4ea4\u6362\u4e24\u4e2a\u6570 val tmp = nums[cur] nums[cur] = nums[i] nums[i] = tmp cur = nums[i] } } } return -1 } } 5. \u53c2\u8003 https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b 6. \u7b14\u8bb0","title":"LCOF 03. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#1","text":"\u627e\u51fa\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\u3002 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 nums \u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u5728 0\uff5en-1 \u7684\u8303\u56f4\u5185\u3002\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [2, 3, 1, 0, 2, 5, 3] \u8f93\u51fa\uff1a2 \u6216 3 \u9650\u5236\uff1a 2 <= n <= 100000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#2-1-","text":"","title":"2. \u89e3\u6cd51 - \u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#21-java","text":"class Solution { public int findRepeatNumber(int[] nums) { Arrays.sort(nums); for (int i=0;i<nums.length;i++) { if (nums[i] == nums[i+1]) return nums[i]; } return -1; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#22-kotlin","text":"class Solution { fun findRepeatNumber(nums: IntArray): Int { Arrays.sort(nums) for (i in nums.indices) { if (nums[i] == nums[i + 1]) return nums[i] } return -1 } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#3-2-","text":"","title":"3. \u89e3\u6cd52 - \u54c8\u5e0c\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#31-java","text":"class Solution { public int findRepeatNumber(int[] nums) { Map<Integer, Integer> map = new HashMap<>(); for(int num: nums){ if(map.containsKey(num)){ return num; }else{ map.put(num, 1); } } return -1; } }","title":"3.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#32-kotlin","text":"class Solution { fun findRepeatNumber(nums: IntArray): Int { val map = HashMap<Int, Int>() for (num in nums) { if (map.containsKey(num)) { return num } else { map[num] = 1 } } return -1 } }","title":"3.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#4-3-","text":"","title":"4. \u89e3\u6cd53 - \u6bd4\u8f83\u4ea4\u6362"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#41-java","text":"class Solution { public int findRepeatNumber(int[] nums) { // \u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u5b57 for(int i=0;i<nums.length;i++) { // \u5f53\u524d\u626b\u63cf\u7684\u6570\u5b57\u4e3acur int cur = nums[i]; // \u5224\u65adcur\u548ci\u662f\u5426\u76f8\u7b49 // \u82e5\u76f8\u7b49\uff0c\u7ee7\u7eed\u626b\u63cf\u4e0b\u4e00\u4e2a\u6570 // \u82e5\u4e0d\u76f8\u7b49\uff0c\u6bd4\u8f83cur\u548c\u7b2ccur\u4e2a\u6570 while (cur != i) { if (cur == nums[cur]) { // cur\u548c\u7b2ccur\u4e2a\u6570\u76f8\u7b49\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u91cd\u590d\u6570\uff0c\u8fd4\u56de\u5373\u53ef return cur; } else { // \u4e0d\u76f8\u7b49\uff0c\u4ea4\u6362\u4e24\u4e2a\u6570 int tmp = nums[cur]; nums[cur] = nums[i]; nums[i] = tmp; cur = nums[i]; } } } return -1; } }","title":"4.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#42-kotlin","text":"class Solution { fun findRepeatNumber(nums: IntArray): Int { // \u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u5b57 for (i in nums.indices) { // \u5f53\u524d\u626b\u63cf\u7684\u6570\u5b57\u4e3acur var cur = nums[i] // \u5224\u65adcur\u548ci\u662f\u5426\u76f8\u7b49 // \u82e5\u76f8\u7b49\uff0c\u7ee7\u7eed\u626b\u63cf\u4e0b\u4e00\u4e2a\u6570 // \u82e5\u4e0d\u76f8\u7b49\uff0c\u6bd4\u8f83cur\u548c\u7b2ccur\u4e2a\u6570 while (cur != i) { if (cur == nums[cur]) { // cur\u548c\u7b2ccur\u4e2a\u6570\u76f8\u7b49\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u91cd\u590d\u6570\uff0c\u8fd4\u56de\u5373\u53ef return cur } else { // \u4e0d\u76f8\u7b49\uff0c\u4ea4\u6362\u4e24\u4e2a\u6570 val tmp = nums[cur] nums[cur] = nums[i] nums[i] = tmp cur = nums[i] } } } return -1 } }","title":"4.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#5","text":"https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"5. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#6","text":"","title":"6. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/","text":"1. \u95ee\u9898 \u5728\u4e00\u4e2a n * m \u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 \u793a\u4f8b: \u73b0\u6709\u77e9\u9635 matrix \u5982\u4e0b\uff1a [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] \u7ed9\u5b9a target = 5\uff0c\u8fd4\u56de true\u3002 \u7ed9\u5b9a target = 20\uff0c\u8fd4\u56de false\u3002 \u9650\u5236\uff1a - 0 <= n <= 1000 - 0 <= m <= 1000 2. \u89e3\u6cd5 2.1 Java class Solution { public boolean findNumberIn2DArray(int[][] matrix, int target) { // \u5224\u7a7a if (matrix.length == 0) { return false; } // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 // \u5f53\u524d\u503c\u548ctarget\u76f8\u7b49\u5c31\u8fd4\u56detrue // target < \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u5217\uff0c\u5f80\u5de6\u79fb\u52a8\u4e00\u5217 // target > \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u884c\uff0c\u5f80\u4e0b\u79fb\u52a8\u4e00\u884c int row = 0; int col = matrix[0].length - 1; while (row < matrix.length && col >= 0) { if(matrix[row][col] == target) return true; else if (target < matrix[row][col]) col--; else if (target > matrix[row][col]) row++; } return false; } } 2.2 Kotlin class Solution { fun findNumberIn2DArray(matrix: Array<IntArray>, target: Int): Boolean { // \u5224\u7a7a if (matrix.size == 0) { return false } // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 // \u5f53\u524d\u503c\u548ctarget\u76f8\u7b49\u5c31\u8fd4\u56detrue // target < \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u5217\uff0c\u5f80\u5de6\u79fb\u52a8\u4e00\u5217 // target > \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u884c\uff0c\u5f80\u4e0b\u79fb\u52a8\u4e00\u884c var row = 0 var col = matrix[0].size - 1 while (row < matrix.size && col >= 0) { if (matrix[row][col] == target) return true else if (target < matrix[row][col]) col-- else if (target > matrix[row][col]) row++ } return false } } 3. \u53c2\u8003 https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b 4. \u7b14\u8bb0","title":"LCOF 04. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#1","text":"\u5728\u4e00\u4e2a n * m \u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 \u793a\u4f8b: \u73b0\u6709\u77e9\u9635 matrix \u5982\u4e0b\uff1a [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] \u7ed9\u5b9a target = 5\uff0c\u8fd4\u56de true\u3002 \u7ed9\u5b9a target = 20\uff0c\u8fd4\u56de false\u3002 \u9650\u5236\uff1a - 0 <= n <= 1000 - 0 <= m <= 1000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#21-java","text":"class Solution { public boolean findNumberIn2DArray(int[][] matrix, int target) { // \u5224\u7a7a if (matrix.length == 0) { return false; } // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 // \u5f53\u524d\u503c\u548ctarget\u76f8\u7b49\u5c31\u8fd4\u56detrue // target < \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u5217\uff0c\u5f80\u5de6\u79fb\u52a8\u4e00\u5217 // target > \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u884c\uff0c\u5f80\u4e0b\u79fb\u52a8\u4e00\u884c int row = 0; int col = matrix[0].length - 1; while (row < matrix.length && col >= 0) { if(matrix[row][col] == target) return true; else if (target < matrix[row][col]) col--; else if (target > matrix[row][col]) row++; } return false; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#22-kotlin","text":"class Solution { fun findNumberIn2DArray(matrix: Array<IntArray>, target: Int): Boolean { // \u5224\u7a7a if (matrix.size == 0) { return false } // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 // \u5f53\u524d\u503c\u548ctarget\u76f8\u7b49\u5c31\u8fd4\u56detrue // target < \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u5217\uff0c\u5f80\u5de6\u79fb\u52a8\u4e00\u5217 // target > \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u884c\uff0c\u5f80\u4e0b\u79fb\u52a8\u4e00\u884c var row = 0 var col = matrix[0].size - 1 while (row < matrix.size && col >= 0) { if (matrix[row][col] == target) return true else if (target < matrix[row][col]) col-- else if (target > matrix[row][col]) row++ } return false } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#3","text":"https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#4","text":"","title":"4. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/","text":"1. \u95ee\u9898 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u628a\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"%20\"\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"We are happy.\" \u8f93\u51fa\uff1a\"We%20are%20happy.\" \u9650\u5236\uff1a - 0 <= s \u7684\u957f\u5ea6 <= 10000 2. \u89e3\u6cd5 2.1 Java class Solution { public String replaceSpace(String s) { char[] nums = new char[s.length() * 3]; int index = 0; for (int i=0;i<s.length();i++) { if(s.charAt(i) != ' ') { nums[index++] = s.charAt(i); } else { nums[index++] = '%'; nums[index++] = '2'; nums[index++] = '0'; } } String res = new String(nums, 0, index); return res; } } 2.2 Kotlin class Solution { fun replaceSpace(s: String): String { val nums = CharArray(s.length * 3) var index = 0 for (i in 0..s.length-1) { if (s[i] != ' ') { nums[index++] = s[i] } else { nums[index++] = '%' nums[index++] = '2' nums[index++] = '0' } } return String(nums, 0, index) } } 3. \u53c2\u8003 https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/ https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/solution/mian-shi-ti-05-ti-huan-kong-ge-by-leetcode-solutio/ 4. \u7b14\u8bb0","title":"LCOF 05. \u66ff\u6362\u7a7a\u683c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#1","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u628a\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"%20\"\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"We are happy.\" \u8f93\u51fa\uff1a\"We%20are%20happy.\" \u9650\u5236\uff1a - 0 <= s \u7684\u957f\u5ea6 <= 10000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#21-java","text":"class Solution { public String replaceSpace(String s) { char[] nums = new char[s.length() * 3]; int index = 0; for (int i=0;i<s.length();i++) { if(s.charAt(i) != ' ') { nums[index++] = s.charAt(i); } else { nums[index++] = '%'; nums[index++] = '2'; nums[index++] = '0'; } } String res = new String(nums, 0, index); return res; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#22-kotlin","text":"class Solution { fun replaceSpace(s: String): String { val nums = CharArray(s.length * 3) var index = 0 for (i in 0..s.length-1) { if (s[i] != ' ') { nums[index++] = s[i] } else { nums[index++] = '%' nums[index++] = '2' nums[index++] = '0' } } return String(nums, 0, index) } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#3","text":"https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/ https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/solution/mian-shi-ti-05-ti-huan-kong-ge-by-leetcode-solutio/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#4","text":"","title":"4. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/","text":"1. \u95ee\u9898 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u8fd4\u56de\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff08\u7528\u6570\u7ec4\u8fd4\u56de\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [1,3,2] \u8f93\u51fa\uff1a[2,3,1] \u9650\u5236\uff1a - 0 <= \u94fe\u8868\u957f\u5ea6 <= 10000 2. \u89e3\u6cd51 - \u6808 2.1 Java class Solution { public int[] reversePrint(ListNode head) { Stack<Integer> stack = new Stack<Integer>(); int len = 0; while (head!=null) { stack.push(head.val); head = head.next; len++; } int[] res = new int[len]; int i = 0; while (!stack.empty()) { res[i] = stack.pop(); i++; } return res; } } 2.2 Kotlin // \u6808 class Solution { fun reversePrint(head: ListNode?): IntArray { var head = head val stack = Stack<Int>() var len = 0 while (head != null) { stack.push(head!!.`val`) head = head!!.next len++ } val res = IntArray(len) var i = 0 while (!stack.empty()) { res[i++] = stack.pop() } return res } } 3. \u89e3\u6cd52 - \u9012\u5f52 3.1 Java // \u9012\u5f52 class Solution { ArrayList<Integer> tmp = new ArrayList<Integer>(); public int[] reversePrint(ListNode head) { recursion(head); int[] res = new int[tmp.size()]; for (int i=0;i<res.length;i++) { res[i] = tmp.get(i); } return res; } // \u9012\u5f52\u7684\u4ece\u5c3e\u5230\u5934\u6dfb\u52a0\u7ed3\u70b9\u503c\u5230tmp // \u6bcf\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u5148\u9012\u5f52\u6dfb\u52a0\u5b83\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u518d\u6dfb\u52a0\u5b83\u672c\u8eab public void recursion(ListNode head) { if(head == null) return; recursion(head.next); tmp.add(head.val); } } 4. \u53c2\u8003 https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b 5. \u7b14\u8bb0","title":"LCOF 06. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#1","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u8fd4\u56de\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff08\u7528\u6570\u7ec4\u8fd4\u56de\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [1,3,2] \u8f93\u51fa\uff1a[2,3,1] \u9650\u5236\uff1a - 0 <= \u94fe\u8868\u957f\u5ea6 <= 10000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#2-1-","text":"","title":"2. \u89e3\u6cd51 - \u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#21-java","text":"class Solution { public int[] reversePrint(ListNode head) { Stack<Integer> stack = new Stack<Integer>(); int len = 0; while (head!=null) { stack.push(head.val); head = head.next; len++; } int[] res = new int[len]; int i = 0; while (!stack.empty()) { res[i] = stack.pop(); i++; } return res; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#22-kotlin","text":"// \u6808 class Solution { fun reversePrint(head: ListNode?): IntArray { var head = head val stack = Stack<Int>() var len = 0 while (head != null) { stack.push(head!!.`val`) head = head!!.next len++ } val res = IntArray(len) var i = 0 while (!stack.empty()) { res[i++] = stack.pop() } return res } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#3-2-","text":"","title":"3. \u89e3\u6cd52 - \u9012\u5f52"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#31-java","text":"// \u9012\u5f52 class Solution { ArrayList<Integer> tmp = new ArrayList<Integer>(); public int[] reversePrint(ListNode head) { recursion(head); int[] res = new int[tmp.size()]; for (int i=0;i<res.length;i++) { res[i] = tmp.get(i); } return res; } // \u9012\u5f52\u7684\u4ece\u5c3e\u5230\u5934\u6dfb\u52a0\u7ed3\u70b9\u503c\u5230tmp // \u6bcf\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u5148\u9012\u5f52\u6dfb\u52a0\u5b83\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u518d\u6dfb\u52a0\u5b83\u672c\u8eab public void recursion(ListNode head) { if(head == null) return; recursion(head.next); tmp.add(head.val); } }","title":"3.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#4","text":"https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"4. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#5","text":"","title":"5. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/","text":"1. \u95ee\u9898 \u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u524d\u5e8f\u904d\u5386 preorder = [3,9,20,15,7] \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u9650\u5236\uff1a - 0 <= \u8282\u70b9\u4e2a\u6570 <= 5000 2. \u89e3\u6cd5 - \u9012\u5f52 2.1 Java /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { // \u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u4e2d\u5404\u4e2a\u7ed3\u70b9\u7684\u4e0b\u6807 Map<Integer, Integer> indexMap = new HashMap<Integer, Integer>(); public TreeNode buildTree(int[] preorder, int[] inorder) { // \u5224\u7a7a if (preorder.length == 0) return null; // \u5c06\u4e2d\u5e8f\u904d\u5386\u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u4e0b\u6807\u5b58\u50a8\u5230map\u4e2d // \u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8981\u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u70b9\u4e0b\u6807\uff1f // \u56e0\u4e3a\u9700\u8981\u5148\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f97\u5230\u5de6\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4\u548c\u7ed3\u70b9\u6570\u91cf\uff0c\u7136\u540e\u6839\u636e\u5de6\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u624d\u80fd\u5728\u524d\u5e8f\u904d\u5386\u4e2d\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4\u3002 for(int i=0;i<inorder.length;i++) { indexMap.put(inorder[i], i); } // \u7ed3\u70b9\u6570\u91cf int size = preorder.length; // \u91cd\u5efa\u4e8c\u53c9\u6811 TreeNode root = buildTree(preorder, 0, size - 1, inorder, 0, size - 1); return root; } // \u524d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4[preStart, preEnd] // \u4e2d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4[inStart, inEnd] public TreeNode buildTree(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd) { // \u5224\u65ad\u524d\u5e8f\u904d\u5386\u7684\u4e0b\u6807\u8303\u56f4\u7684start\u548cend\u7684\u5173\u7cfb // \u5f00\u59cb\u5927\u4e8e\u7ed3\u675f\uff0c\u8bf4\u660e\u5f53\u524d\u4e8c\u53c9\u6811\u4e2d\u6ca1\u6709\u7ed3\u70b9\uff0c\u8fd4\u56denull\u5373\u53ef if (preStart > preEnd) return null; // \u53e6\u5916\u4e24\u79cd\u60c5\u51b5\u90fd\u9700\u8981\u5148\u786e\u5b9a\u6839\u8282\u70b9 // \u5df2\u77e5\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u6839\u8282\u70b9 int rootValue = preorder[preStart]; TreeNode root = new TreeNode(rootValue); // \u5f00\u59cb\u7b49\u4e8e\u7ed3\u675f\uff0c\u5219\u5f53\u524d\u7684\u4e8c\u53c9\u6811\u4e2d\u6070\u597d\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u5373\u6839\u8282\u70b9 if (preStart == preEnd) { return root; } else { // \u5f00\u59cb\u5c0f\u4e8e\u7ed3\u675f\uff0c\u8bf4\u660e\u5f53\u524d\u4e8c\u53c9\u6811\u4e2d\u6709\u591a\u4e2a\u7ed3\u70b9\u3002 // \u5148\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf int rootIndex = indexMap.get(rootValue); //\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4e0b\u6807 int leftNodeNum = rootIndex - inStart; //\u6839\u8282\u70b9\u4e0b\u6807 - \u4e2d\u5e8f\u904d\u5386\u8d77\u70b9 = \u5de6\u5b50\u6811\u7ed3\u70b9\u6570\u91cf int rightNodeNum = inEnd - rootIndex; //\u4e2d\u5e8f\u904d\u5386\u7ec8\u70b9 - \u6839\u8282\u70b9\u4e0b\u6807 = \u53f3\u5b50\u6811\u7ed3\u70b9\u6570\u91cf // \u9012\u5f52\u91cd\u5efa\u5de6\u53f3\u5b50\u6811 // \u53c2\u6570\u610f\u4e49\uff1a // \u524d\u5e8f\u904d\u5386\uff0c\u5de6\u5b50\u6811\u7684\u524d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u524d\u5e8f\u7ec8\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u5de6\u5b50\u6811\u7684\u4e2d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u7ec8\u70b9\u4e0b\u6807 TreeNode leftTree = buildTree(preorder, preStart + 1, preStart + leftNodeNum, inorder, inStart, inStart + leftNodeNum - 1); // \u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4e5f\u53ef\u4ee5\u662frootIndex - 1 // \u53c2\u6570\u610f\u4e49\uff1a // \u524d\u5e8f\u904d\u5386\uff0c\u53f3\u5b50\u6811\u7684\u524d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u524d\u5e8f\u7ec8\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u7ec8\u70b9\u4e0b\u6807 TreeNode rightTree = buildTree(preorder, preEnd - rightNodeNum + 1, preEnd, inorder, rootIndex + 1, inEnd); // \u6839\u8282\u70b9\u7684\u5de6\u53f3\u7ed3\u70b9\u5373\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9 root.left = leftTree; root.right = rightTree; // \u8fd4\u56de\u6839\u8282\u70b9 return root; } } } 3. \u53c2\u8003 https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/ https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/solution/mian-shi-ti-07-zhong-jian-er-cha-shu-by-leetcode-s/ 4. \u7b14\u8bb0","title":"LCOF 07. \u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/#1","text":"\u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u524d\u5e8f\u904d\u5386 preorder = [3,9,20,15,7] \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u9650\u5236\uff1a - 0 <= \u8282\u70b9\u4e2a\u6570 <= 5000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/#2-","text":"","title":"2. \u89e3\u6cd5 - \u9012\u5f52"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/#21-java","text":"/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { // \u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u4e2d\u5404\u4e2a\u7ed3\u70b9\u7684\u4e0b\u6807 Map<Integer, Integer> indexMap = new HashMap<Integer, Integer>(); public TreeNode buildTree(int[] preorder, int[] inorder) { // \u5224\u7a7a if (preorder.length == 0) return null; // \u5c06\u4e2d\u5e8f\u904d\u5386\u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u4e0b\u6807\u5b58\u50a8\u5230map\u4e2d // \u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8981\u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u70b9\u4e0b\u6807\uff1f // \u56e0\u4e3a\u9700\u8981\u5148\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f97\u5230\u5de6\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4\u548c\u7ed3\u70b9\u6570\u91cf\uff0c\u7136\u540e\u6839\u636e\u5de6\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u624d\u80fd\u5728\u524d\u5e8f\u904d\u5386\u4e2d\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4\u3002 for(int i=0;i<inorder.length;i++) { indexMap.put(inorder[i], i); } // \u7ed3\u70b9\u6570\u91cf int size = preorder.length; // \u91cd\u5efa\u4e8c\u53c9\u6811 TreeNode root = buildTree(preorder, 0, size - 1, inorder, 0, size - 1); return root; } // \u524d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4[preStart, preEnd] // \u4e2d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4[inStart, inEnd] public TreeNode buildTree(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd) { // \u5224\u65ad\u524d\u5e8f\u904d\u5386\u7684\u4e0b\u6807\u8303\u56f4\u7684start\u548cend\u7684\u5173\u7cfb // \u5f00\u59cb\u5927\u4e8e\u7ed3\u675f\uff0c\u8bf4\u660e\u5f53\u524d\u4e8c\u53c9\u6811\u4e2d\u6ca1\u6709\u7ed3\u70b9\uff0c\u8fd4\u56denull\u5373\u53ef if (preStart > preEnd) return null; // \u53e6\u5916\u4e24\u79cd\u60c5\u51b5\u90fd\u9700\u8981\u5148\u786e\u5b9a\u6839\u8282\u70b9 // \u5df2\u77e5\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u6839\u8282\u70b9 int rootValue = preorder[preStart]; TreeNode root = new TreeNode(rootValue); // \u5f00\u59cb\u7b49\u4e8e\u7ed3\u675f\uff0c\u5219\u5f53\u524d\u7684\u4e8c\u53c9\u6811\u4e2d\u6070\u597d\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u5373\u6839\u8282\u70b9 if (preStart == preEnd) { return root; } else { // \u5f00\u59cb\u5c0f\u4e8e\u7ed3\u675f\uff0c\u8bf4\u660e\u5f53\u524d\u4e8c\u53c9\u6811\u4e2d\u6709\u591a\u4e2a\u7ed3\u70b9\u3002 // \u5148\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf int rootIndex = indexMap.get(rootValue); //\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4e0b\u6807 int leftNodeNum = rootIndex - inStart; //\u6839\u8282\u70b9\u4e0b\u6807 - \u4e2d\u5e8f\u904d\u5386\u8d77\u70b9 = \u5de6\u5b50\u6811\u7ed3\u70b9\u6570\u91cf int rightNodeNum = inEnd - rootIndex; //\u4e2d\u5e8f\u904d\u5386\u7ec8\u70b9 - \u6839\u8282\u70b9\u4e0b\u6807 = \u53f3\u5b50\u6811\u7ed3\u70b9\u6570\u91cf // \u9012\u5f52\u91cd\u5efa\u5de6\u53f3\u5b50\u6811 // \u53c2\u6570\u610f\u4e49\uff1a // \u524d\u5e8f\u904d\u5386\uff0c\u5de6\u5b50\u6811\u7684\u524d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u524d\u5e8f\u7ec8\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u5de6\u5b50\u6811\u7684\u4e2d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u7ec8\u70b9\u4e0b\u6807 TreeNode leftTree = buildTree(preorder, preStart + 1, preStart + leftNodeNum, inorder, inStart, inStart + leftNodeNum - 1); // \u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4e5f\u53ef\u4ee5\u662frootIndex - 1 // \u53c2\u6570\u610f\u4e49\uff1a // \u524d\u5e8f\u904d\u5386\uff0c\u53f3\u5b50\u6811\u7684\u524d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u524d\u5e8f\u7ec8\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u7ec8\u70b9\u4e0b\u6807 TreeNode rightTree = buildTree(preorder, preEnd - rightNodeNum + 1, preEnd, inorder, rootIndex + 1, inEnd); // \u6839\u8282\u70b9\u7684\u5de6\u53f3\u7ed3\u70b9\u5373\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9 root.left = leftTree; root.right = rightTree; // \u8fd4\u56de\u6839\u8282\u70b9 return root; } } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/#3","text":"https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/ https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/solution/mian-shi-ti-07-zhong-jian-er-cha-shu-by-leetcode-s/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/#4","text":"","title":"4. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/","text":"1. \u95ee\u9898 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\u3002\u961f\u5217\u7684\u58f0\u660e\u5982\u4e0b\uff0c\u8bf7\u5b9e\u73b0\u5b83\u7684\u4e24\u4e2a\u51fd\u6570 appendTail \u548c deleteHead \uff0c\u5206\u522b\u5b8c\u6210\u5728\u961f\u5217\u5c3e\u90e8\u63d2\u5165\u6574\u6570\u548c\u5728\u961f\u5217\u5934\u90e8\u5220\u9664\u6574\u6570\u7684\u529f\u80fd\u3002(\u82e5\u961f\u5217\u4e2d\u6ca1\u6709\u5143\u7d20\uff0cdeleteHead \u64cd\u4f5c\u8fd4\u56de -1 ) \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"] [[],[3],[],[]] \u8f93\u51fa\uff1a[null,null,3,-1] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a [\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"] [[],[],[5],[2],[],[]] \u8f93\u51fa\uff1a[null,-1,null,null,5,2] \u63d0\u793a\uff1a - 1 <= values <= 10000 - \u6700\u591a\u4f1a\u5bf9 appendTail\u3001deleteHead \u8fdb\u884c 10000 \u6b21\u8c03\u7528 2. \u89e3\u6cd5 - \u8f85\u52a9\u6808 2.1 Java /** * Your CQueue object will be instantiated and called as such: * CQueue obj = new CQueue(); * obj.appendTail(value); * int param_2 = obj.deleteHead(); */ class CQueue { // \u8f85\u52a9\u6808 Stack<Integer> stackIn; Stack<Integer> stackOut; public CQueue() { stackIn = new Stack<Integer>(); stackOut = new Stack<Integer>(); } public void appendTail(int value) { stackIn.push(value); } public int deleteHead() { if(stackIn.empty() && stackOut.empty()) return -1; // out\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5c31\u5148pop if(!stackOut.empty()) return stackOut.pop(); else{ // \u5148\u628ain\u6808\u7684\u5168\u90e8pop\u5230out\u6808\u4e2d while(!stackIn.empty()){ stackOut.push(stackIn.pop()); } return stackOut.pop(); } } } 3. \u53c2\u8003 https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/mian-shi-ti-09-yong-liang-ge-zhan-shi-xian-dui-l-3/ 4. \u7b14\u8bb0","title":"LCOF 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/#1","text":"\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\u3002\u961f\u5217\u7684\u58f0\u660e\u5982\u4e0b\uff0c\u8bf7\u5b9e\u73b0\u5b83\u7684\u4e24\u4e2a\u51fd\u6570 appendTail \u548c deleteHead \uff0c\u5206\u522b\u5b8c\u6210\u5728\u961f\u5217\u5c3e\u90e8\u63d2\u5165\u6574\u6570\u548c\u5728\u961f\u5217\u5934\u90e8\u5220\u9664\u6574\u6570\u7684\u529f\u80fd\u3002(\u82e5\u961f\u5217\u4e2d\u6ca1\u6709\u5143\u7d20\uff0cdeleteHead \u64cd\u4f5c\u8fd4\u56de -1 ) \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"] [[],[3],[],[]] \u8f93\u51fa\uff1a[null,null,3,-1] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a [\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"] [[],[],[5],[2],[],[]] \u8f93\u51fa\uff1a[null,-1,null,null,5,2] \u63d0\u793a\uff1a - 1 <= values <= 10000 - \u6700\u591a\u4f1a\u5bf9 appendTail\u3001deleteHead \u8fdb\u884c 10000 \u6b21\u8c03\u7528","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/#2-","text":"","title":"2. \u89e3\u6cd5 - \u8f85\u52a9\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/#21-java","text":"/** * Your CQueue object will be instantiated and called as such: * CQueue obj = new CQueue(); * obj.appendTail(value); * int param_2 = obj.deleteHead(); */ class CQueue { // \u8f85\u52a9\u6808 Stack<Integer> stackIn; Stack<Integer> stackOut; public CQueue() { stackIn = new Stack<Integer>(); stackOut = new Stack<Integer>(); } public void appendTail(int value) { stackIn.push(value); } public int deleteHead() { if(stackIn.empty() && stackOut.empty()) return -1; // out\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5c31\u5148pop if(!stackOut.empty()) return stackOut.pop(); else{ // \u5148\u628ain\u6808\u7684\u5168\u90e8pop\u5230out\u6808\u4e2d while(!stackIn.empty()){ stackOut.push(stackIn.pop()); } return stackOut.pop(); } } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/#3","text":"https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/mian-shi-ti-09-yong-liang-ge-zhan-shi-xian-dui-l-3/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/#4","text":"","title":"4. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/","text":"1. \u95ee\u9898 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165 n \uff0c\u6c42\u6590\u6ce2\u90a3\u5951\uff08Fibonacci\uff09\u6570\u5217\u7684\u7b2c n \u9879\u3002\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N > 1. \u6590\u6ce2\u90a3\u5951\u6570\u5217\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5c31\u662f\u7531\u4e4b\u524d\u7684\u4e24\u6570\u76f8\u52a0\u800c\u5f97\u51fa\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1an = 5 \u8f93\u51fa\uff1a5 \u63d0\u793a\uff1a - 0 <= n <= 100 2. \u89e3\u6cd5 2.1 Java // \u9012\u5f52\u8d85\u65f6\u4e86 class Solution { public int fib(int n) { if (n==0 || n==1) return n; int[] res = new int[n+1]; res[0] = 0; res[1] = 1; for(int i=2;i<=n;i++) res[i] = (res[i-1] + res[i-2]) % 1000000007; return res[n]; } } 2.2 Kotlin // \u9012\u5f52\u8d85\u65f6\u4e86 class Solution { fun fib(n: Int): Int { if (n == 0 || n == 1) return n val res = IntArray(n + 1) res[0] = 0 res[1] = 1 for (i in 2..n) res[i] = (res[i - 1] + res[i - 2]) % 1000000007 return res[n] } } 3. \u53c2\u8003 https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/","title":"LCOF 10-I. \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/#1","text":"\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165 n \uff0c\u6c42\u6590\u6ce2\u90a3\u5951\uff08Fibonacci\uff09\u6570\u5217\u7684\u7b2c n \u9879\u3002\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N > 1. \u6590\u6ce2\u90a3\u5951\u6570\u5217\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5c31\u662f\u7531\u4e4b\u524d\u7684\u4e24\u6570\u76f8\u52a0\u800c\u5f97\u51fa\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1an = 5 \u8f93\u51fa\uff1a5 \u63d0\u793a\uff1a - 0 <= n <= 100","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/#21-java","text":"// \u9012\u5f52\u8d85\u65f6\u4e86 class Solution { public int fib(int n) { if (n==0 || n==1) return n; int[] res = new int[n+1]; res[0] = 0; res[1] = 1; for(int i=2;i<=n;i++) res[i] = (res[i-1] + res[i-2]) % 1000000007; return res[n]; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/#22-kotlin","text":"// \u9012\u5f52\u8d85\u65f6\u4e86 class Solution { fun fib(n: Int): Int { if (n == 0 || n == 1) return n val res = IntArray(n + 1) res[0] = 0 res[1] = 1 for (i in 2..n) res[i] = (res[i - 1] + res[i - 2]) % 1000000007 return res[n] } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/#3","text":"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/","text":"1. \u95ee\u9898 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u53f0\u9636\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a2 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1an = 7 \u8f93\u51fa\uff1a21 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1an = 0 \u8f93\u51fa\uff1a1 \u63d0\u793a\uff1a - 0 <= n <= 100 2. \u89e3\u6cd5 2.1 Java // dp class Solution { public int numWays(int n) { // \u72b6\u6001\u6570\u7ec4 int[] dp = new int[n+1]; // \u8fb9\u754c\u503c if (n==0 || n==1) return 1; dp[0] = 1; dp[1] = 1; // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b for (int i=2;i<=n;i++) { dp[i] = (dp[i-1] + dp[i-2]) % 1000000007; } return dp[n]; } } 2.2 Kotlin // dp class Solution { fun numWays(n: Int): Int { // \u72b6\u6001\u6570\u7ec4 val dp = IntArray(n + 1) // \u8fb9\u754c\u503c if (n == 0 || n == 1) return 1 dp[0] = 1 dp[1] = 1 // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b for (i in 2..n) { dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007 } return dp[n] } } 3. \u53c2\u8003 https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/","title":"LCOF 10-II. \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/#1","text":"\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u53f0\u9636\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a2 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1an = 7 \u8f93\u51fa\uff1a21 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1an = 0 \u8f93\u51fa\uff1a1 \u63d0\u793a\uff1a - 0 <= n <= 100","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/#21-java","text":"// dp class Solution { public int numWays(int n) { // \u72b6\u6001\u6570\u7ec4 int[] dp = new int[n+1]; // \u8fb9\u754c\u503c if (n==0 || n==1) return 1; dp[0] = 1; dp[1] = 1; // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b for (int i=2;i<=n;i++) { dp[i] = (dp[i-1] + dp[i-2]) % 1000000007; } return dp[n]; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/#22-kotlin","text":"// dp class Solution { fun numWays(n: Int): Int { // \u72b6\u6001\u6570\u7ec4 val dp = IntArray(n + 1) // \u8fb9\u754c\u503c if (n == 0 || n == 1) return 1 dp[0] = 1 dp[1] = 1 // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b for (i in 2..n) { dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007 } return dp[n] } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/#3","text":"https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/","text":"1. \u95ee\u9898 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002\u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u6570\u7ec4 [3,4,5,1,2] \u4e3a [1,2,3,4,5] \u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[3,4,5,1,2] \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[2,2,2,0,1] \u8f93\u51fa\uff1a0 2. \u89e3\u6cd5 2.1 Java class Solution { public int minArray(int[] nums) { // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de if (nums.length == 1) return nums[0]; // \u5de6\u53f3\u8fb9\u754c int left = 0; int right = nums.length - 1; // \u4e8c\u5206\u67e5\u627e // \u7ecf\u8fc7\u65cb\u8f6c\u4e4b\u540e\u7684\u6570\u7ec4\u88ab\u5206\u4e3a\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0cnums1\u548cnums2 // nums1\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a\u90fd\u4f1a\u3010\u5927\u4e8e\u7b49\u4e8e\u3011nums2\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a // \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u5728nums\u6570\u7ec4\u4e2d\u627e\u5230nums2\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20nums[i]\uff08\u4e5f\u5c31\u662f\u6700\u5c0f\u503c\uff09 while (left < right) { // \u4e2d\u70b9 int mid = left + (right - left) / 2; // \u6bd4\u8f83nums[mid]\u548cnums[right]\u7684\u5927\u5c0f if (nums[mid] < nums[right]) { // nums[mid]\u66f4\u5c0f\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<i<=mid<right right = mid; } else if (nums[mid] > nums[right]) { // nums[mid]\u66f4\u5927\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<mid<i<right left = mid + 1; } else { // \u7531\u4e8e\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u65e0\u6cd5\u5224\u65admid\u76ee\u524d\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u7531\u4e8enums[mid]=nums[right]\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u53f3\u7aef\u70b9 right -= 1; } } // \u8fd4\u56denums[left]\u6216nums[right] return nums[left]; } } 2.2 Kotlin class Solution { fun minArray(nums: IntArray): Int { // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de if (nums.size == 1) return nums[0] // \u5de6\u53f3\u8fb9\u754c var left = 0 var right = nums.size - 1 // \u4e8c\u5206\u67e5\u627e // \u7ecf\u8fc7\u65cb\u8f6c\u4e4b\u540e\u7684\u6570\u7ec4\u88ab\u5206\u4e3a\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0cnums1\u548cnums2 // nums1\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a\u90fd\u4f1a\u3010\u5927\u4e8e\u7b49\u4e8e\u3011nums2\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a // \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u5728nums\u6570\u7ec4\u4e2d\u627e\u5230nums2\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20nums[i]\uff08\u4e5f\u5c31\u662f\u6700\u5c0f\u503c\uff09 while (left < right) { // \u4e2d\u70b9 val mid = left + (right - left) / 2 // \u6bd4\u8f83nums[mid]\u548cnums[right]\u7684\u5927\u5c0f if (nums[mid] < nums[right]) { // nums[mid]\u66f4\u5c0f\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<i<=mid<right right = mid } else if (nums[mid] > nums[right]) { // nums[mid]\u66f4\u5927\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<mid<i<right left = mid + 1 } else { // \u7531\u4e8e\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u65e0\u6cd5\u5224\u65admid\u76ee\u524d\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u7531\u4e8enums[mid]=nums[right]\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u53f3\u7aef\u70b9 right -= 1 } } // \u8fd4\u56denums[left]\u6216nums[right] return nums[left] } } 3. \u53c2\u8003 https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/ https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-by-leetcode-s/ https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/mian-shi-ti-11-xuan-zhuan-shu-zu-de-zui-xiao-shu-3/","title":"LCOF 11. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/#1","text":"\u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002\u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u6570\u7ec4 [3,4,5,1,2] \u4e3a [1,2,3,4,5] \u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[3,4,5,1,2] \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[2,2,2,0,1] \u8f93\u51fa\uff1a0","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/#21-java","text":"class Solution { public int minArray(int[] nums) { // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de if (nums.length == 1) return nums[0]; // \u5de6\u53f3\u8fb9\u754c int left = 0; int right = nums.length - 1; // \u4e8c\u5206\u67e5\u627e // \u7ecf\u8fc7\u65cb\u8f6c\u4e4b\u540e\u7684\u6570\u7ec4\u88ab\u5206\u4e3a\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0cnums1\u548cnums2 // nums1\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a\u90fd\u4f1a\u3010\u5927\u4e8e\u7b49\u4e8e\u3011nums2\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a // \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u5728nums\u6570\u7ec4\u4e2d\u627e\u5230nums2\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20nums[i]\uff08\u4e5f\u5c31\u662f\u6700\u5c0f\u503c\uff09 while (left < right) { // \u4e2d\u70b9 int mid = left + (right - left) / 2; // \u6bd4\u8f83nums[mid]\u548cnums[right]\u7684\u5927\u5c0f if (nums[mid] < nums[right]) { // nums[mid]\u66f4\u5c0f\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<i<=mid<right right = mid; } else if (nums[mid] > nums[right]) { // nums[mid]\u66f4\u5927\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<mid<i<right left = mid + 1; } else { // \u7531\u4e8e\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u65e0\u6cd5\u5224\u65admid\u76ee\u524d\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u7531\u4e8enums[mid]=nums[right]\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u53f3\u7aef\u70b9 right -= 1; } } // \u8fd4\u56denums[left]\u6216nums[right] return nums[left]; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/#22-kotlin","text":"class Solution { fun minArray(nums: IntArray): Int { // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de if (nums.size == 1) return nums[0] // \u5de6\u53f3\u8fb9\u754c var left = 0 var right = nums.size - 1 // \u4e8c\u5206\u67e5\u627e // \u7ecf\u8fc7\u65cb\u8f6c\u4e4b\u540e\u7684\u6570\u7ec4\u88ab\u5206\u4e3a\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0cnums1\u548cnums2 // nums1\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a\u90fd\u4f1a\u3010\u5927\u4e8e\u7b49\u4e8e\u3011nums2\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a // \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u5728nums\u6570\u7ec4\u4e2d\u627e\u5230nums2\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20nums[i]\uff08\u4e5f\u5c31\u662f\u6700\u5c0f\u503c\uff09 while (left < right) { // \u4e2d\u70b9 val mid = left + (right - left) / 2 // \u6bd4\u8f83nums[mid]\u548cnums[right]\u7684\u5927\u5c0f if (nums[mid] < nums[right]) { // nums[mid]\u66f4\u5c0f\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<i<=mid<right right = mid } else if (nums[mid] > nums[right]) { // nums[mid]\u66f4\u5927\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<mid<i<right left = mid + 1 } else { // \u7531\u4e8e\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u65e0\u6cd5\u5224\u65admid\u76ee\u524d\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u7531\u4e8enums[mid]=nums[right]\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u53f3\u7aef\u70b9 right -= 1 } } // \u8fd4\u56denums[left]\u6216nums[right] return nums[left] } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/#3","text":"https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/ https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-by-leetcode-s/ https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/mian-shi-ti-11-xuan-zhuan-shu-zu-de-zui-xiao-shu-3/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/","text":"1. \u95ee\u9898 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002\u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u683c\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\u3001\u53f3\u3001\u4e0a\u3001\u4e0b\u79fb\u52a8\u4e00\u683c\u3002\u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u7684\u67d0\u4e00\u683c\uff0c\u90a3\u4e48\u8be5\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8be5\u683c\u5b50\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u76843\u00d74\u7684\u77e9\u9635\u4e2d\u5305\u542b\u4e00\u6761\u5b57\u7b26\u4e32\u201cbfce\u201d\u7684\u8def\u5f84\uff08\u8def\u5f84\u4e2d\u7684\u5b57\u6bcd\u7528\u52a0\u7c97\u6807\u51fa\uff09\u3002 [[\"a\",\"b\",\"c\",\"e\"], [\"s\",\"f\",\"c\",\"s\"], [\"a\",\"d\",\"e\",\"e\"]] \u4f46\u77e9\u9635\u4e2d\u4e0d\u5305\u542b\u5b57\u7b26\u4e32\u201cabfb\u201d\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26b\u5360\u636e\u4e86\u77e9\u9635\u4e2d\u7684\u7b2c\u4e00\u884c\u7b2c\u4e8c\u4e2a\u683c\u5b50\u4e4b\u540e\uff0c\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1aboard = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\" \u8f93\u51fa\uff1atrue \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aboard = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\" \u8f93\u51fa\uff1afalse \u63d0\u793a\uff1a - 1 <= board.length <= 200 - 1 <= board[i].length <= 200 2. \u89e3\u6cd5 2.1 Java class Solution { public boolean exist(char[][] board, String word) { // \u5b57\u7b26\u4e32 - \u5b57\u7b26\u6570\u7ec4 char[] words = word.toCharArray(); // \u904d\u5386\u6240\u6709\u5b57\u7b26\uff0c\u627e\u5230\u4e3a\u6b62\uff0c\u6ca1\u627e\u5230\u5c31\u8fd4\u56defalse for(int i=0;i<board.length;i++){ for(int j=0;j<board[0].length;j++){ if(dfs(board, words, i, j, 0)) return true; } } return false; } public boolean dfs(char[][] board, char[] word, int i, int j, int index) { // \u8d8a\u754c\uff0c\u77e9\u9635\u5f53\u524d\u5b57\u7b26\u4e0d\u7b49\u4e8e\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e0d\u5408\u6cd5\uff0c\u8fd4\u56defalse if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word[index]) return false; // \u77e9\u9635\u5f53\u524d\u5b57\u7b26=\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e14\u5df2\u7ecf\u662f\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5408\u6cd5\uff0c\u8fd4\u56detrue if (index == word.length - 1) return true; // \u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u7528\u4e8e\u8bbf\u95ee\u7ed3\u675f\u540e\u6062\u590d\u77e9\u9635 char curChar = board[i][j]; // \u5df2\u8bbf\u95ee\uff0c\u6807\u8bb0\u4e3a'/' board[i][j] = '/'; // \u4e0a\u4e0b\u5de6\u53f3\u90fd\u8bbf\u95ee\u4e00\u4e0b\uff0c\u53ea\u8981\u6709\u4e00\u6761\u8def\u6210\u4e86\u5c31\u53ef\u4ee5\uff0c\u6240\u4ee5\u7528\u6216 boolean ans = dfs(board, word, i + 1, j, index + 1) || dfs(board, word, i - 1, j, index + 1) || dfs(board, word, i, j + 1, index + 1) || dfs(board, word, i , j - 1, index + 1); // \u8bbf\u95ee\u540e\u8fd8\u539f\u77e9\u9635 board[i][j] = curChar; // \u8fd4\u56de\u7ed3\u679c return ans; } } 2.2 Kotlin class Solution { fun exist(board: Array<CharArray>, word: String): Boolean { // \u5b57\u7b26\u4e32 - \u5b57\u7b26\u6570\u7ec4 val words = word.toCharArray() // \u904d\u5386\u6240\u6709\u5b57\u7b26\uff0c\u627e\u5230\u4e3a\u6b62\uff0c\u6ca1\u627e\u5230\u5c31\u8fd4\u56defalse for (i in board.indices) { for (j in 0 until board[0].size) { if (dfs(board, words, i, j, 0)) return true } } return false } fun dfs(board: Array<CharArray>, word: CharArray, i: Int, j: Int, index: Int): Boolean { // \u8d8a\u754c\uff0c\u77e9\u9635\u5f53\u524d\u5b57\u7b26\u4e0d\u7b49\u4e8e\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e0d\u5408\u6cd5\uff0c\u8fd4\u56defalse if (i < 0 || i >= board.size || j < 0 || j >= board[0].size || board[i][j] != word[index]) return false // \u77e9\u9635\u5f53\u524d\u5b57\u7b26=\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e14\u5df2\u7ecf\u662f\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5408\u6cd5\uff0c\u8fd4\u56detrue if (index == word.size - 1) return true // \u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u7528\u4e8e\u8bbf\u95ee\u7ed3\u675f\u540e\u6062\u590d\u77e9\u9635 val curChar = board[i][j] // \u5df2\u8bbf\u95ee\uff0c\u6807\u8bb0\u4e3a'/' board[i][j] = '/' // \u4e0a\u4e0b\u5de6\u53f3\u90fd\u8bbf\u95ee\u4e00\u4e0b\uff0c\u53ea\u8981\u6709\u4e00\u6761\u8def\u6210\u4e86\u5c31\u53ef\u4ee5\uff0c\u6240\u4ee5\u7528\u6216 val ans = dfs(board, word, i + 1, j, index + 1) || dfs(board, word, i - 1, j, index + 1) || dfs(board, word, i, j + 1, index + 1) || dfs(board, word, i, j - 1, index + 1) // \u8bbf\u95ee\u540e\u8fd8\u539f\u77e9\u9635 board[i][j] = curChar // \u8fd4\u56de\u7ed3\u679c return ans } } 3. \u53c2\u8003 https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/ https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/solution/mian-shi-ti-12-ju-zhen-zhong-de-lu-jing-shen-du-yo/","title":"LCOF 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/#1","text":"\u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002\u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u683c\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\u3001\u53f3\u3001\u4e0a\u3001\u4e0b\u79fb\u52a8\u4e00\u683c\u3002\u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u7684\u67d0\u4e00\u683c\uff0c\u90a3\u4e48\u8be5\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8be5\u683c\u5b50\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u76843\u00d74\u7684\u77e9\u9635\u4e2d\u5305\u542b\u4e00\u6761\u5b57\u7b26\u4e32\u201cbfce\u201d\u7684\u8def\u5f84\uff08\u8def\u5f84\u4e2d\u7684\u5b57\u6bcd\u7528\u52a0\u7c97\u6807\u51fa\uff09\u3002 [[\"a\",\"b\",\"c\",\"e\"], [\"s\",\"f\",\"c\",\"s\"], [\"a\",\"d\",\"e\",\"e\"]] \u4f46\u77e9\u9635\u4e2d\u4e0d\u5305\u542b\u5b57\u7b26\u4e32\u201cabfb\u201d\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26b\u5360\u636e\u4e86\u77e9\u9635\u4e2d\u7684\u7b2c\u4e00\u884c\u7b2c\u4e8c\u4e2a\u683c\u5b50\u4e4b\u540e\uff0c\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1aboard = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\" \u8f93\u51fa\uff1atrue \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aboard = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\" \u8f93\u51fa\uff1afalse \u63d0\u793a\uff1a - 1 <= board.length <= 200 - 1 <= board[i].length <= 200","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/#21-java","text":"class Solution { public boolean exist(char[][] board, String word) { // \u5b57\u7b26\u4e32 - \u5b57\u7b26\u6570\u7ec4 char[] words = word.toCharArray(); // \u904d\u5386\u6240\u6709\u5b57\u7b26\uff0c\u627e\u5230\u4e3a\u6b62\uff0c\u6ca1\u627e\u5230\u5c31\u8fd4\u56defalse for(int i=0;i<board.length;i++){ for(int j=0;j<board[0].length;j++){ if(dfs(board, words, i, j, 0)) return true; } } return false; } public boolean dfs(char[][] board, char[] word, int i, int j, int index) { // \u8d8a\u754c\uff0c\u77e9\u9635\u5f53\u524d\u5b57\u7b26\u4e0d\u7b49\u4e8e\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e0d\u5408\u6cd5\uff0c\u8fd4\u56defalse if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word[index]) return false; // \u77e9\u9635\u5f53\u524d\u5b57\u7b26=\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e14\u5df2\u7ecf\u662f\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5408\u6cd5\uff0c\u8fd4\u56detrue if (index == word.length - 1) return true; // \u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u7528\u4e8e\u8bbf\u95ee\u7ed3\u675f\u540e\u6062\u590d\u77e9\u9635 char curChar = board[i][j]; // \u5df2\u8bbf\u95ee\uff0c\u6807\u8bb0\u4e3a'/' board[i][j] = '/'; // \u4e0a\u4e0b\u5de6\u53f3\u90fd\u8bbf\u95ee\u4e00\u4e0b\uff0c\u53ea\u8981\u6709\u4e00\u6761\u8def\u6210\u4e86\u5c31\u53ef\u4ee5\uff0c\u6240\u4ee5\u7528\u6216 boolean ans = dfs(board, word, i + 1, j, index + 1) || dfs(board, word, i - 1, j, index + 1) || dfs(board, word, i, j + 1, index + 1) || dfs(board, word, i , j - 1, index + 1); // \u8bbf\u95ee\u540e\u8fd8\u539f\u77e9\u9635 board[i][j] = curChar; // \u8fd4\u56de\u7ed3\u679c return ans; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/#22-kotlin","text":"class Solution { fun exist(board: Array<CharArray>, word: String): Boolean { // \u5b57\u7b26\u4e32 - \u5b57\u7b26\u6570\u7ec4 val words = word.toCharArray() // \u904d\u5386\u6240\u6709\u5b57\u7b26\uff0c\u627e\u5230\u4e3a\u6b62\uff0c\u6ca1\u627e\u5230\u5c31\u8fd4\u56defalse for (i in board.indices) { for (j in 0 until board[0].size) { if (dfs(board, words, i, j, 0)) return true } } return false } fun dfs(board: Array<CharArray>, word: CharArray, i: Int, j: Int, index: Int): Boolean { // \u8d8a\u754c\uff0c\u77e9\u9635\u5f53\u524d\u5b57\u7b26\u4e0d\u7b49\u4e8e\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e0d\u5408\u6cd5\uff0c\u8fd4\u56defalse if (i < 0 || i >= board.size || j < 0 || j >= board[0].size || board[i][j] != word[index]) return false // \u77e9\u9635\u5f53\u524d\u5b57\u7b26=\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e14\u5df2\u7ecf\u662f\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5408\u6cd5\uff0c\u8fd4\u56detrue if (index == word.size - 1) return true // \u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u7528\u4e8e\u8bbf\u95ee\u7ed3\u675f\u540e\u6062\u590d\u77e9\u9635 val curChar = board[i][j] // \u5df2\u8bbf\u95ee\uff0c\u6807\u8bb0\u4e3a'/' board[i][j] = '/' // \u4e0a\u4e0b\u5de6\u53f3\u90fd\u8bbf\u95ee\u4e00\u4e0b\uff0c\u53ea\u8981\u6709\u4e00\u6761\u8def\u6210\u4e86\u5c31\u53ef\u4ee5\uff0c\u6240\u4ee5\u7528\u6216 val ans = dfs(board, word, i + 1, j, index + 1) || dfs(board, word, i - 1, j, index + 1) || dfs(board, word, i, j + 1, index + 1) || dfs(board, word, i, j - 1, index + 1) // \u8bbf\u95ee\u540e\u8fd8\u539f\u77e9\u9635 board[i][j] = curChar // \u8fd4\u56de\u7ed3\u679c return ans } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/#3","text":"https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/ https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/solution/mian-shi-ti-12-ju-zhen-zhong-de-lu-jing-shen-du-yo/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/","text":"1. \u95ee\u9898 \u5730\u4e0a\u6709\u4e00\u4e2am\u884cn\u5217\u7684\u65b9\u683c\uff0c\u4ece\u5750\u6807 [0,0] \u5230\u5750\u6807 [m-1,n-1] \u3002\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 [0, 0] \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u5b83\u6bcf\u6b21\u53ef\u4ee5\u5411\u5de6\u3001\u53f3\u3001\u4e0a\u3001\u4e0b\u79fb\u52a8\u4e00\u683c\uff08\u4e0d\u80fd\u79fb\u52a8\u5230\u65b9\u683c\u5916\uff09\uff0c\u4e5f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8ek\u7684\u683c\u5b50\u3002\u4f8b\u5982\uff0c\u5f53k\u4e3a18\u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c [35, 37] \uff0c\u56e0\u4e3a3+5+3+7=18\u3002\u4f46\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c [35, 38]\uff0c\u56e0\u4e3a3+5+3+8=19\u3002\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u5230\u8fbe\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1am = 2, n = 3, k = 1 \u8f93\u51fa\uff1a3 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1am = 3, n = 1, k = 0 \u8f93\u51fa\uff1a1 \u63d0\u793a\uff1a - 1 <= n,m <= 100 - 0 <= k <= 20 2. \u89e3\u6cd5 2.1 Java /** * \u641c\u7d22\u77e9\u9635\uff1a * \u9012\u5f52 \u2014\u2014 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 * \u961f\u5217 \u2014\u2014 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 * * \u9012\u5f52\u51fa\u53e3\uff1a * \u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee * * \u8bb0\u5f55\u5df2\u8bbf\u95ee * * \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c * * * Ref\uff1a * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/ * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ */ class Solution { public int movingCount(int m, int n, int k) { boolean[][] visited = new boolean[m][n]; return dfs(m, n, 0, 0, k, visited); } public int dfs(int m, int n, int i, int j, int k, boolean[][] visited) { // \u9012\u5f52\u51fa\u53e3\uff1a\u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee if (i < 0 || i >= m || j < 0 || j >= n || digitCount(i, j) > k || visited[i][j]) return 0; // \u5f53\u524d\u4f4d\u7f6e\u5df2\u8bbf\u95ee visited[i][j] = true; // \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c return 1 + dfs(m, n, i + 1, j, k, visited) + dfs(m, n, i - 1, j, k, visited) + dfs(m, n, i, j + 1, k, visited) + dfs(m, n, i, j - 1, k, visited); } // \u8ba1\u7b97x\u548cy\u7684\u6570\u4f4d\u4e4b\u548c public int digitCount(int x, int y) { int sum = 0; while (x != 0 || y != 0 ) { sum += x%10; x /= 10; sum += y%10; y /= 10; } return sum; } } 2.2 Kotlin /** * \u641c\u7d22\u77e9\u9635\uff1a * \u9012\u5f52 \u2014\u2014 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 * \u961f\u5217 \u2014\u2014 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 * * \u9012\u5f52\u51fa\u53e3\uff1a * \u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee * * \u8bb0\u5f55\u5df2\u8bbf\u95ee * * \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c * * * Ref\uff1a * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/ * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ */ class Solution { fun movingCount(m: Int, n: Int, k: Int): Int { val visited = Array(m) { BooleanArray(n) } return dfs(m, n, 0, 0, k, visited) } fun dfs(m: Int, n: Int, i: Int, j: Int, k: Int, visited: Array<BooleanArray>): Int { // \u9012\u5f52\u51fa\u53e3\uff1a\u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee if (i < 0 || i >= m || j < 0 || j >= n || digitCount(i, j) > k || visited[i][j]) return 0 // \u5f53\u524d\u4f4d\u7f6e\u5df2\u8bbf\u95ee visited[i][j] = true // \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c return (1 + dfs(m, n, i + 1, j, k, visited) + dfs(m, n, i - 1, j, k, visited) + dfs(m, n, i, j + 1, k, visited) + dfs(m, n, i, j - 1, k, visited)) } // \u8ba1\u7b97x\u548cy\u7684\u6570\u4f4d\u4e4b\u548c fun digitCount(x: Int, y: Int): Int { var x = x var y = y var sum = 0 while (x != 0 || y != 0) { sum += x % 10 x /= 10 sum += y % 10 y /= 10 } return sum } } 3. \u53c2\u8003 https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/","title":"LCOF 13. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/#1","text":"\u5730\u4e0a\u6709\u4e00\u4e2am\u884cn\u5217\u7684\u65b9\u683c\uff0c\u4ece\u5750\u6807 [0,0] \u5230\u5750\u6807 [m-1,n-1] \u3002\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 [0, 0] \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u5b83\u6bcf\u6b21\u53ef\u4ee5\u5411\u5de6\u3001\u53f3\u3001\u4e0a\u3001\u4e0b\u79fb\u52a8\u4e00\u683c\uff08\u4e0d\u80fd\u79fb\u52a8\u5230\u65b9\u683c\u5916\uff09\uff0c\u4e5f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8ek\u7684\u683c\u5b50\u3002\u4f8b\u5982\uff0c\u5f53k\u4e3a18\u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c [35, 37] \uff0c\u56e0\u4e3a3+5+3+7=18\u3002\u4f46\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c [35, 38]\uff0c\u56e0\u4e3a3+5+3+8=19\u3002\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u5230\u8fbe\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1am = 2, n = 3, k = 1 \u8f93\u51fa\uff1a3 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1am = 3, n = 1, k = 0 \u8f93\u51fa\uff1a1 \u63d0\u793a\uff1a - 1 <= n,m <= 100 - 0 <= k <= 20","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/#21-java","text":"/** * \u641c\u7d22\u77e9\u9635\uff1a * \u9012\u5f52 \u2014\u2014 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 * \u961f\u5217 \u2014\u2014 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 * * \u9012\u5f52\u51fa\u53e3\uff1a * \u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee * * \u8bb0\u5f55\u5df2\u8bbf\u95ee * * \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c * * * Ref\uff1a * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/ * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ */ class Solution { public int movingCount(int m, int n, int k) { boolean[][] visited = new boolean[m][n]; return dfs(m, n, 0, 0, k, visited); } public int dfs(int m, int n, int i, int j, int k, boolean[][] visited) { // \u9012\u5f52\u51fa\u53e3\uff1a\u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee if (i < 0 || i >= m || j < 0 || j >= n || digitCount(i, j) > k || visited[i][j]) return 0; // \u5f53\u524d\u4f4d\u7f6e\u5df2\u8bbf\u95ee visited[i][j] = true; // \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c return 1 + dfs(m, n, i + 1, j, k, visited) + dfs(m, n, i - 1, j, k, visited) + dfs(m, n, i, j + 1, k, visited) + dfs(m, n, i, j - 1, k, visited); } // \u8ba1\u7b97x\u548cy\u7684\u6570\u4f4d\u4e4b\u548c public int digitCount(int x, int y) { int sum = 0; while (x != 0 || y != 0 ) { sum += x%10; x /= 10; sum += y%10; y /= 10; } return sum; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/#22-kotlin","text":"/** * \u641c\u7d22\u77e9\u9635\uff1a * \u9012\u5f52 \u2014\u2014 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 * \u961f\u5217 \u2014\u2014 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 * * \u9012\u5f52\u51fa\u53e3\uff1a * \u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee * * \u8bb0\u5f55\u5df2\u8bbf\u95ee * * \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c * * * Ref\uff1a * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/ * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ */ class Solution { fun movingCount(m: Int, n: Int, k: Int): Int { val visited = Array(m) { BooleanArray(n) } return dfs(m, n, 0, 0, k, visited) } fun dfs(m: Int, n: Int, i: Int, j: Int, k: Int, visited: Array<BooleanArray>): Int { // \u9012\u5f52\u51fa\u53e3\uff1a\u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee if (i < 0 || i >= m || j < 0 || j >= n || digitCount(i, j) > k || visited[i][j]) return 0 // \u5f53\u524d\u4f4d\u7f6e\u5df2\u8bbf\u95ee visited[i][j] = true // \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c return (1 + dfs(m, n, i + 1, j, k, visited) + dfs(m, n, i - 1, j, k, visited) + dfs(m, n, i, j + 1, k, visited) + dfs(m, n, i, j - 1, k, visited)) } // \u8ba1\u7b97x\u548cy\u7684\u6570\u4f4d\u4e4b\u548c fun digitCount(x: Int, y: Int): Int { var x = x var y = y var sum = 0 while (x != 0 || y != 0) { sum += x % 10 x /= 10 sum += y % 10 y /= 10 } return sum } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/#3","text":"https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/","text":"1. \u95ee\u9898 \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210\u6574\u6570\u957f\u5ea6\u7684 m \u6bb5\uff08m\u3001n\u90fd\u662f\u6574\u6570\uff0cn>1\u5e76\u4e14m>1\uff09\uff0c\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0],k[1]...k[m - 1] \u3002\u8bf7\u95ee k[0] k[1] ...*k[m - 1] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f\u4f8b\u5982\uff0c\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u662f18\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36 \u63d0\u793a\uff1a - 2 <= n <= 1000 2. \u89e3\u6cd5 - \u8d2a\u5fc3 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) 2.1 Java class Solution { public int cuttingRope(int n) { // \u5355\u72ec\u5904\u7406 if (n == 2) return 1; if (n == 3) return 2; // \u6700\u5927\u4e58\u79ef long maxProduct = 1; // \u53d6\u6a21 int mod = (int)1e9 + 7; // n\u5927\u4e8e4\u7684\u60c5\u51b5\u4e0b\u4e0d\u505c\u5730\u62c63\u51fa\u6765 while (n > 4) { // \u62c6\u4e00\u4e2a3\u5c31\u4e58\u4e00\u4e0b maxProduct *= 3; // \u6bcf\u6c42\u51fa\u4e00\u4e2a\u65b0\u7684\u4e58\u79ef\u5c31\u53d6\u6a21 maxProduct %= mod; // \u62c6\u4e86\u4e00\u4e2a3\u5f53\u7136\u8981\u526a\u53bb\u4e00\u4e2a3 n -= 3; } // \u9000\u51fa\u5faa\u73af\u540e\uff0c\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u53ea\u6709\u53ef\u80fd\u662f1\uff0c2\uff0c3 // \u4e0d\u7ba1\u662f\u8c01\u90fd\u6ca1\u6709\u5fc5\u8981\u62c6\uff0c\u8d8a\u62c6\u8d8a\u5c0f\uff0c\u76f4\u63a5\u4e58\u4e0a\u5373\u53ef return (int)(maxProduct * n % mod); } } 2.2 Kotlin class Solution { fun cuttingRope(n: Int): Int { var n = n // \u5355\u72ec\u5904\u7406 if (n == 2) return 1 if (n == 3) return 2 // \u6700\u5927\u4e58\u79ef var maxProduct: Long = 1 // \u53d6\u6a21 val mod = 1e9.toInt() + 7 // n\u5927\u4e8e4\u7684\u60c5\u51b5\u4e0b\u4e0d\u505c\u5730\u62c63\u51fa\u6765 while (n > 4) { // \u62c6\u4e00\u4e2a3\u5c31\u4e58\u4e00\u4e0b maxProduct *= 3 // \u6bcf\u6c42\u51fa\u4e00\u4e2a\u65b0\u7684\u4e58\u79ef\u5c31\u53d6\u6a21 maxProduct %= mod.toLong() // \u62c6\u4e86\u4e00\u4e2a3\u5f53\u7136\u8981\u526a\u53bb\u4e00\u4e2a3 n -= 3 } // \u9000\u51fa\u5faa\u73af\u540e\uff0c\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u53ea\u6709\u53ef\u80fd\u662f1\uff0c2\uff0c3 // \u4e0d\u7ba1\u662f\u8c01\u90fd\u6ca1\u6709\u5fc5\u8981\u62c6\uff0c\u8d8a\u62c6\u8d8a\u5c0f\uff0c\u76f4\u63a5\u4e58\u4e0a\u5373\u53ef return (maxProduct * n % mod).toInt() } } 3. \u53c2\u8003 https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/ https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/solution/javatan-xin-si-lu-jiang-jie-by-henrylee4/","title":"LCOF 14-II. \u526a\u7ef3\u5b50 II"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/#1","text":"\u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210\u6574\u6570\u957f\u5ea6\u7684 m \u6bb5\uff08m\u3001n\u90fd\u662f\u6574\u6570\uff0cn>1\u5e76\u4e14m>1\uff09\uff0c\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0],k[1]...k[m - 1] \u3002\u8bf7\u95ee k[0] k[1] ...*k[m - 1] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f\u4f8b\u5982\uff0c\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u662f18\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36 \u63d0\u793a\uff1a - 2 <= n <= 1000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/#2-","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)","title":"2. \u89e3\u6cd5 - \u8d2a\u5fc3"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/#21-java","text":"class Solution { public int cuttingRope(int n) { // \u5355\u72ec\u5904\u7406 if (n == 2) return 1; if (n == 3) return 2; // \u6700\u5927\u4e58\u79ef long maxProduct = 1; // \u53d6\u6a21 int mod = (int)1e9 + 7; // n\u5927\u4e8e4\u7684\u60c5\u51b5\u4e0b\u4e0d\u505c\u5730\u62c63\u51fa\u6765 while (n > 4) { // \u62c6\u4e00\u4e2a3\u5c31\u4e58\u4e00\u4e0b maxProduct *= 3; // \u6bcf\u6c42\u51fa\u4e00\u4e2a\u65b0\u7684\u4e58\u79ef\u5c31\u53d6\u6a21 maxProduct %= mod; // \u62c6\u4e86\u4e00\u4e2a3\u5f53\u7136\u8981\u526a\u53bb\u4e00\u4e2a3 n -= 3; } // \u9000\u51fa\u5faa\u73af\u540e\uff0c\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u53ea\u6709\u53ef\u80fd\u662f1\uff0c2\uff0c3 // \u4e0d\u7ba1\u662f\u8c01\u90fd\u6ca1\u6709\u5fc5\u8981\u62c6\uff0c\u8d8a\u62c6\u8d8a\u5c0f\uff0c\u76f4\u63a5\u4e58\u4e0a\u5373\u53ef return (int)(maxProduct * n % mod); } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/#22-kotlin","text":"class Solution { fun cuttingRope(n: Int): Int { var n = n // \u5355\u72ec\u5904\u7406 if (n == 2) return 1 if (n == 3) return 2 // \u6700\u5927\u4e58\u79ef var maxProduct: Long = 1 // \u53d6\u6a21 val mod = 1e9.toInt() + 7 // n\u5927\u4e8e4\u7684\u60c5\u51b5\u4e0b\u4e0d\u505c\u5730\u62c63\u51fa\u6765 while (n > 4) { // \u62c6\u4e00\u4e2a3\u5c31\u4e58\u4e00\u4e0b maxProduct *= 3 // \u6bcf\u6c42\u51fa\u4e00\u4e2a\u65b0\u7684\u4e58\u79ef\u5c31\u53d6\u6a21 maxProduct %= mod.toLong() // \u62c6\u4e86\u4e00\u4e2a3\u5f53\u7136\u8981\u526a\u53bb\u4e00\u4e2a3 n -= 3 } // \u9000\u51fa\u5faa\u73af\u540e\uff0c\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u53ea\u6709\u53ef\u80fd\u662f1\uff0c2\uff0c3 // \u4e0d\u7ba1\u662f\u8c01\u90fd\u6ca1\u6709\u5fc5\u8981\u62c6\uff0c\u8d8a\u62c6\u8d8a\u5c0f\uff0c\u76f4\u63a5\u4e58\u4e0a\u5373\u53ef return (maxProduct * n % mod).toInt() } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/#3","text":"https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/ https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/solution/javatan-xin-si-lu-jiang-jie-by-henrylee4/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/","text":"1. \u95ee\u9898 \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210\u6574\u6570\u957f\u5ea6\u7684 m \u6bb5\uff08m\u3001n\u90fd\u662f\u6574\u6570\uff0cn>1\u5e76\u4e14m>1\uff09\uff0c\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0],k[1]...k[m-1] \u3002\u8bf7\u95ee k[0] k[1] ...*k[m-1] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f\u4f8b\u5982\uff0c\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u662f18\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36 \u63d0\u793a\uff1a - 2 <= n <= 58 2. \u89e3\u6cd5 - \u52a8\u6001\u89c4\u5212 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) 2.1 Java class Solution { public int cuttingRope(int n) { // \u8fb9\u754c\u503c if (n < 2) return 0; else if (n == 2) return 1; else if (n == 3) return 2; // \u72b6\u6001\u6570\u7ec4 // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // \u7279\u6b8a\u5904\u7406\uff1a\u5982\u679c\u67d0\u4e2a\u957f\u5ea6\u7684\u7ef3\u5b50\uff0c\u526a\u4e86\u4e00\u4e0b\u4e4b\u540e\uff0c\u5176\u4e2d\u4e00\u6bb5\u7684\u957f\u5ea6\u5728[0,3]\u7684\u533a\u95f4\u5185\uff0c\u5c31\u4e0d\u8981\u518d\u526a\u8fd9\u4e00\u6bb5\u4e86 // \u56e0\u4e3a\u526a\u4e86\u4e4b\u540e\uff0c\u4e58\u79ef\u4f1a\u53d8\u5c0f\uff0c\u800cres[i]\u662f\u957f\u5ea6\u4e3ai\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef // \u6240\u4ee5dp[0],dp[1],dp[2],dp[3]\u8981\u5355\u72ec\u5904\u7406 int[] dp = new int[n+1]; dp[0] = 0; dp[1] = 1; dp[2] = 2; dp[3] = 3; // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // dp[n] = max(dp[j] * dp[n-j]) \u5176\u4e2dj\u7684\u8303\u56f4\u4e3a\uff1a[1,n-1] for (int i=4;i<=n;i++) { // \u5f53\u524d\u7ef3\u5b50\u957f\u5ea6\u4e3ai // \u4e58\u79ef\u7684\u6700\u5927\u503c\u2193 int maxValue = 0; // j\u4ece1\u5f00\u59cb\u662f\u56e0\u4e3a\u526a\u4e00\u5200\u5b50\u4e0b\u53bb\u957f\u5ea6\u6700\u5c11\u4e3a1 // j\u6700\u5927\u4e3ai\u56e0\u4e3a\u5f53\u524d\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3ai // \u8fd9\u91cc\u7684\u5faa\u73af\u6761\u4ef6\u53ef\u4ee5\u6539\u4e3aj<=i/2\uff0c\u56e0\u4e3ai/2\u4e4b\u540e\u7b97\u51fa\u6765\u7684\u5c31\u662f\u91cd\u590d\u7684\u4e58\u79ef\u4e86\uff0c\u5f53n\u7279\u522b\u7279\u522b\u5927\u7684\u65f6\u5019\uff0c\u53ea\u7b97\u5230i/2\u53ef\u4ee5\u8282\u7701\u65f6\u95f4 for(int j=1;j<=i;j++) { // \u5f53\u524d\u4e58\u79ef int product = dp[j] * dp[i-j]; if (product > maxValue) maxValue = product; } // \u628a\u6700\u5927\u503c\u5b58\u5165dp\u6570\u7ec4 dp[i] = maxValue; } // \u8fd4\u56de\u7ed3\u679c return dp[n]; } } 2.2 Kotlin class Solution { fun cuttingRope(n: Int): Int { // \u8fb9\u754c\u503c if (n < 2) return 0 else if (n == 2) return 1 else if (n == 3) return 2 // \u72b6\u6001\u6570\u7ec4 // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // \u7279\u6b8a\u5904\u7406\uff1a\u5982\u679c\u67d0\u4e2a\u957f\u5ea6\u7684\u7ef3\u5b50\uff0c\u526a\u4e86\u4e00\u4e0b\u4e4b\u540e\uff0c\u5176\u4e2d\u4e00\u6bb5\u7684\u957f\u5ea6\u5728[0,3]\u7684\u533a\u95f4\u5185\uff0c\u5c31\u4e0d\u8981\u518d\u526a\u8fd9\u4e00\u6bb5\u4e86 // \u56e0\u4e3a\u526a\u4e86\u4e4b\u540e\uff0c\u4e58\u79ef\u4f1a\u53d8\u5c0f\uff0c\u800cres[i]\u662f\u957f\u5ea6\u4e3ai\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef // \u6240\u4ee5dp[0],dp[1],dp[2],dp[3]\u8981\u5355\u72ec\u5904\u7406 val dp = IntArray(n + 1) dp[0] = 0 dp[1] = 1 dp[2] = 2 dp[3] = 3 // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // dp[n] = max(dp[j] * dp[n-j]) \u5176\u4e2dj\u7684\u8303\u56f4\u4e3a\uff1a[1,n-1] for (i in 4..n) { // \u5f53\u524d\u7ef3\u5b50\u957f\u5ea6\u4e3ai // \u4e58\u79ef\u7684\u6700\u5927\u503c\u2193 var maxValue = 0 // j\u4ece1\u5f00\u59cb\u662f\u56e0\u4e3a\u526a\u4e00\u5200\u5b50\u4e0b\u53bb\u957f\u5ea6\u6700\u5c11\u4e3a1 // j\u6700\u5927\u4e3ai\u56e0\u4e3a\u5f53\u524d\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3ai // \u8fd9\u91cc\u7684\u5faa\u73af\u6761\u4ef6\u53ef\u4ee5\u6539\u4e3aj<=i/2\uff0c\u56e0\u4e3ai/2\u4e4b\u540e\u7b97\u51fa\u6765\u7684\u5c31\u662f\u91cd\u590d\u7684\u4e58\u79ef\u4e86\uff0c\u5f53n\u7279\u522b\u7279\u522b\u5927\u7684\u65f6\u5019\uff0c\u53ea\u7b97\u5230i/2\u53ef\u4ee5\u8282\u7701\u65f6\u95f4 for (j in 1..i) { // \u5f53\u524d\u4e58\u79ef val product = dp[j] * dp[i - j] if (product > maxValue) maxValue = product } // \u628a\u6700\u5927\u503c\u5b58\u5165dp\u6570\u7ec4 dp[i] = maxValue } // \u8fd4\u56de\u7ed3\u679c return dp[n] } } 3. \u89e3\u6cd5 - \u8d2a\u5fc3 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) 3.1 Java // \u8d2a\u5fc3\u7b97\u6cd5 class Solution { public int cuttingRope(int n) { // \u6309\u7167\u5982\u4e0b\u7b56\u7565\u6765\u526a\u7ef3\u5b50\uff1a // 1. \u5f53 n>=5 \u65f6 \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50 // 2. \u5f53\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u4e3a4\u65f6\uff0c\u628a\u7ef3\u5b50\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50 // \u8bc1\u660e\u8be5\u601d\u8def\u7684\u6b63\u786e\u6027\uff1a // 1. \u9996\u5148\u5f53 n>=5 \u65f6\uff0c\u53ef\u4ee5\u8bc1\u660e 2(n-2)>n \u4e14 3(n-3)>n\u3002 // \u4e5f\u5c31\u662f\u8bf4\u5f53\u7ef3\u5b50\u5269\u4e0b\u7684\u957f\u5ea6\u5927\u4e8e\u6216\u8005\u7b49\u4e8e5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u526a\u6210\u957f\u5ea6\u4e3a3\u6216\u80052\u7684\u7ef3\u5b50\u6bb5 // \u53e6\u5916 n>=5 \u65f6 3(n-3)>=2(n-2)\uff0c\u6240\u4ee5\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u591a\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // 2. \u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3a4\uff0c\u7531\u4e8e2x2>1x3\uff0c\u6240\u4ee5\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6bd4\u8f83\u597d // \u51e0\u4e2a\u8fb9\u754c\u503c if (n < 2) return 0; if (n == 2) return 1; if (n == 3) return 2; // \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // numOf3 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6570\u91cf int numOf3 = n / 3; // \u5f53\u7ef3\u5b50\u6700\u540e\u5269\u4e0b\u7684\u7a0b\u5ea6\u4e3a4\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u518d\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // \u6b64\u65f6\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\uff0c\u56e0\u4e3a2x2 > 3x1 // \u5982\u679cn\u51cf\u53bb\u6240\u6709\u76843\u5269\u4e0b\u4e861\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a3\u53ef\u4ee5\u548c\u8fd9\u4e2a1\u52a0\u8d77\u6765\u7b49\u4e8e4\uff0c\u8fd9\u4e2a4\u53ef\u4ee5\u62c6\u62102\u548c2\uff0c\u4e8e\u662f3\u7684\u6570\u91cf\u5c31\u51cf\u4e00\u3002 if (n - 3 * numOf3 == 1) numOf3 -= 1; // numsOf2 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6570\u91cf int numOf2 = (n - numOf3 * 3) / 2; // \u6700\u5927\u4e58\u79ef double maxProduct = Math.pow(3, numOf3) * Math.pow(2, numOf2); return (int)maxProduct; } } 3.2 Kotlin // \u8d2a\u5fc3\u7b97\u6cd5 class Solution { fun cuttingRope(n: Int): Int { // \u6309\u7167\u5982\u4e0b\u7b56\u7565\u6765\u526a\u7ef3\u5b50\uff1a // 1. \u5f53 n>=5 \u65f6 \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50 // 2. \u5f53\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u4e3a4\u65f6\uff0c\u628a\u7ef3\u5b50\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50 // \u8bc1\u660e\u8be5\u601d\u8def\u7684\u6b63\u786e\u6027\uff1a // 1. \u9996\u5148\u5f53 n>=5 \u65f6\uff0c\u53ef\u4ee5\u8bc1\u660e 2(n-2)>n \u4e14 3(n-3)>n\u3002 // \u4e5f\u5c31\u662f\u8bf4\u5f53\u7ef3\u5b50\u5269\u4e0b\u7684\u957f\u5ea6\u5927\u4e8e\u6216\u8005\u7b49\u4e8e5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u526a\u6210\u957f\u5ea6\u4e3a3\u6216\u80052\u7684\u7ef3\u5b50\u6bb5 // \u53e6\u5916 n>=5 \u65f6 3(n-3)>=2(n-2)\uff0c\u6240\u4ee5\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u591a\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // 2. \u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3a4\uff0c\u7531\u4e8e2x2>1x3\uff0c\u6240\u4ee5\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6bd4\u8f83\u597d // \u51e0\u4e2a\u8fb9\u754c\u503c if (n < 2) return 0 if (n == 2) return 1 if (n == 3) return 2 // \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // numOf3 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6570\u91cf var numOf3 = n / 3 // \u5f53\u7ef3\u5b50\u6700\u540e\u5269\u4e0b\u7684\u7a0b\u5ea6\u4e3a4\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u518d\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // \u6b64\u65f6\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\uff0c\u56e0\u4e3a2x2 > 3x1 // \u5982\u679cn\u51cf\u53bb\u6240\u6709\u76843\u5269\u4e0b\u4e861\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a3\u53ef\u4ee5\u548c\u8fd9\u4e2a1\u52a0\u8d77\u6765\u7b49\u4e8e4\uff0c\u8fd9\u4e2a4\u53ef\u4ee5\u62c6\u62102\u548c2\uff0c\u4e8e\u662f3\u7684\u6570\u91cf\u5c31\u51cf\u4e00\u3002 if (n - 3 * numOf3 == 1) numOf3 -= 1 // numsOf2 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6570\u91cf val numOf2 = (n - numOf3 * 3) / 2 // \u6700\u5927\u4e58\u79ef val maxProduct = Math.pow(3.0, numOf3.toDouble()) * Math.pow(2.0, numOf2.toDouble()) return maxProduct.toInt() } } 4. \u53c2\u8003 https://leetcode-cn.com/problems/jian-sheng-zi-lcof/ https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/zi-jie-ti-ku-jian-14-i-zhong-deng-jian-sheng-zi-1s/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"LCOF 14-I. \u526a\u7ef3\u5b50"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#1","text":"\u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210\u6574\u6570\u957f\u5ea6\u7684 m \u6bb5\uff08m\u3001n\u90fd\u662f\u6574\u6570\uff0cn>1\u5e76\u4e14m>1\uff09\uff0c\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0],k[1]...k[m-1] \u3002\u8bf7\u95ee k[0] k[1] ...*k[m-1] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f\u4f8b\u5982\uff0c\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u662f18\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36 \u63d0\u793a\uff1a - 2 <= n <= 58","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#2-","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)","title":"2. \u89e3\u6cd5 - \u52a8\u6001\u89c4\u5212"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#21-java","text":"class Solution { public int cuttingRope(int n) { // \u8fb9\u754c\u503c if (n < 2) return 0; else if (n == 2) return 1; else if (n == 3) return 2; // \u72b6\u6001\u6570\u7ec4 // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // \u7279\u6b8a\u5904\u7406\uff1a\u5982\u679c\u67d0\u4e2a\u957f\u5ea6\u7684\u7ef3\u5b50\uff0c\u526a\u4e86\u4e00\u4e0b\u4e4b\u540e\uff0c\u5176\u4e2d\u4e00\u6bb5\u7684\u957f\u5ea6\u5728[0,3]\u7684\u533a\u95f4\u5185\uff0c\u5c31\u4e0d\u8981\u518d\u526a\u8fd9\u4e00\u6bb5\u4e86 // \u56e0\u4e3a\u526a\u4e86\u4e4b\u540e\uff0c\u4e58\u79ef\u4f1a\u53d8\u5c0f\uff0c\u800cres[i]\u662f\u957f\u5ea6\u4e3ai\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef // \u6240\u4ee5dp[0],dp[1],dp[2],dp[3]\u8981\u5355\u72ec\u5904\u7406 int[] dp = new int[n+1]; dp[0] = 0; dp[1] = 1; dp[2] = 2; dp[3] = 3; // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // dp[n] = max(dp[j] * dp[n-j]) \u5176\u4e2dj\u7684\u8303\u56f4\u4e3a\uff1a[1,n-1] for (int i=4;i<=n;i++) { // \u5f53\u524d\u7ef3\u5b50\u957f\u5ea6\u4e3ai // \u4e58\u79ef\u7684\u6700\u5927\u503c\u2193 int maxValue = 0; // j\u4ece1\u5f00\u59cb\u662f\u56e0\u4e3a\u526a\u4e00\u5200\u5b50\u4e0b\u53bb\u957f\u5ea6\u6700\u5c11\u4e3a1 // j\u6700\u5927\u4e3ai\u56e0\u4e3a\u5f53\u524d\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3ai // \u8fd9\u91cc\u7684\u5faa\u73af\u6761\u4ef6\u53ef\u4ee5\u6539\u4e3aj<=i/2\uff0c\u56e0\u4e3ai/2\u4e4b\u540e\u7b97\u51fa\u6765\u7684\u5c31\u662f\u91cd\u590d\u7684\u4e58\u79ef\u4e86\uff0c\u5f53n\u7279\u522b\u7279\u522b\u5927\u7684\u65f6\u5019\uff0c\u53ea\u7b97\u5230i/2\u53ef\u4ee5\u8282\u7701\u65f6\u95f4 for(int j=1;j<=i;j++) { // \u5f53\u524d\u4e58\u79ef int product = dp[j] * dp[i-j]; if (product > maxValue) maxValue = product; } // \u628a\u6700\u5927\u503c\u5b58\u5165dp\u6570\u7ec4 dp[i] = maxValue; } // \u8fd4\u56de\u7ed3\u679c return dp[n]; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#22-kotlin","text":"class Solution { fun cuttingRope(n: Int): Int { // \u8fb9\u754c\u503c if (n < 2) return 0 else if (n == 2) return 1 else if (n == 3) return 2 // \u72b6\u6001\u6570\u7ec4 // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // \u7279\u6b8a\u5904\u7406\uff1a\u5982\u679c\u67d0\u4e2a\u957f\u5ea6\u7684\u7ef3\u5b50\uff0c\u526a\u4e86\u4e00\u4e0b\u4e4b\u540e\uff0c\u5176\u4e2d\u4e00\u6bb5\u7684\u957f\u5ea6\u5728[0,3]\u7684\u533a\u95f4\u5185\uff0c\u5c31\u4e0d\u8981\u518d\u526a\u8fd9\u4e00\u6bb5\u4e86 // \u56e0\u4e3a\u526a\u4e86\u4e4b\u540e\uff0c\u4e58\u79ef\u4f1a\u53d8\u5c0f\uff0c\u800cres[i]\u662f\u957f\u5ea6\u4e3ai\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef // \u6240\u4ee5dp[0],dp[1],dp[2],dp[3]\u8981\u5355\u72ec\u5904\u7406 val dp = IntArray(n + 1) dp[0] = 0 dp[1] = 1 dp[2] = 2 dp[3] = 3 // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // dp[n] = max(dp[j] * dp[n-j]) \u5176\u4e2dj\u7684\u8303\u56f4\u4e3a\uff1a[1,n-1] for (i in 4..n) { // \u5f53\u524d\u7ef3\u5b50\u957f\u5ea6\u4e3ai // \u4e58\u79ef\u7684\u6700\u5927\u503c\u2193 var maxValue = 0 // j\u4ece1\u5f00\u59cb\u662f\u56e0\u4e3a\u526a\u4e00\u5200\u5b50\u4e0b\u53bb\u957f\u5ea6\u6700\u5c11\u4e3a1 // j\u6700\u5927\u4e3ai\u56e0\u4e3a\u5f53\u524d\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3ai // \u8fd9\u91cc\u7684\u5faa\u73af\u6761\u4ef6\u53ef\u4ee5\u6539\u4e3aj<=i/2\uff0c\u56e0\u4e3ai/2\u4e4b\u540e\u7b97\u51fa\u6765\u7684\u5c31\u662f\u91cd\u590d\u7684\u4e58\u79ef\u4e86\uff0c\u5f53n\u7279\u522b\u7279\u522b\u5927\u7684\u65f6\u5019\uff0c\u53ea\u7b97\u5230i/2\u53ef\u4ee5\u8282\u7701\u65f6\u95f4 for (j in 1..i) { // \u5f53\u524d\u4e58\u79ef val product = dp[j] * dp[i - j] if (product > maxValue) maxValue = product } // \u628a\u6700\u5927\u503c\u5b58\u5165dp\u6570\u7ec4 dp[i] = maxValue } // \u8fd4\u56de\u7ed3\u679c return dp[n] } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#3-","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)","title":"3. \u89e3\u6cd5 - \u8d2a\u5fc3"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#31-java","text":"// \u8d2a\u5fc3\u7b97\u6cd5 class Solution { public int cuttingRope(int n) { // \u6309\u7167\u5982\u4e0b\u7b56\u7565\u6765\u526a\u7ef3\u5b50\uff1a // 1. \u5f53 n>=5 \u65f6 \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50 // 2. \u5f53\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u4e3a4\u65f6\uff0c\u628a\u7ef3\u5b50\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50 // \u8bc1\u660e\u8be5\u601d\u8def\u7684\u6b63\u786e\u6027\uff1a // 1. \u9996\u5148\u5f53 n>=5 \u65f6\uff0c\u53ef\u4ee5\u8bc1\u660e 2(n-2)>n \u4e14 3(n-3)>n\u3002 // \u4e5f\u5c31\u662f\u8bf4\u5f53\u7ef3\u5b50\u5269\u4e0b\u7684\u957f\u5ea6\u5927\u4e8e\u6216\u8005\u7b49\u4e8e5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u526a\u6210\u957f\u5ea6\u4e3a3\u6216\u80052\u7684\u7ef3\u5b50\u6bb5 // \u53e6\u5916 n>=5 \u65f6 3(n-3)>=2(n-2)\uff0c\u6240\u4ee5\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u591a\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // 2. \u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3a4\uff0c\u7531\u4e8e2x2>1x3\uff0c\u6240\u4ee5\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6bd4\u8f83\u597d // \u51e0\u4e2a\u8fb9\u754c\u503c if (n < 2) return 0; if (n == 2) return 1; if (n == 3) return 2; // \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // numOf3 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6570\u91cf int numOf3 = n / 3; // \u5f53\u7ef3\u5b50\u6700\u540e\u5269\u4e0b\u7684\u7a0b\u5ea6\u4e3a4\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u518d\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // \u6b64\u65f6\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\uff0c\u56e0\u4e3a2x2 > 3x1 // \u5982\u679cn\u51cf\u53bb\u6240\u6709\u76843\u5269\u4e0b\u4e861\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a3\u53ef\u4ee5\u548c\u8fd9\u4e2a1\u52a0\u8d77\u6765\u7b49\u4e8e4\uff0c\u8fd9\u4e2a4\u53ef\u4ee5\u62c6\u62102\u548c2\uff0c\u4e8e\u662f3\u7684\u6570\u91cf\u5c31\u51cf\u4e00\u3002 if (n - 3 * numOf3 == 1) numOf3 -= 1; // numsOf2 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6570\u91cf int numOf2 = (n - numOf3 * 3) / 2; // \u6700\u5927\u4e58\u79ef double maxProduct = Math.pow(3, numOf3) * Math.pow(2, numOf2); return (int)maxProduct; } }","title":"3.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#32-kotlin","text":"// \u8d2a\u5fc3\u7b97\u6cd5 class Solution { fun cuttingRope(n: Int): Int { // \u6309\u7167\u5982\u4e0b\u7b56\u7565\u6765\u526a\u7ef3\u5b50\uff1a // 1. \u5f53 n>=5 \u65f6 \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50 // 2. \u5f53\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u4e3a4\u65f6\uff0c\u628a\u7ef3\u5b50\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50 // \u8bc1\u660e\u8be5\u601d\u8def\u7684\u6b63\u786e\u6027\uff1a // 1. \u9996\u5148\u5f53 n>=5 \u65f6\uff0c\u53ef\u4ee5\u8bc1\u660e 2(n-2)>n \u4e14 3(n-3)>n\u3002 // \u4e5f\u5c31\u662f\u8bf4\u5f53\u7ef3\u5b50\u5269\u4e0b\u7684\u957f\u5ea6\u5927\u4e8e\u6216\u8005\u7b49\u4e8e5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u526a\u6210\u957f\u5ea6\u4e3a3\u6216\u80052\u7684\u7ef3\u5b50\u6bb5 // \u53e6\u5916 n>=5 \u65f6 3(n-3)>=2(n-2)\uff0c\u6240\u4ee5\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u591a\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // 2. \u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3a4\uff0c\u7531\u4e8e2x2>1x3\uff0c\u6240\u4ee5\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6bd4\u8f83\u597d // \u51e0\u4e2a\u8fb9\u754c\u503c if (n < 2) return 0 if (n == 2) return 1 if (n == 3) return 2 // \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // numOf3 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6570\u91cf var numOf3 = n / 3 // \u5f53\u7ef3\u5b50\u6700\u540e\u5269\u4e0b\u7684\u7a0b\u5ea6\u4e3a4\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u518d\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // \u6b64\u65f6\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\uff0c\u56e0\u4e3a2x2 > 3x1 // \u5982\u679cn\u51cf\u53bb\u6240\u6709\u76843\u5269\u4e0b\u4e861\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a3\u53ef\u4ee5\u548c\u8fd9\u4e2a1\u52a0\u8d77\u6765\u7b49\u4e8e4\uff0c\u8fd9\u4e2a4\u53ef\u4ee5\u62c6\u62102\u548c2\uff0c\u4e8e\u662f3\u7684\u6570\u91cf\u5c31\u51cf\u4e00\u3002 if (n - 3 * numOf3 == 1) numOf3 -= 1 // numsOf2 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6570\u91cf val numOf2 = (n - numOf3 * 3) / 2 // \u6700\u5927\u4e58\u79ef val maxProduct = Math.pow(3.0, numOf3.toDouble()) * Math.pow(2.0, numOf2.toDouble()) return maxProduct.toInt() } }","title":"3.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#4","text":"https://leetcode-cn.com/problems/jian-sheng-zi-lcof/ https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/zi-jie-ti-ku-jian-14-i-zhong-deng-jian-sheng-zi-1s/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"4. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/","text":"1. \u95ee\u9898 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\u3002\u4f8b\u5982\uff0c\u628a 9 \u8868\u793a\u6210\u4e8c\u8fdb\u5236\u662f 1001\uff0c\u6709 2 \u4f4d\u662f 1\u3002\u56e0\u6b64\uff0c\u5982\u679c\u8f93\u5165 9\uff0c\u5219\u8be5\u51fd\u6570\u8f93\u51fa 2\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a00000000000000000000000000001011 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 00000000000000000000000000001011 \u4e2d\uff0c\u5171\u6709\u4e09\u4f4d\u4e3a '1'\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a00000000000000000000000010000000 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 00000000000000000000000010000000 \u4e2d\uff0c\u5171\u6709\u4e00\u4f4d\u4e3a '1'\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a11111111111111111111111111111101 \u8f93\u51fa\uff1a31 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 11111111111111111111111111111101 \u4e2d\uff0c\u5171\u6709 31 \u4f4d\u4e3a '1'\u3002 2. \u89e3\u6cd5\u2460 - \u9010\u4f4d\u5224\u65ad 2.1 Java public class Solution { public int hammingWeight(int n) { /** * \u6839\u636e\u4f4d\u8fd0\u7b97\u7684\u5b9a\u4e49\uff1a * 1. \u5982\u679cn&1=0\uff0c\u90a3\u4e48n\u4e8c\u8fdb\u5236\u7684\u6700\u53f3\u4f4d\u662f0 * 2. \u5982\u679cn&1=1\uff0c\u90a3\u4e48n\u4e8c\u8fdb\u5236\u7684\u6700\u5de6\u4f4d\u662f1 */ // n\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 int num = 0; /** * \u672c\u9898\u4e2dn\u4e3a\u65e0\u7b26\u53f7\u6570\uff0c\u6240\u4ee5\u53f3\u79fb\u65f6\u4f7f\u7528\u65e0\u7b26\u53f7\u53f3\u79fb * \u65e0\u7b26\u53f7\u53f3\u79fb\uff1a\u4e0d\u7ba1\u7b26\u53f7\u4f4d\uff0c\u53f3\u79fb\u65f6\u5f80\u6700\u5de6\u8fb9\u88650\u5373\u53ef */ while(n != 0) { // \u5982\u679cn\u7684\u6700\u53f3\u8fb9\u662f1\uff0c\u90a3\u4e48n&1=1\uff0c\u6240\u4ee51\u7684\u4e2a\u6570\u5c31\u52a0\u4e00 // \u5982\u679cn\u7684\u6700\u53f3\u8fb9\u662f0\uff0c\u90a3\u4e48n&1=0\uff0c\u6240\u4ee51\u4e2a\u4e2a\u6570\u4e0d\u53d8 num += n & 1; // \u6bcf\u6b21\u5224\u65ad\u5b8c\u6700\u53f3\u4f4d\u6570\u5b57\u5c31\u5c06n\u53f3\u79fb\u4e00\u4f4d n >>>= 1; } return num; } } 3. \u89e3\u6cd5\u2461 - \u4f7f\u7528n&(n\u22121) 3.1 Java public class Solution { // you need to treat n as an unsigned value public int hammingWeight(int n) { // \u5229\u7528 n&(n\u22121) // n = 100100100000 // n-1 = 100100011111 // n&(n-1) = 100100000000 // \u6240\u4ee5n\u548cn-1\u7684&\u64cd\u4f5c\u4f1a\u6d88\u53bbn\u6700\u53f3\u8fb9\u76841 // \u53ea\u8981\u7b97\u51fan\u53d8\u4e3a0\u603b\u5171\u505a\u4e86\u51e0\u6b21&\u64cd\u4f5c\u5373\u53ef\u6c42\u89e31\u7684\u4e2a\u6570 int num = 0; while (n != 0) { n = n & (n - 1); num++; } return num; } } 3.2 \u590d\u6742\u5ea6\u5206\u6790 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(M) - n&(n\u22121)\u64cd\u4f5c\u53ea\u6709\u3010\u51cf\u6cd5\u3011\u548c\u3010\u4e0e\u3011\u8fd0\u7b97\uff0c\u5360\u7528O(1)\uff1b\u8bbeM\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57n\u4e2d1\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u9700\u8981\u5faa\u73afM\u6b21\uff08\u6bcf\u6b21\u6d88\u53bb\u4e00\u4e2a1\uff09\uff0c\u6240\u4ee5\u662fO(M)\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) - \u53d8\u91cfans\u5360\u7528\u5e38\u6570\u7a7a\u95f4\u3002 4. \u53c2\u8003 https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/ https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/solution/mian-shi-ti-15-er-jin-zhi-zhong-1de-ge-shu-wei-yun/","title":"LCOF 15. \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#1","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\u3002\u4f8b\u5982\uff0c\u628a 9 \u8868\u793a\u6210\u4e8c\u8fdb\u5236\u662f 1001\uff0c\u6709 2 \u4f4d\u662f 1\u3002\u56e0\u6b64\uff0c\u5982\u679c\u8f93\u5165 9\uff0c\u5219\u8be5\u51fd\u6570\u8f93\u51fa 2\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a00000000000000000000000000001011 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 00000000000000000000000000001011 \u4e2d\uff0c\u5171\u6709\u4e09\u4f4d\u4e3a '1'\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a00000000000000000000000010000000 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 00000000000000000000000010000000 \u4e2d\uff0c\u5171\u6709\u4e00\u4f4d\u4e3a '1'\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a11111111111111111111111111111101 \u8f93\u51fa\uff1a31 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 11111111111111111111111111111101 \u4e2d\uff0c\u5171\u6709 31 \u4f4d\u4e3a '1'\u3002","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#2-1-","text":"","title":"2. \u89e3\u6cd5\u2460 - \u9010\u4f4d\u5224\u65ad"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#21-java","text":"public class Solution { public int hammingWeight(int n) { /** * \u6839\u636e\u4f4d\u8fd0\u7b97\u7684\u5b9a\u4e49\uff1a * 1. \u5982\u679cn&1=0\uff0c\u90a3\u4e48n\u4e8c\u8fdb\u5236\u7684\u6700\u53f3\u4f4d\u662f0 * 2. \u5982\u679cn&1=1\uff0c\u90a3\u4e48n\u4e8c\u8fdb\u5236\u7684\u6700\u5de6\u4f4d\u662f1 */ // n\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 int num = 0; /** * \u672c\u9898\u4e2dn\u4e3a\u65e0\u7b26\u53f7\u6570\uff0c\u6240\u4ee5\u53f3\u79fb\u65f6\u4f7f\u7528\u65e0\u7b26\u53f7\u53f3\u79fb * \u65e0\u7b26\u53f7\u53f3\u79fb\uff1a\u4e0d\u7ba1\u7b26\u53f7\u4f4d\uff0c\u53f3\u79fb\u65f6\u5f80\u6700\u5de6\u8fb9\u88650\u5373\u53ef */ while(n != 0) { // \u5982\u679cn\u7684\u6700\u53f3\u8fb9\u662f1\uff0c\u90a3\u4e48n&1=1\uff0c\u6240\u4ee51\u7684\u4e2a\u6570\u5c31\u52a0\u4e00 // \u5982\u679cn\u7684\u6700\u53f3\u8fb9\u662f0\uff0c\u90a3\u4e48n&1=0\uff0c\u6240\u4ee51\u4e2a\u4e2a\u6570\u4e0d\u53d8 num += n & 1; // \u6bcf\u6b21\u5224\u65ad\u5b8c\u6700\u53f3\u4f4d\u6570\u5b57\u5c31\u5c06n\u53f3\u79fb\u4e00\u4f4d n >>>= 1; } return num; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#3-2-nn1","text":"","title":"3. \u89e3\u6cd5\u2461 - \u4f7f\u7528n&amp;(n\u22121)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#31-java","text":"public class Solution { // you need to treat n as an unsigned value public int hammingWeight(int n) { // \u5229\u7528 n&(n\u22121) // n = 100100100000 // n-1 = 100100011111 // n&(n-1) = 100100000000 // \u6240\u4ee5n\u548cn-1\u7684&\u64cd\u4f5c\u4f1a\u6d88\u53bbn\u6700\u53f3\u8fb9\u76841 // \u53ea\u8981\u7b97\u51fan\u53d8\u4e3a0\u603b\u5171\u505a\u4e86\u51e0\u6b21&\u64cd\u4f5c\u5373\u53ef\u6c42\u89e31\u7684\u4e2a\u6570 int num = 0; while (n != 0) { n = n & (n - 1); num++; } return num; } }","title":"3.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#32","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(M) - n&(n\u22121)\u64cd\u4f5c\u53ea\u6709\u3010\u51cf\u6cd5\u3011\u548c\u3010\u4e0e\u3011\u8fd0\u7b97\uff0c\u5360\u7528O(1)\uff1b\u8bbeM\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57n\u4e2d1\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u9700\u8981\u5faa\u73afM\u6b21\uff08\u6bcf\u6b21\u6d88\u53bb\u4e00\u4e2a1\uff09\uff0c\u6240\u4ee5\u662fO(M)\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) - \u53d8\u91cfans\u5360\u7528\u5e38\u6570\u7a7a\u95f4\u3002","title":"3.2 \u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#4","text":"https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/ https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/solution/mian-shi-ti-15-er-jin-zhi-zhong-1de-ge-shu-wei-yun/","title":"4. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/","text":"1. \u95ee\u9898 \u5b9e\u73b0\u51fd\u6570double Power(double base, int exponent)\uff0c\u6c42base\u7684exponent\u6b21\u65b9\u3002\u4e0d\u5f97\u4f7f\u7528\u5e93\u51fd\u6570\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2-2 = 1/22 = 1/4 = 0.25 \u8bf4\u660e: - -100.0 < x < 100.0 - n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1]\u3002 2. \u89e3\u6cd5 - \u5206\u6cbb \u9012\u5f52 n \u7684\u8303\u56f4\u662f[\u22122^31, 2^31 \u2212 1]\uff0c\u5f53 n = -2^31 \u65f6\uff0c\u6267\u884c -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97\u3002 2.1 Java // \u5206\u6cbb\u7b97\u6cd5 \u9012\u5f52 class Solution { public double myPow(double x, int n) { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ long N = n; // \u4e0b\u97623\u4e2aN\u522b\u4e0d\u5c0f\u5fc3\u5199\u6210n\u5566 if (N < 0) { return 1 / myPow(x, -N); } return myPow(x, N); } public double myPow(double x, long n) { // \u8fb9\u754c\u5904\u7406 if (n == 0) return 1; if (x == 1) return 1; // \u5947\u5076\u6b21\u5e42\u5206\u522b\u5904\u7406 // \u5076\u6b21\u5e42 if (n % 2 == 0) { // \u5206\u6cbb - \u5206 double square = myPow(x, n / 2); // \u5206\u6cbb - \u5408 return square * square; } else { // \u5947\u6b21\u5e42 // \u5206\u6cbb - \u5206 double square = myPow(x, (n - 1) / 2); // \u5206\u6cbb - \u5408 return square * square * x; } } } 2.2 Kotlin // \u5206\u6cbb\u7b97\u6cd5 \u9012\u5f52 class Solution { fun myPow(x: Double, n: Int): Double { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ val N = n.toLong() // \u4e0b\u97623\u4e2aN\u522b\u4e0d\u5c0f\u5fc3\u5199\u6210n\u5566 return if (N < 0) { 1 / myPow(x, -N) } else myPow(x, N) } fun myPow(x: Double, n: Long): Double { // \u8fb9\u754c\u5904\u7406 if (n == 0L) return 1.0 if (x == 1.0) return 1.0 // \u5947\u5076\u6b21\u5e42\u5206\u522b\u5904\u7406 // \u5076\u6b21\u5e42 if (n % 2 == 0L) { // \u5206\u6cbb - \u5206 val square = myPow(x, n / 2) // \u5206\u6cbb - \u5408 return square * square } else { // \u5947\u6b21\u5e42 // \u5206\u6cbb - \u5206 val square = myPow(x, (n - 1) / 2) // \u5206\u6cbb - \u5408 return square * square * x } } } 3. \u89e3\u6cd5 - \u5feb\u901f\u5e42 n \u7684\u8303\u56f4\u662f[\u22122^31, 2^31 \u2212 1]\uff0c\u5f53 n = -2^31 \u65f6\uff0c\u6267\u884c -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06n\u8f6c\u6362\u6210long\u7c7b\u578b\u6765\u8ba1\u7b97\u3002 3.1 Java class Solution { public double myPow(double x, int n) { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ long N = n; if(N < 0) { x = 1 / x; N = -N; } /** * \u628a\u6307\u6570 n \u770b\u6210\u4e8c\u8fdb\u5236\u6570\uff0c\u6bd4\u5982 11 \u7684\u4e8c\u8fdb\u5236\u4e3a 1011 * 11 = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 * x^11 = x^(2^3) * x^(2^1) * x^(2^0) */ double ans = 1; // \u6307\u6570\u4e0d\u4e3a0 while (N > 0) { // \u5c06N\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb // \u5982\u679c\u5f53\u524d\u4f4d\u7684\u4e8c\u8fdb\u5236\u4e3a1\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7ed9 ans \u4e58\u4e0a\u5f53\u524d\u7684 x if (N % 2 == 1) { ans *= x; } // x\u6bcf\u4e00\u8f6e\u5faa\u73af\u90fd\u8981\u901a\u8fc7\u7d2f\u4e58\u6765\u589e\u52a0 x *= x; // \u5047\u8bbe x \u7684\u521d\u59cb\u503c\u4e3a3\uff0c\u90a3\u4e48x\u7684\u503c\u4e3a\uff1a3^(2^0), 3^(2^1), 3^(2^2) ... // \u89e3\u51b3\u5b8c\u5f53\u524d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5c06 N/2 \u7ee7\u7eed\u6c42\u4e0b\u4e00\u4f4d N /= 2; } return ans; } } 3.2 Kotlin class Solution { fun myPow(x: Double, n: Int): Double { var x = x /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ var N = n.toLong() if (N < 0) { x = 1 / x N = -N } /** * \u628a\u6307\u6570 n \u770b\u6210\u4e8c\u8fdb\u5236\u6570\uff0c\u6bd4\u5982 11 \u7684\u4e8c\u8fdb\u5236\u4e3a 1011 * 11 = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 * x^11 = x^(2^3) * x^(2^1) * x^(2^0) */ var ans = 1.0 // \u6307\u6570\u4e0d\u4e3a0 while (N > 0) { // \u5c06N\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb // \u5982\u679c\u5f53\u524d\u4f4d\u7684\u4e8c\u8fdb\u5236\u4e3a1\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7ed9 ans \u4e58\u4e0a\u5f53\u524d\u7684 x if (N % 2 == 1L) { ans *= x } // x\u6bcf\u4e00\u8f6e\u5faa\u73af\u90fd\u8981\u901a\u8fc7\u7d2f\u4e58\u6765\u589e\u52a0 x *= x // \u5047\u8bbe x \u7684\u521d\u59cb\u503c\u4e3a3\uff0c\u90a3\u4e48x\u7684\u503c\u4e3a\uff1a3^(2^0), 3^(2^1), 3^(2^2) ... // \u89e3\u51b3\u5b8c\u5f53\u524d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5c06 N/2 \u7ee7\u7eed\u6c42\u4e0b\u4e00\u4f4d N /= 2 } return ans } } 4. \u53c2\u8003 https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/solution/di-gui-xie-fa-fen-zhi-si-xiang-yu-fei-di-gui-xie-f/","title":"LCOF 16. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#1","text":"\u5b9e\u73b0\u51fd\u6570double Power(double base, int exponent)\uff0c\u6c42base\u7684exponent\u6b21\u65b9\u3002\u4e0d\u5f97\u4f7f\u7528\u5e93\u51fd\u6570\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2-2 = 1/22 = 1/4 = 0.25 \u8bf4\u660e: - -100.0 < x < 100.0 - n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1]\u3002","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#2-","text":"n \u7684\u8303\u56f4\u662f[\u22122^31, 2^31 \u2212 1]\uff0c\u5f53 n = -2^31 \u65f6\uff0c\u6267\u884c -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97\u3002","title":"2. \u89e3\u6cd5 - \u5206\u6cbb \u9012\u5f52"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#21-java","text":"// \u5206\u6cbb\u7b97\u6cd5 \u9012\u5f52 class Solution { public double myPow(double x, int n) { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ long N = n; // \u4e0b\u97623\u4e2aN\u522b\u4e0d\u5c0f\u5fc3\u5199\u6210n\u5566 if (N < 0) { return 1 / myPow(x, -N); } return myPow(x, N); } public double myPow(double x, long n) { // \u8fb9\u754c\u5904\u7406 if (n == 0) return 1; if (x == 1) return 1; // \u5947\u5076\u6b21\u5e42\u5206\u522b\u5904\u7406 // \u5076\u6b21\u5e42 if (n % 2 == 0) { // \u5206\u6cbb - \u5206 double square = myPow(x, n / 2); // \u5206\u6cbb - \u5408 return square * square; } else { // \u5947\u6b21\u5e42 // \u5206\u6cbb - \u5206 double square = myPow(x, (n - 1) / 2); // \u5206\u6cbb - \u5408 return square * square * x; } } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#22-kotlin","text":"// \u5206\u6cbb\u7b97\u6cd5 \u9012\u5f52 class Solution { fun myPow(x: Double, n: Int): Double { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ val N = n.toLong() // \u4e0b\u97623\u4e2aN\u522b\u4e0d\u5c0f\u5fc3\u5199\u6210n\u5566 return if (N < 0) { 1 / myPow(x, -N) } else myPow(x, N) } fun myPow(x: Double, n: Long): Double { // \u8fb9\u754c\u5904\u7406 if (n == 0L) return 1.0 if (x == 1.0) return 1.0 // \u5947\u5076\u6b21\u5e42\u5206\u522b\u5904\u7406 // \u5076\u6b21\u5e42 if (n % 2 == 0L) { // \u5206\u6cbb - \u5206 val square = myPow(x, n / 2) // \u5206\u6cbb - \u5408 return square * square } else { // \u5947\u6b21\u5e42 // \u5206\u6cbb - \u5206 val square = myPow(x, (n - 1) / 2) // \u5206\u6cbb - \u5408 return square * square * x } } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#3-","text":"n \u7684\u8303\u56f4\u662f[\u22122^31, 2^31 \u2212 1]\uff0c\u5f53 n = -2^31 \u65f6\uff0c\u6267\u884c -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06n\u8f6c\u6362\u6210long\u7c7b\u578b\u6765\u8ba1\u7b97\u3002","title":"3. \u89e3\u6cd5 - \u5feb\u901f\u5e42"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#31-java","text":"class Solution { public double myPow(double x, int n) { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ long N = n; if(N < 0) { x = 1 / x; N = -N; } /** * \u628a\u6307\u6570 n \u770b\u6210\u4e8c\u8fdb\u5236\u6570\uff0c\u6bd4\u5982 11 \u7684\u4e8c\u8fdb\u5236\u4e3a 1011 * 11 = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 * x^11 = x^(2^3) * x^(2^1) * x^(2^0) */ double ans = 1; // \u6307\u6570\u4e0d\u4e3a0 while (N > 0) { // \u5c06N\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb // \u5982\u679c\u5f53\u524d\u4f4d\u7684\u4e8c\u8fdb\u5236\u4e3a1\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7ed9 ans \u4e58\u4e0a\u5f53\u524d\u7684 x if (N % 2 == 1) { ans *= x; } // x\u6bcf\u4e00\u8f6e\u5faa\u73af\u90fd\u8981\u901a\u8fc7\u7d2f\u4e58\u6765\u589e\u52a0 x *= x; // \u5047\u8bbe x \u7684\u521d\u59cb\u503c\u4e3a3\uff0c\u90a3\u4e48x\u7684\u503c\u4e3a\uff1a3^(2^0), 3^(2^1), 3^(2^2) ... // \u89e3\u51b3\u5b8c\u5f53\u524d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5c06 N/2 \u7ee7\u7eed\u6c42\u4e0b\u4e00\u4f4d N /= 2; } return ans; } }","title":"3.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#32-kotlin","text":"class Solution { fun myPow(x: Double, n: Int): Double { var x = x /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ var N = n.toLong() if (N < 0) { x = 1 / x N = -N } /** * \u628a\u6307\u6570 n \u770b\u6210\u4e8c\u8fdb\u5236\u6570\uff0c\u6bd4\u5982 11 \u7684\u4e8c\u8fdb\u5236\u4e3a 1011 * 11 = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 * x^11 = x^(2^3) * x^(2^1) * x^(2^0) */ var ans = 1.0 // \u6307\u6570\u4e0d\u4e3a0 while (N > 0) { // \u5c06N\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb // \u5982\u679c\u5f53\u524d\u4f4d\u7684\u4e8c\u8fdb\u5236\u4e3a1\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7ed9 ans \u4e58\u4e0a\u5f53\u524d\u7684 x if (N % 2 == 1L) { ans *= x } // x\u6bcf\u4e00\u8f6e\u5faa\u73af\u90fd\u8981\u901a\u8fc7\u7d2f\u4e58\u6765\u589e\u52a0 x *= x // \u5047\u8bbe x \u7684\u521d\u59cb\u503c\u4e3a3\uff0c\u90a3\u4e48x\u7684\u503c\u4e3a\uff1a3^(2^0), 3^(2^1), 3^(2^2) ... // \u89e3\u51b3\u5b8c\u5f53\u524d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5c06 N/2 \u7ee7\u7eed\u6c42\u4e0b\u4e00\u4f4d N /= 2 } return ans } }","title":"3.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#4","text":"https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/solution/di-gui-xie-fa-fen-zhi-si-xiang-yu-fei-di-gui-xie-f/","title":"4. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/","text":"1. \u95ee\u9898 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1amatrix = [[1,2,3],[4,5,6],[7,8,9]] \u8f93\u51fa\uff1a[1,2,3,6,9,8,7,4,5] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1amatrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] \u8f93\u51fa\uff1a[1,2,3,4,8,12,11,10,9,5,6,7] \u9650\u5236\uff1a - 0 <= matrix.length <= 100 - 0 <= matrix[i].length <= 100 2. \u89e3\u6cd5 2.1 Java class Solution { public int[] spiralOrder(int[][] matrix) { // \u7a7a\u503c\u5904\u7406 if(matrix.length==0) return new int[0]; // \u521d\u59cb\u5316\u8fb9\u754c\u548c\u7ed3\u679c\u6570\u7ec4 int left = 0, right = matrix[0].length - 1; int top = 0, bottom = matrix.length - 1; int[] res = new int[matrix[0].length * matrix.length]; // \u7ed3\u679c\u6570\u7ec4\u4e0b\u6807 int index = 0; // \u6309\u7167\u65b9\u5411\u8fdb\u884c\u6253\u5370 while (true) { // \u4ece\u5de6\u5230\u53f3 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (int i=left;i<=right;i++) res[index++] = matrix[top][i]; // 2. \u4e0a\u8fb9\u754c\u6536\u7f29\uff08\u4e0b\u79fb\uff09 top++; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (top > bottom) break; // \u4ece\u4e0a\u5230\u4e0b // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (int i=top;i<=bottom;i++) res[index++] = matrix[i][right]; // 2. \u53f3\u8fb9\u754c\u6536\u7f29\uff08\u5de6\u79fb\uff09 right--; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u53f3\u8fb9\u754c\u548c\u5de6\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (left > right) break; // \u4ece\u53f3\u5230\u5de6 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (int i=right;i>=left;i--) res[index++] = matrix[bottom][i]; // 2. \u4e0b\u8fb9\u754c\u6536\u7f29\uff08\u4e0a\u79fb) bottom--; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0b\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (top > bottom) break; // \u4ece\u4e0b\u5230\u4e0a // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (int i=bottom;i>=top;i--) res[index++] = matrix[i][left]; // 2. \u5de6\u8fb9\u754c\u6536\u7f29\uff08\u53f3\u79fb\uff09 left++; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u662f\u5426\u76f8\u9047 if(left > right) break; } return res; } } 2.2 Kotlin class Solution { fun spiralOrder(matrix: Array<IntArray>): IntArray { // \u7a7a\u503c\u5904\u7406 if(matrix.size==0) return IntArray(0) // \u521d\u59cb\u5316\u8fb9\u754c\u548c\u7ed3\u679c\u6570\u7ec4 var left = 0 var right = matrix[0].size - 1 var top = 0 var bottom = matrix.size - 1 var res = IntArray(matrix[0].size * matrix.size) // \u7ed3\u679c\u6570\u7ec4\u4e0b\u6807 var index = 0 while (true) { // \u4ece\u5de6\u5230\u53f3 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (i in left..right) res[index++] = matrix[top][i] // 2. \u4e0a\u8fb9\u754c\u6536\u7f29\uff08\u4e0b\u79fb\uff09 top++ // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (top > bottom) break // \u4ece\u4e0a\u5230\u4e0b // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (i in top..bottom) res[index++] = matrix[i][right]; // 2. \u53f3\u8fb9\u754c\u6536\u7f29\uff08\u5de6\u79fb\uff09 right-- // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u53f3\u8fb9\u754c\u548c\u5de6\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (left > right) break // \u4ece\u53f3\u5230\u5de6 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (i in right downTo left) res[index++] = matrix[bottom][i] // 2. \u4e0b\u8fb9\u754c\u6536\u7f29\uff08\u4e0a\u79fb) bottom-- // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0b\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (top > bottom) break // \u4ece\u4e0b\u5230\u4e0a // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (i in bottom downTo top) res[index++] = matrix[i][left] // 2. \u5de6\u8fb9\u754c\u6536\u7f29\uff08\u53f3\u79fb\uff09 left++ // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u662f\u5426\u76f8\u9047 if(left > right) break } return res } } 3. \u53c2\u8003 \u300a\u5251\u6307 Offer\uff08\u7b2c 2 \u7248\uff09\u300b\uff1a\u9762\u8bd5\u989829. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 Krahets\uff1a\u9762\u8bd5\u989829. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635\uff08\u6a21\u62df\u3001\u8bbe\u5b9a\u8fb9\u754c\uff0c\u6e05\u6670\u56fe\u89e3\uff09 4. \u5b66\u4e60\u8349\u7a3f","title":"LCOF 29. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#1","text":"\u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1amatrix = [[1,2,3],[4,5,6],[7,8,9]] \u8f93\u51fa\uff1a[1,2,3,6,9,8,7,4,5] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1amatrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] \u8f93\u51fa\uff1a[1,2,3,4,8,12,11,10,9,5,6,7] \u9650\u5236\uff1a - 0 <= matrix.length <= 100 - 0 <= matrix[i].length <= 100","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#21-java","text":"class Solution { public int[] spiralOrder(int[][] matrix) { // \u7a7a\u503c\u5904\u7406 if(matrix.length==0) return new int[0]; // \u521d\u59cb\u5316\u8fb9\u754c\u548c\u7ed3\u679c\u6570\u7ec4 int left = 0, right = matrix[0].length - 1; int top = 0, bottom = matrix.length - 1; int[] res = new int[matrix[0].length * matrix.length]; // \u7ed3\u679c\u6570\u7ec4\u4e0b\u6807 int index = 0; // \u6309\u7167\u65b9\u5411\u8fdb\u884c\u6253\u5370 while (true) { // \u4ece\u5de6\u5230\u53f3 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (int i=left;i<=right;i++) res[index++] = matrix[top][i]; // 2. \u4e0a\u8fb9\u754c\u6536\u7f29\uff08\u4e0b\u79fb\uff09 top++; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (top > bottom) break; // \u4ece\u4e0a\u5230\u4e0b // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (int i=top;i<=bottom;i++) res[index++] = matrix[i][right]; // 2. \u53f3\u8fb9\u754c\u6536\u7f29\uff08\u5de6\u79fb\uff09 right--; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u53f3\u8fb9\u754c\u548c\u5de6\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (left > right) break; // \u4ece\u53f3\u5230\u5de6 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (int i=right;i>=left;i--) res[index++] = matrix[bottom][i]; // 2. \u4e0b\u8fb9\u754c\u6536\u7f29\uff08\u4e0a\u79fb) bottom--; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0b\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (top > bottom) break; // \u4ece\u4e0b\u5230\u4e0a // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (int i=bottom;i>=top;i--) res[index++] = matrix[i][left]; // 2. \u5de6\u8fb9\u754c\u6536\u7f29\uff08\u53f3\u79fb\uff09 left++; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u662f\u5426\u76f8\u9047 if(left > right) break; } return res; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#22-kotlin","text":"class Solution { fun spiralOrder(matrix: Array<IntArray>): IntArray { // \u7a7a\u503c\u5904\u7406 if(matrix.size==0) return IntArray(0) // \u521d\u59cb\u5316\u8fb9\u754c\u548c\u7ed3\u679c\u6570\u7ec4 var left = 0 var right = matrix[0].size - 1 var top = 0 var bottom = matrix.size - 1 var res = IntArray(matrix[0].size * matrix.size) // \u7ed3\u679c\u6570\u7ec4\u4e0b\u6807 var index = 0 while (true) { // \u4ece\u5de6\u5230\u53f3 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (i in left..right) res[index++] = matrix[top][i] // 2. \u4e0a\u8fb9\u754c\u6536\u7f29\uff08\u4e0b\u79fb\uff09 top++ // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (top > bottom) break // \u4ece\u4e0a\u5230\u4e0b // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (i in top..bottom) res[index++] = matrix[i][right]; // 2. \u53f3\u8fb9\u754c\u6536\u7f29\uff08\u5de6\u79fb\uff09 right-- // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u53f3\u8fb9\u754c\u548c\u5de6\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (left > right) break // \u4ece\u53f3\u5230\u5de6 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (i in right downTo left) res[index++] = matrix[bottom][i] // 2. \u4e0b\u8fb9\u754c\u6536\u7f29\uff08\u4e0a\u79fb) bottom-- // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0b\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\u662f\u5426\u76f8\u9047 if (top > bottom) break // \u4ece\u4e0b\u5230\u4e0a // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for (i in bottom downTo top) res[index++] = matrix[i][left] // 2. \u5de6\u8fb9\u754c\u6536\u7f29\uff08\u53f3\u79fb\uff09 left++ // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u662f\u5426\u76f8\u9047 if(left > right) break } return res } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#3","text":"\u300a\u5251\u6307 Offer\uff08\u7b2c 2 \u7248\uff09\u300b\uff1a\u9762\u8bd5\u989829. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 Krahets\uff1a\u9762\u8bd5\u989829. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635\uff08\u6a21\u62df\u3001\u8bbe\u5b9a\u8fb9\u754c\uff0c\u6e05\u6670\u56fe\u89e3\uff09","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#4","text":"","title":"4. \u5b66\u4e60\u8349\u7a3f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/","text":"1. \u95ee\u9898 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u89c4\u5219\u628a\u5b83\u7ffb\u8bd1\u4e3a\u5b57\u7b26\u4e32\uff1a0 \u7ffb\u8bd1\u6210 \u201ca\u201d \uff0c1 \u7ffb\u8bd1\u6210 \u201cb\u201d\uff0c\u2026\u2026\uff0c11 \u7ffb\u8bd1\u6210 \u201cl\u201d\uff0c\u2026\u2026\uff0c25 \u7ffb\u8bd1\u6210 \u201cz\u201d\u3002\u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002\u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002 \u793a\u4f8b 1: \u8f93\u5165: 12258 \u8f93\u51fa: 5 \u89e3\u91ca: 12258\u67095\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\uff0c\u5206\u522b\u662f\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"\u548c\"mzi\" \u63d0\u793a\uff1a - 0 \u2264 num < $2^{31}$ 2. \u89e3\u6cd5 - \u52a8\u6001\u89c4\u5212 2.1 Java class Solution { public int translateNum(int num) { // \u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c06\u6574\u4e2a\u6570\u5b57\u5b58\u4e0b\u6765 String str = String.valueOf(num); int n = str.length(); // \u72b6\u6001\u6570\u7ec4 // dp[i]\u8868\u793a\u4ee5\u7b2ci\u4e2a\u6570\u5b57\u7ed3\u5c3e\u7684\u6570\u5b57\u7684\u7ffb\u8bd1\u65b9\u6848\u7684\u6570\u91cf int[] dp = new int[n+1]; // \u8fb9\u754c\u503c dp[1] = 1; //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u65f6\uff0c\u7ffb\u8bd1\u65b9\u6848\u663e\u7136\u4e3a1 dp[0] = 1; //\u82e5\u524d\u4e24\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\uff0c\u90a3\u4e48dp[2]=dp[0]+dp[1], \u7531\u4e8edp[1]=1\u6240\u4ee5dp[0]=0 // \u904d\u5386\u5b57\u7b26\u4e32 for (int i=2;i<=n;i++) { // \u53d6\u51fa\u7b2ci-1\u4e2a\u6570\u5b57\u548c\u7b2ci\u4e2a\u6570\u5b57 // substring: [i, j) \u5de6\u95ed\u53f3\u5f00 // dp\u6570\u7ec4\u4e2d\uff0c\u6570\u5b57\u7684\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684 // \u4f46\u662f\u5b57\u7b26\u4e32\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5e94\u8be5\u662f(i-2, i) String curNum = str.substring(i-2, i); // \u8ba1\u7b97dp[i]\uff0c\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a if(curNum.compareTo(\"10\")>=0 && curNum.compareTo(\"25\")<=0) { dp[i] = dp[i-1] + dp[i-2]; } else {//\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u4e0d\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp[i] = dp[i-1]; } } return dp[n]; } } 2.2 Kotlin class Solution { fun translateNum(num: Int): Int { // \u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c06\u6574\u4e2a\u6570\u5b57\u5b58\u4e0b\u6765 var str = num.toString() var n = str.length // \u72b6\u6001\u6570\u7ec4 // dp[i]\u8868\u793a\u4ee5\u7b2ci\u4e2a\u6570\u5b57\u7ed3\u5c3e\u7684\u6570\u5b57\u7684\u7ffb\u8bd1\u65b9\u6848\u7684\u6570\u91cf var dp = IntArray(n+1) // \u8fb9\u754c\u503c dp[1] = 1 //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u65f6\uff0c\u7ffb\u8bd1\u65b9\u6848\u663e\u7136\u4e3a1 dp[0] = 1 //\u82e5\u524d\u4e24\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\uff0c\u90a3\u4e48dp[2]=dp[0]+dp[1], \u7531\u4e8edp[1]=1\u6240\u4ee5dp[0]=0 // \u904d\u5386\u5b57\u7b26\u4e32 for (i in 2..n) { // \u53d6\u51fa\u7b2ci-1\u4e2a\u6570\u5b57\u548c\u7b2ci\u4e2a\u6570\u5b57 // substring: [i, j) \u5de6\u95ed\u53f3\u5f00 // dp\u6570\u7ec4\u4e2d\uff0c\u6570\u5b57\u7684\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684 // \u4f46\u662f\u5b57\u7b26\u4e32\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5e94\u8be5\u662f(i-2, i) var curNum = str.substring(i-2, i) // \u8ba1\u7b97dp[i]\uff0c\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp[i] = if(curNum.compareTo(\"10\")>=0 && curNum.compareTo(\"25\")<=0) { dp[i-1] + dp[i-2] } else {//\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u4e0d\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp[i-1] } } return dp[n] } } 3. \u53c2\u8003 \u300a\u5251\u6307 Offer\uff08\u7b2c 2 \u7248\uff09\u300b\uff1a\u9762\u8bd5\u989846. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 Krahets\uff1a\u9762\u8bd5\u989846. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32\uff08\u52a8\u6001\u89c4\u5212\uff0c\u6e05\u6670\u56fe\u89e3\uff09 4. \u5b66\u4e60\u8349\u7a3f","title":"LCOF 46. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u89c4\u5219\u628a\u5b83\u7ffb\u8bd1\u4e3a\u5b57\u7b26\u4e32\uff1a0 \u7ffb\u8bd1\u6210 \u201ca\u201d \uff0c1 \u7ffb\u8bd1\u6210 \u201cb\u201d\uff0c\u2026\u2026\uff0c11 \u7ffb\u8bd1\u6210 \u201cl\u201d\uff0c\u2026\u2026\uff0c25 \u7ffb\u8bd1\u6210 \u201cz\u201d\u3002\u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002\u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002 \u793a\u4f8b 1: \u8f93\u5165: 12258 \u8f93\u51fa: 5 \u89e3\u91ca: 12258\u67095\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\uff0c\u5206\u522b\u662f\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"\u548c\"mzi\" \u63d0\u793a\uff1a - 0 \u2264 num < $2^{31}$","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#2-","text":"","title":"2. \u89e3\u6cd5 - \u52a8\u6001\u89c4\u5212"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#21-java","text":"class Solution { public int translateNum(int num) { // \u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c06\u6574\u4e2a\u6570\u5b57\u5b58\u4e0b\u6765 String str = String.valueOf(num); int n = str.length(); // \u72b6\u6001\u6570\u7ec4 // dp[i]\u8868\u793a\u4ee5\u7b2ci\u4e2a\u6570\u5b57\u7ed3\u5c3e\u7684\u6570\u5b57\u7684\u7ffb\u8bd1\u65b9\u6848\u7684\u6570\u91cf int[] dp = new int[n+1]; // \u8fb9\u754c\u503c dp[1] = 1; //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u65f6\uff0c\u7ffb\u8bd1\u65b9\u6848\u663e\u7136\u4e3a1 dp[0] = 1; //\u82e5\u524d\u4e24\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\uff0c\u90a3\u4e48dp[2]=dp[0]+dp[1], \u7531\u4e8edp[1]=1\u6240\u4ee5dp[0]=0 // \u904d\u5386\u5b57\u7b26\u4e32 for (int i=2;i<=n;i++) { // \u53d6\u51fa\u7b2ci-1\u4e2a\u6570\u5b57\u548c\u7b2ci\u4e2a\u6570\u5b57 // substring: [i, j) \u5de6\u95ed\u53f3\u5f00 // dp\u6570\u7ec4\u4e2d\uff0c\u6570\u5b57\u7684\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684 // \u4f46\u662f\u5b57\u7b26\u4e32\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5e94\u8be5\u662f(i-2, i) String curNum = str.substring(i-2, i); // \u8ba1\u7b97dp[i]\uff0c\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a if(curNum.compareTo(\"10\")>=0 && curNum.compareTo(\"25\")<=0) { dp[i] = dp[i-1] + dp[i-2]; } else {//\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u4e0d\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp[i] = dp[i-1]; } } return dp[n]; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#22-kotlin","text":"class Solution { fun translateNum(num: Int): Int { // \u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c06\u6574\u4e2a\u6570\u5b57\u5b58\u4e0b\u6765 var str = num.toString() var n = str.length // \u72b6\u6001\u6570\u7ec4 // dp[i]\u8868\u793a\u4ee5\u7b2ci\u4e2a\u6570\u5b57\u7ed3\u5c3e\u7684\u6570\u5b57\u7684\u7ffb\u8bd1\u65b9\u6848\u7684\u6570\u91cf var dp = IntArray(n+1) // \u8fb9\u754c\u503c dp[1] = 1 //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u65f6\uff0c\u7ffb\u8bd1\u65b9\u6848\u663e\u7136\u4e3a1 dp[0] = 1 //\u82e5\u524d\u4e24\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\uff0c\u90a3\u4e48dp[2]=dp[0]+dp[1], \u7531\u4e8edp[1]=1\u6240\u4ee5dp[0]=0 // \u904d\u5386\u5b57\u7b26\u4e32 for (i in 2..n) { // \u53d6\u51fa\u7b2ci-1\u4e2a\u6570\u5b57\u548c\u7b2ci\u4e2a\u6570\u5b57 // substring: [i, j) \u5de6\u95ed\u53f3\u5f00 // dp\u6570\u7ec4\u4e2d\uff0c\u6570\u5b57\u7684\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684 // \u4f46\u662f\u5b57\u7b26\u4e32\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5e94\u8be5\u662f(i-2, i) var curNum = str.substring(i-2, i) // \u8ba1\u7b97dp[i]\uff0c\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp[i] = if(curNum.compareTo(\"10\")>=0 && curNum.compareTo(\"25\")<=0) { dp[i-1] + dp[i-2] } else {//\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u4e0d\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp[i-1] } } return dp[n] } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#3","text":"\u300a\u5251\u6307 Offer\uff08\u7b2c 2 \u7248\uff09\u300b\uff1a\u9762\u8bd5\u989846. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 Krahets\uff1a\u9762\u8bd5\u989846. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32\uff08\u52a8\u6001\u89c4\u5212\uff0c\u6e05\u6670\u56fe\u89e3\uff09","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#4","text":"","title":"4. \u5b66\u4e60\u8349\u7a3f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/","text":"1. \u95ee\u9898 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7b2ck\u5927\u7684\u8282\u70b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: root = [3,1,4,null,2], k = 1 3 / \\ 1 4 \\ 2 \u8f93\u51fa: 4 \u793a\u4f8b 2: \u8f93\u5165: root = [5,3,6,2,4,null,null,1], k = 3 5 / \\ 3 6 / \\ 2 4 / 1 \u8f93\u51fa: 4 \u9650\u5236\uff1a 1 \u2264 k \u2264 \u4e8c\u53c9\u641c\u7d22\u6811\u5143\u7d20\u4e2a\u6570 2. \u89e3\u6cd5 - \u4e2d\u5e8f\u904d\u5386 2.1 Java /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { int ans, kk; public int kthLargest(TreeNode root, int k) { // kk\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u4f7f\u7528 kk = k; // \u5bf9\u4e8c\u53c9\u641c\u7d22\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386 dfs(root); // \u8fd4\u56de\u7ed3\u679c return ans; } // \u4e2d\u5e8f\u904d\u5386\u7684\u904d\u5386\uff1a\u53f3\u6839\u5de6 public void dfs(TreeNode root) { if (root == null) return; // \u53f3 dfs(root.right); // \u627e\u5230\u4e86\u7b2ck\u5927\u7684\u5143\u7d20\uff0c\u8bb0\u5f55\u4e0b\u6765 if (--kk == 0) ans = root.val; // kk\u5df2\u7ecf\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5373\u53ef if (kk == 0) return; // \u5de6 dfs(root.left); } } 2.2 Kotlin /** * Example: * var ti = TreeNode(5) * var v = ti.`val` * Definition for a binary tree node. * class TreeNode(var `val`: Int) { * var left: TreeNode? = null * var right: TreeNode? = null * } */ class Solution { var ans: Int = 0 var kk: Int = 0 fun kthLargest(root: TreeNode, k: Int): Int { // kk\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u4f7f\u7528 kk = k // \u5bf9\u4e8c\u53c9\u641c\u7d22\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386 dfs(root) // \u8fd4\u56de\u7ed3\u679c return ans } // \u4e2d\u5e8f\u904d\u5386\u7684\u904d\u5386\uff1a\u53f3\u6839\u5de6 fun dfs(root: TreeNode?) { if (root == null) return // \u53f3 dfs(root.right) // \u627e\u5230\u4e86\u7b2ck\u5927\u7684\u5143\u7d20\uff0c\u8bb0\u5f55\u4e0b\u6765 if (--kk == 0) ans = root.`val` // kk\u5df2\u7ecf\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5373\u53ef if (kk == 0) return // \u5de6 dfs(root.left) } } 3. \u53c2\u8003 https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/ https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/solution/mian-shi-ti-54-er-cha-sou-suo-shu-de-di-k-da-jie-d/ 4. \u7b14\u8bb0","title":"LCOF 54. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#1","text":"\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7b2ck\u5927\u7684\u8282\u70b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: root = [3,1,4,null,2], k = 1 3 / \\ 1 4 \\ 2 \u8f93\u51fa: 4 \u793a\u4f8b 2: \u8f93\u5165: root = [5,3,6,2,4,null,null,1], k = 3 5 / \\ 3 6 / \\ 2 4 / 1 \u8f93\u51fa: 4 \u9650\u5236\uff1a 1 \u2264 k \u2264 \u4e8c\u53c9\u641c\u7d22\u6811\u5143\u7d20\u4e2a\u6570","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#2-","text":"","title":"2. \u89e3\u6cd5 - \u4e2d\u5e8f\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#21-java","text":"/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { int ans, kk; public int kthLargest(TreeNode root, int k) { // kk\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u4f7f\u7528 kk = k; // \u5bf9\u4e8c\u53c9\u641c\u7d22\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386 dfs(root); // \u8fd4\u56de\u7ed3\u679c return ans; } // \u4e2d\u5e8f\u904d\u5386\u7684\u904d\u5386\uff1a\u53f3\u6839\u5de6 public void dfs(TreeNode root) { if (root == null) return; // \u53f3 dfs(root.right); // \u627e\u5230\u4e86\u7b2ck\u5927\u7684\u5143\u7d20\uff0c\u8bb0\u5f55\u4e0b\u6765 if (--kk == 0) ans = root.val; // kk\u5df2\u7ecf\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5373\u53ef if (kk == 0) return; // \u5de6 dfs(root.left); } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#22-kotlin","text":"/** * Example: * var ti = TreeNode(5) * var v = ti.`val` * Definition for a binary tree node. * class TreeNode(var `val`: Int) { * var left: TreeNode? = null * var right: TreeNode? = null * } */ class Solution { var ans: Int = 0 var kk: Int = 0 fun kthLargest(root: TreeNode, k: Int): Int { // kk\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u4f7f\u7528 kk = k // \u5bf9\u4e8c\u53c9\u641c\u7d22\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386 dfs(root) // \u8fd4\u56de\u7ed3\u679c return ans } // \u4e2d\u5e8f\u904d\u5386\u7684\u904d\u5386\uff1a\u53f3\u6839\u5de6 fun dfs(root: TreeNode?) { if (root == null) return // \u53f3 dfs(root.right) // \u627e\u5230\u4e86\u7b2ck\u5927\u7684\u5143\u7d20\uff0c\u8bb0\u5f55\u4e0b\u6765 if (--kk == 0) ans = root.`val` // kk\u5df2\u7ecf\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5373\u53ef if (kk == 0) return // \u5de6 dfs(root.left) } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#3","text":"https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/ https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/solution/mian-shi-ti-54-er-cha-sou-suo-shu-de-di-k-da-jie-d/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#4","text":"","title":"4. \u7b14\u8bb0"},{"location":"%E7%AE%80%E5%8E%86/","text":"\u7b80\u5386","title":"\u7b80\u5386"},{"location":"%E7%AE%80%E5%8E%86/#_1","text":"","title":"\u7b80\u5386"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","text":"\u8ba1\u7b97\u673a\u7f51\u7edc","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_1","text":"","title":"\u8ba1\u7b97\u673a\u7f51\u7edc"},{"location":"%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/","text":"\u9762\u7ecf\u6c47\u603b \u5168\u662f\u4ece\u725b\u5ba2\u7f51\u6252\u62c9\u4e0b\u6765\u7684\uff0c\u53ef\u80fd\u5b58\u5728\u94fe\u63a5\u5931\u6548\u7684\u60c5\u51b5\uff0c\u4f1a\u5b9a\u671f\u6e05\u7406\u3002 \u6bcf\u4e00\u4e2a\u9762\u7b4b\u90fd\u8981\u81ea\u5df1\u8fc7\u4e00\u904d\uff0c\u4e0d\u8981\u770b\u4e00\u904d\u8111\u5185\u8fc7\u4e00\u4e0b\u5c31\u7ed3\u675f\u4e86\uff0c\u6bcf\u4e2a\u9898\u76ee\u5355\u72ec\u62ce\u51fa\u6765\u505a\u6210\u4e00\u4e2a\u95ee\u5377\u7136\u540e\u81ea\u5df1\u6253\u5b57\u56de\u7b54\u4e00\u4e0b\u3002 \uff08\u54c7\u6211\u4e4b\u540e\u53ef\u4ee5\u505a\u4e00\u4e0b\u8fd9\u4e2a\u5de5\u4f5c\uff0c\u6bd4\u5982\u8fd9\u4efd\u9762\u7b4b\u4f60\u4f1a\u5982\u4f55\u56de\u7b54\u5462\uff1f\u4e4b\u7c7b\u7684\uff0c\u53ef\u4ee5\u653e\u5230\u535a\u5ba2\u4e5f\u53ef\u4ee5\u76f4\u63a5\u653e\u5230github\u4e0a\u9762\uff0c\u4e4b\u540e\u6765\u505a\u4e00\u4e0b\u54c8 \u8fd9\u4e2a\u5de5\u4f5c\u8fd8\u53ef\u4ee5\u751f\u6210\u535a\u5ba2\u6587\u7ae0\uff0c\u6bd4\u5982INTERVIEW REVIEW\u8fd9\u79cd\u5927\u6807\u9898\u4e4b\u7c7b\u7684\u3002 \u5b89\u5353\u9762\u7b4b\u6c47\u603b \u5b89\u5353\u5de5\u7a0b\u5e08\u7cbe\u9009\u9762\u7ecf\u6c47\u603b_\u6821\u62db\u5b9e\u4e60\u793e\u62db_\u725b\u5ba2\u7f51_\u725b\u5ba2\u7f51 \u5b57\u8282\u9762\u7b4b\u6c47\u603b \u5b57\u8282\u8df3\u52a8\u5185\u63a8\u62db\u8058_\u5b57\u8282\u8df3\u52a8\u662f\u505a\u4ec0\u4e48\u7684_\u5b57\u8282\u8df3\u52a8\u6821\u56ed\u62db\u8058/\u9762\u8bd5\u7ecf\u9a8c/\u7b14\u8bd5\u9898\u76ee/\u793e\u62db\u5185\u63a8_\u516c\u53f8\u4fe1\u606f_\u725b\u5ba2\u7f51 \u5b57\u8282\u5b89\u5353\u9762\u7b4b\u6c47\u603b \u5b57\u8282\u8df3\u52a8\u5185\u63a8\u62db\u8058_\u5b57\u8282\u8df3\u52a8\u662f\u505a\u4ec0\u4e48\u7684_\u5b57\u8282\u8df3\u52a8\u6821\u56ed\u62db\u8058/\u9762\u8bd5\u7ecf\u9a8c/\u7b14\u8bd5\u9898\u76ee/\u793e\u62db\u5185\u63a8_\u516c\u53f8\u4fe1\u606f_\u725b\u5ba2\u7f51 \u5b89\u5353\u9762\u7b4b\u6536\u96c6 \u5b57\u8282\u63d0\u524d\u6279\u6821\u62db\u4e00\u9762Android\u5de5\u7a0b\u5e082020[\u5df2\u6302] \u79fb\u52a8\u5ba2\u6237\u7aef\u5f00\u53d1\uff08\u6296\u97f3\uff09\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u5b89\u5353\u4e00\u9762\u4e8c\u9762\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u4fe9\u5c0f\u65f6\u9762\u8bd5\u611f\u60f3_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8\u9762\u8bd5\u96be\u5417\uff0c\u5e94\u8be5\u5982\u4f55\u5e94\u5bf9\uff1f \u5b57\u8282\u8df3\u52a8-\u4e09\u9762\u7ecf-\u987a\u4fbfoffer\u8bb8\u613f\uff3b\u5df2\u8fd8\u613f:\u6536\u5230\u610f\u5411\u4e66\uff3d_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8\uff0cAndroid\u5f00\u53d1\u63d0\u524d\u6279\uff0c\u65b0\u9c9c\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 [21\u5c4a\u79cb\u62db] \u5b57\u8282--\u5b89\u5353\u5f00\u53d1\u5b9e\u4e60\u751f \u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u63d0\u524d\u6279\u6821\u62db\u4e00\u9762Android\u5de5\u7a0b\u5e082020[\u5df2\u6302] \u5b57\u8282\u8df3\u52a8\u5ba2\u6237\u7aef\u9762\u7ecf\uff08\u5df2Offer\uff09_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 [21\u5c4a\u79cb\u62db] \u5b57\u8282--\u5b89\u5353\u5f00\u53d1\u5b9e\u4e60\u751f \u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165url\u56de\u8f66\u540e\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e5f\u592a\u597d\u73a9\u4e86\u628a\u54c8\u54c8\u54c8\u54c8\u54c8 \u5b57\u8282\u8df3\u52a8\u5ba2\u6237\u7aef\u5f00\u53d1\u4e00\u9762_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8 \u4e09\u6b21\u5931\u8d25\u7684\u4e00\u9762_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u6ce8\u518c\u767b\u5f55\u7684\u5b9e\u73b0\u7ec6\u8282 \u8fd9\u4e2a\u4e4b\u540e\u4e00\u5b9a\u8981\u62a0\u4e00\u4e0b hashmap\u662f\u5982\u4f55\u5b9e\u73b0\u7684 \u5b57\u8282\u5317\u4eac\u6296\u97f3\u5ba2\u6237\u7aef\u4e00\u9762\u4e8c\u9762\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8-\u5934\u6761Android\u5f00\u53d1\u5b9e\u4e60\u751f\u9762\u8bd5_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8Android\u5c97\u793e\u62db\u9762\u7b4b \u83dc\u9e21\u5b57\u8282\u79cb\u62db\u9762\u7b4b\uff08\u518d\u53d1\u4e00\u6b21\uff09 \u5b57\u8282\u5ba2\u6237\u7aef \u4e00\u3001\u4e8c\u9762\u9762\u7ecf\uff0c\u8bb8\u613f\u4e09\u9762~ \u5b57\u8282\u5ba2\u6237\u7aef\u4e09~\u56db\u9762\u9762\u7ecf\uff0c\u5df2oc\uff08\u66f4\u65b0\uff1a\u5df2\u90ae\u4ef6\uff09","title":"\u9762\u7ecf\u6c47\u603b"},{"location":"%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/#_1","text":"\u5168\u662f\u4ece\u725b\u5ba2\u7f51\u6252\u62c9\u4e0b\u6765\u7684\uff0c\u53ef\u80fd\u5b58\u5728\u94fe\u63a5\u5931\u6548\u7684\u60c5\u51b5\uff0c\u4f1a\u5b9a\u671f\u6e05\u7406\u3002 \u6bcf\u4e00\u4e2a\u9762\u7b4b\u90fd\u8981\u81ea\u5df1\u8fc7\u4e00\u904d\uff0c\u4e0d\u8981\u770b\u4e00\u904d\u8111\u5185\u8fc7\u4e00\u4e0b\u5c31\u7ed3\u675f\u4e86\uff0c\u6bcf\u4e2a\u9898\u76ee\u5355\u72ec\u62ce\u51fa\u6765\u505a\u6210\u4e00\u4e2a\u95ee\u5377\u7136\u540e\u81ea\u5df1\u6253\u5b57\u56de\u7b54\u4e00\u4e0b\u3002 \uff08\u54c7\u6211\u4e4b\u540e\u53ef\u4ee5\u505a\u4e00\u4e0b\u8fd9\u4e2a\u5de5\u4f5c\uff0c\u6bd4\u5982\u8fd9\u4efd\u9762\u7b4b\u4f60\u4f1a\u5982\u4f55\u56de\u7b54\u5462\uff1f\u4e4b\u7c7b\u7684\uff0c\u53ef\u4ee5\u653e\u5230\u535a\u5ba2\u4e5f\u53ef\u4ee5\u76f4\u63a5\u653e\u5230github\u4e0a\u9762\uff0c\u4e4b\u540e\u6765\u505a\u4e00\u4e0b\u54c8 \u8fd9\u4e2a\u5de5\u4f5c\u8fd8\u53ef\u4ee5\u751f\u6210\u535a\u5ba2\u6587\u7ae0\uff0c\u6bd4\u5982INTERVIEW REVIEW\u8fd9\u79cd\u5927\u6807\u9898\u4e4b\u7c7b\u7684\u3002","title":"\u9762\u7ecf\u6c47\u603b"},{"location":"%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/#_2","text":"\u5b89\u5353\u5de5\u7a0b\u5e08\u7cbe\u9009\u9762\u7ecf\u6c47\u603b_\u6821\u62db\u5b9e\u4e60\u793e\u62db_\u725b\u5ba2\u7f51_\u725b\u5ba2\u7f51","title":"\u5b89\u5353\u9762\u7b4b\u6c47\u603b"},{"location":"%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/#_3","text":"\u5b57\u8282\u8df3\u52a8\u5185\u63a8\u62db\u8058_\u5b57\u8282\u8df3\u52a8\u662f\u505a\u4ec0\u4e48\u7684_\u5b57\u8282\u8df3\u52a8\u6821\u56ed\u62db\u8058/\u9762\u8bd5\u7ecf\u9a8c/\u7b14\u8bd5\u9898\u76ee/\u793e\u62db\u5185\u63a8_\u516c\u53f8\u4fe1\u606f_\u725b\u5ba2\u7f51","title":"\u5b57\u8282\u9762\u7b4b\u6c47\u603b"},{"location":"%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/#_4","text":"\u5b57\u8282\u8df3\u52a8\u5185\u63a8\u62db\u8058_\u5b57\u8282\u8df3\u52a8\u662f\u505a\u4ec0\u4e48\u7684_\u5b57\u8282\u8df3\u52a8\u6821\u56ed\u62db\u8058/\u9762\u8bd5\u7ecf\u9a8c/\u7b14\u8bd5\u9898\u76ee/\u793e\u62db\u5185\u63a8_\u516c\u53f8\u4fe1\u606f_\u725b\u5ba2\u7f51","title":"\u5b57\u8282\u5b89\u5353\u9762\u7b4b\u6c47\u603b"},{"location":"%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/#_5","text":"\u5b57\u8282\u63d0\u524d\u6279\u6821\u62db\u4e00\u9762Android\u5de5\u7a0b\u5e082020[\u5df2\u6302] \u79fb\u52a8\u5ba2\u6237\u7aef\u5f00\u53d1\uff08\u6296\u97f3\uff09\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u5b89\u5353\u4e00\u9762\u4e8c\u9762\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u4fe9\u5c0f\u65f6\u9762\u8bd5\u611f\u60f3_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8\u9762\u8bd5\u96be\u5417\uff0c\u5e94\u8be5\u5982\u4f55\u5e94\u5bf9\uff1f \u5b57\u8282\u8df3\u52a8-\u4e09\u9762\u7ecf-\u987a\u4fbfoffer\u8bb8\u613f\uff3b\u5df2\u8fd8\u613f:\u6536\u5230\u610f\u5411\u4e66\uff3d_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8\uff0cAndroid\u5f00\u53d1\u63d0\u524d\u6279\uff0c\u65b0\u9c9c\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 [21\u5c4a\u79cb\u62db] \u5b57\u8282--\u5b89\u5353\u5f00\u53d1\u5b9e\u4e60\u751f \u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u63d0\u524d\u6279\u6821\u62db\u4e00\u9762Android\u5de5\u7a0b\u5e082020[\u5df2\u6302] \u5b57\u8282\u8df3\u52a8\u5ba2\u6237\u7aef\u9762\u7ecf\uff08\u5df2Offer\uff09_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 [21\u5c4a\u79cb\u62db] \u5b57\u8282--\u5b89\u5353\u5f00\u53d1\u5b9e\u4e60\u751f \u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165url\u56de\u8f66\u540e\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e5f\u592a\u597d\u73a9\u4e86\u628a\u54c8\u54c8\u54c8\u54c8\u54c8 \u5b57\u8282\u8df3\u52a8\u5ba2\u6237\u7aef\u5f00\u53d1\u4e00\u9762_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8 \u4e09\u6b21\u5931\u8d25\u7684\u4e00\u9762_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u6ce8\u518c\u767b\u5f55\u7684\u5b9e\u73b0\u7ec6\u8282 \u8fd9\u4e2a\u4e4b\u540e\u4e00\u5b9a\u8981\u62a0\u4e00\u4e0b hashmap\u662f\u5982\u4f55\u5b9e\u73b0\u7684 \u5b57\u8282\u5317\u4eac\u6296\u97f3\u5ba2\u6237\u7aef\u4e00\u9762\u4e8c\u9762\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8-\u5934\u6761Android\u5f00\u53d1\u5b9e\u4e60\u751f\u9762\u8bd5_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8Android\u5c97\u793e\u62db\u9762\u7b4b \u83dc\u9e21\u5b57\u8282\u79cb\u62db\u9762\u7b4b\uff08\u518d\u53d1\u4e00\u6b21\uff09 \u5b57\u8282\u5ba2\u6237\u7aef \u4e00\u3001\u4e8c\u9762\u9762\u7ecf\uff0c\u8bb8\u613f\u4e09\u9762~ \u5b57\u8282\u5ba2\u6237\u7aef\u4e09~\u56db\u9762\u9762\u7ecf\uff0c\u5df2oc\uff08\u66f4\u65b0\uff1a\u5df2\u90ae\u4ef6\uff09","title":"\u5b89\u5353\u9762\u7b4b\u6536\u96c6"}]}