{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u672c\u7ad9\u7b80\u4ecb \u00b6 \u4ed3\u5e93\u542f\u52a8\u65f6\u95f4\uff1a2020\u5e746\u670829\u65e5 \u8fd9\u91cc\u662f777\u76842021\u5e74\u6821\u62db\u51c6\u5907\u4ed3\u5e93\uff0c\u51c6\u5907\u671f\u95f4\u8fd8\u4e0d\u592a\u5b8c\u5584\uff0c\u660e\u5e746\u6708\u5e0c\u671b\u80fd\u6bd4\u8f83\u4e30\u6ee1\u5566\uff01 \u4f7f\u7528Mkdocs-Material\u751f\u6210\u4e86\u4e00\u4e2a \u9759\u6001\u7f51\u7ad9 \uff0c\u65b9\u4fbf\u67e5\u770b\u3002 \u65f6\u95f4\u8282\u70b9 \u00b6 \u672c\u4eba\u662fECNU2019\u7ea7\u8f6f\u4ef6\u5de5\u7a0b\u4e13\u7855\uff0c\u5b66\u52362.5\u5e74\uff0c\u79cb\u62db\u65f6\u95f4\u662f2021\u5e746\u6708-10\u6708\u3002 \u5b57\u8282\u8df3\u52a8\u7b49\u4e92\u8054\u7f51\u5382\u5b50\u7684\u63d0\u524d\u62796\u6708\u4e2d\u65ec\u5c31\u4f1a\u5f00\u59cb\uff0c\u6301\u7eed\u4e00\u5230\u4e24\u4e2a\u6708\uff0c\u7406\u60f3\u60c5\u51b5\u662f\u63d0\u524d\u6279\u76f4\u63a5\u4e0a\u5cb8\u7136\u540e\u5c31\u4e0d\u7528\u53bb\u521a\u79cb\u62db\u4e86\uff08\u68a6\u60f3\u603b\u662f\u8981\u6709\u7684T.T \u610f\u5411\u5c97\u4f4d \u00b6 \u672c\u79d1\u5b66\u8fc7Android\u4e5f\u633a\u559c\u6b22\uff0c\u5927\u56db\u627e\u5b9e\u4e60\u672c\u6765\u60f3\u627eAndroid\u5f00\u53d1\uff0c\u987a\u624b\u6295\u4e86\u4e2aAndroid\u6d4b\u5f00\uff0c\u9762\u8bd5\u8fc7\u4e86\u5c31\u53bb\u5b9e\u4e60\u4e86\uff0c\u4f53\u9a8c\u534a\u5e74\u8fc7\u540e\u8fd8\u662f\u60f3\u505a\u7eaf\u5f00\u53d1\u3002\u7b97\u6cd5\u5c97\u795e\u4ed9\u6253\u67b6\u6211\u5b66\u4e5f\u5b66\u4e0d\u6765\uff0c\u4e8e\u662f\u5c31\u6109\u5feb\u5730\u51b3\u5b9a\u505aAndroid\u5f00\u53d1\u5566\uff01\u5e0c\u671b\u660e\u5e74\u987a\u5229\u4e0a\u5cb8\u7136\u540e\u5f00\u59cb\u79df\u623f\u517b\u5c0f\u72d7\ud83d\udc36 \u5f00\u5e93\u76ee\u7684 \u00b6 \u51c6\u5907\u4e86\u4e00\u906d\u6821\u62db\u603b\u8981\u7559\u4e0b\u70b9\u4ec0\u4e48\uff0c\u7ed9\u81ea\u5df1\u590d\u76d8\u4e5f\u597d\uff0c\u7ed9\u60f3\u8981\u627eAndroid\u5c97\u7684\u5144\u5f1f\u4eec\u4e00\u4e2a\u53c2\u8003\u4e5f\u597d\uff0c\u603b\u4f1a\u521b\u9020\u70b9\u4ef7\u503c\u54d2\u3002 \u590d\u4e60\u8d44\u6599 \u00b6 Teach Yourself Computer Science Teach Yourself Computer Science - zh Cyc2018","title":"\u672c\u7ad9\u7b80\u4ecb"},{"location":"#_1","text":"\u4ed3\u5e93\u542f\u52a8\u65f6\u95f4\uff1a2020\u5e746\u670829\u65e5 \u8fd9\u91cc\u662f777\u76842021\u5e74\u6821\u62db\u51c6\u5907\u4ed3\u5e93\uff0c\u51c6\u5907\u671f\u95f4\u8fd8\u4e0d\u592a\u5b8c\u5584\uff0c\u660e\u5e746\u6708\u5e0c\u671b\u80fd\u6bd4\u8f83\u4e30\u6ee1\u5566\uff01 \u4f7f\u7528Mkdocs-Material\u751f\u6210\u4e86\u4e00\u4e2a \u9759\u6001\u7f51\u7ad9 \uff0c\u65b9\u4fbf\u67e5\u770b\u3002","title":"\u672c\u7ad9\u7b80\u4ecb"},{"location":"#_2","text":"\u672c\u4eba\u662fECNU2019\u7ea7\u8f6f\u4ef6\u5de5\u7a0b\u4e13\u7855\uff0c\u5b66\u52362.5\u5e74\uff0c\u79cb\u62db\u65f6\u95f4\u662f2021\u5e746\u6708-10\u6708\u3002 \u5b57\u8282\u8df3\u52a8\u7b49\u4e92\u8054\u7f51\u5382\u5b50\u7684\u63d0\u524d\u62796\u6708\u4e2d\u65ec\u5c31\u4f1a\u5f00\u59cb\uff0c\u6301\u7eed\u4e00\u5230\u4e24\u4e2a\u6708\uff0c\u7406\u60f3\u60c5\u51b5\u662f\u63d0\u524d\u6279\u76f4\u63a5\u4e0a\u5cb8\u7136\u540e\u5c31\u4e0d\u7528\u53bb\u521a\u79cb\u62db\u4e86\uff08\u68a6\u60f3\u603b\u662f\u8981\u6709\u7684T.T","title":"\u65f6\u95f4\u8282\u70b9"},{"location":"#_3","text":"\u672c\u79d1\u5b66\u8fc7Android\u4e5f\u633a\u559c\u6b22\uff0c\u5927\u56db\u627e\u5b9e\u4e60\u672c\u6765\u60f3\u627eAndroid\u5f00\u53d1\uff0c\u987a\u624b\u6295\u4e86\u4e2aAndroid\u6d4b\u5f00\uff0c\u9762\u8bd5\u8fc7\u4e86\u5c31\u53bb\u5b9e\u4e60\u4e86\uff0c\u4f53\u9a8c\u534a\u5e74\u8fc7\u540e\u8fd8\u662f\u60f3\u505a\u7eaf\u5f00\u53d1\u3002\u7b97\u6cd5\u5c97\u795e\u4ed9\u6253\u67b6\u6211\u5b66\u4e5f\u5b66\u4e0d\u6765\uff0c\u4e8e\u662f\u5c31\u6109\u5feb\u5730\u51b3\u5b9a\u505aAndroid\u5f00\u53d1\u5566\uff01\u5e0c\u671b\u660e\u5e74\u987a\u5229\u4e0a\u5cb8\u7136\u540e\u5f00\u59cb\u79df\u623f\u517b\u5c0f\u72d7\ud83d\udc36","title":"\u610f\u5411\u5c97\u4f4d"},{"location":"#_4","text":"\u51c6\u5907\u4e86\u4e00\u906d\u6821\u62db\u603b\u8981\u7559\u4e0b\u70b9\u4ec0\u4e48\uff0c\u7ed9\u81ea\u5df1\u590d\u76d8\u4e5f\u597d\uff0c\u7ed9\u60f3\u8981\u627eAndroid\u5c97\u7684\u5144\u5f1f\u4eec\u4e00\u4e2a\u53c2\u8003\u4e5f\u597d\uff0c\u603b\u4f1a\u521b\u9020\u70b9\u4ef7\u503c\u54d2\u3002","title":"\u5f00\u5e93\u76ee\u7684"},{"location":"#_5","text":"Teach Yourself Computer Science Teach Yourself Computer Science - zh Cyc2018","title":"\u590d\u4e60\u8d44\u6599"},{"location":"Android/","text":"README \u00b6 O\u6ce1\u7b14\u8bb0 Omooo/Android-Notes Android \u9762\u8bd5QA Omooo/Android_QA \u539f\u751f\u5b89\u5353 \u00b6 \u6846\u67b6\u5f00\u53d1 \u00b6","title":"README"},{"location":"Android/#readme","text":"O\u6ce1\u7b14\u8bb0 Omooo/Android-Notes Android \u9762\u8bd5QA Omooo/Android_QA","title":"README"},{"location":"Android/#_1","text":"","title":"\u539f\u751f\u5b89\u5353"},{"location":"Android/#_2","text":"","title":"\u6846\u67b6\u5f00\u53d1"},{"location":"Java/","text":"README \u00b6","title":"README"},{"location":"Java/#readme","text":"","title":"README"},{"location":"Kotlin/","text":"README \u00b6 \u53c2\u8003\u7f51\u7ad9 \u00b6 Kotlin EN Kotlin ZH-CN \u53c2\u8003\u6559\u6750 \u00b6 \u300a\u7b2c\u4e00\u884c\u4ee3\u7801\u300b\u7b2c3\u7248 - Kotlin","title":"README"},{"location":"Kotlin/#readme","text":"","title":"README"},{"location":"Kotlin/#_1","text":"Kotlin EN Kotlin ZH-CN","title":"\u53c2\u8003\u7f51\u7ad9"},{"location":"Kotlin/#_2","text":"\u300a\u7b2c\u4e00\u884c\u4ee3\u7801\u300b\u7b2c3\u7248 - Kotlin","title":"\u53c2\u8003\u6559\u6750"},{"location":"%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","text":"README \u00b6 \u53c2\u8003\u6559\u6750 \u00b6 \u53c2\u8003\u4ed3\u5e93 \u00b6 CS-Notes \u64cd\u4f5c\u7cfb\u7edf","title":"README"},{"location":"%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#readme","text":"","title":"README"},{"location":"%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_1","text":"","title":"\u53c2\u8003\u6559\u6750"},{"location":"%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#_2","text":"CS-Notes \u64cd\u4f5c\u7cfb\u7edf","title":"\u53c2\u8003\u4ed3\u5e93"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/","text":"README \u00b6 \u53c2\u8003\u6559\u6750 \u00b6 \u300a\u6570\u636e\u5e93\u7cfb\u7edf\u6982\u5ff5\u300b\u7b2c6\u7248 \u53c2\u8003\u4ed3\u5e93 \u00b6 CS-Notes \u6570\u636e\u5e93","title":"README"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/#readme","text":"","title":"README"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/#_1","text":"\u300a\u6570\u636e\u5e93\u7cfb\u7edf\u6982\u5ff5\u300b\u7b2c6\u7248","title":"\u53c2\u8003\u6559\u6750"},{"location":"%E6%95%B0%E6%8D%AE%E5%BA%93/#_2","text":"CS-Notes \u6570\u636e\u5e93","title":"\u53c2\u8003\u4ed3\u5e93"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/","text":"README \u00b6 \u5251\u6307Offer \u4e2d\u6c47\u603b\u4e86\u6211\u5237\u5251\u6307\u671f\u95f4\u7684\u7b14\u8bb0\u4ee5\u53caJava&Koltin\u7684\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5 \u5728\u6211\u7684\u535a\u5ba2\u91cc\u67e5\u770b \u3002 \u529b\u6263\u7684\u5237\u9898\u8bb0\u5f55\u4e5f\u53ef\u4ee5\u5728\u6211\u7684\u535a\u5ba2\u91cc\u770b\u5230\uff0c\u672c\u4eba\u771f\u7684\u7b97\u6cd5\u5e9f\u7269\uff0c\u4e00\u5f00\u59cb\u597d\u591a\u9898\u76ee\u5b8c\u5168\u6ca1\u6709\u601d\u8def\u8fd8\u6b7b\u78d5\u4e00\u4e24\u4e2a\u5c0f\u65f6\uff0c\u7eaf\u7cb9\u6d6a\u8d39\u65f6\u95f4\uff0c\u5efa\u8bae\u4e00\u9053\u9898\u76ee10\u5206\u949f\u5de6\u53f3\u6ca1\u5565\u601d\u8def\u5c31\u8fc7\uff0c\u5c31\u53bb\u770b\u9898\u89e3\uff0c\u770b\u660e\u767d\u9898\u89e3\u4e4b\u540e\u518d\u81ea\u5df1\u628a\u4ee3\u7801\u5199\u51fa\u6765AC\u6389\u5c31\u7b97\u8fc7\u4e86\u4e00\u904d\u4e86\uff0c\u4e4b\u540e\u8fc7\u6bb5\u65f6\u95f4\u518d\u590d\u76d8\uff0c\u5237\u9898\u5237\u9898\u5237\u9898\uff0c\u591a\u5237\u624d\u6709\u7528\u561b\u3002 \u5237\u9898\u7f51\u7ad9\uff1a \u529b\u6263 \u725b\u5ba2 \u53c2\u8003\u6559\u6750 \u300a\u5251\u6307Offer\u300b\u7b2c2\u7248 \u6ce8\u610f\uff1a\u529b\u6263\u6240\u6709\u7684\u9898\u76ee\u4e0d\u9700\u8981\u7528\u6237\u81ea\u5df1\u5904\u7406\u8f93\u5165\u8f93\u51fa\uff0c\u80fd\u591f\u5b9e\u73b0\u51fd\u6570\u529f\u80fd\u5373\u53ef\uff0c\u7136\u800c\u76ee\u524d\u5927\u591a\u6570\u4e92\u8054\u7f51\u516c\u53f8\u90fd\u5728\u725b\u5ba2\u4e0a\u8fdb\u884c\u7b14\u8bd5\u4ee5\u53ca\u9762\u8bd5\uff0c\u7b14\u8bd5\u4e2d\u8bb8\u591a\u9898\u76ee\u9700\u8981\u81ea\u5df1\u6765\u5904\u7406\u8f93\u5165\u8f93\u51fa\uff0c\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u6ce8\u610f\uff0c\u522b\u7b49\u5f00\u59cb\u6821\u62db\u90fd\u5fd8\u8bb0Scanner\u8981\u600e\u4e48\u7528\u4e86\u3002\u9762\u8bd5\u7684\u65f6\u5019\u6bd4\u8f83\u968f\u673a\uff0c\u6839\u636e\u9762\u8bd5\u5b98\u7684\u9762\u8bd5\u98ce\u683c\u89c6\u60c5\u51b5\u800c\u5b9a\uff0c\u603b\u800c\u8a00\u4e4b\u81ea\u5df1\u5fc5\u987b\u719f\u6089\u638c\u63e1\u5982\u4f55\u5904\u7406\u8f93\u5165\u8f93\u51fa\u7684\u95ee\u9898\u3002 \u6811 \u00b6 \u6811\u7684\u904d\u5386 \u00b6 \u524d\u5e8f\u904d\u5386\uff1a\u6839\u5de6\u53f3 \u4e2d\u5e8f\u904d\u5386\uff1a\u5de6\u6839\u53f3 \u540e\u5e8f\u904d\u5386\uff1a\u5de6\u53f3\u6839 \u6839\u636e\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u91cd\u5efa\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5177\u4f53\u9898\u76ee\u89c1 \u5251\u6307 Offer 07 \u3002 \u603b\u5171\u4e24\u79cd\u89e3\u6cd5\uff1a 1. \u9012\u5f52 2. \u8fed\u4ee3 \u6570\u7ec4 \u00b6 \u4e8c\u5206\u67e5\u627e \u00b6 \u52a8\u6001\u89c4\u5212 \u00b6 \u5b57\u7b26\u4e32 \u00b6 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 \u00b6 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 \u00b6 \u8d2a\u5fc3\u7b97\u6cd5 \u00b6 \u53cc\u6307\u9488 \u00b6 \u56de\u6eaf\u7b97\u6cd5 \u00b6 \u5206\u6cbb\u7b97\u6cd5 \u00b6 \u94fe\u8868 \u00b6 \u54c8\u5e0c\u8868 \u00b6 \u9012\u5f52 \u00b6 \u961f\u5217 \u00b6 \u4f4d\u8fd0\u7b97 \u00b6 \u6808 \u00b6 \u961f\u5217 \u00b6 \u53c2\u8003 \u00b6 \u767e\u5ea6\u767e\u79d1 \u7ef4\u57fa\u767e\u79d1 \u8c37\u6b4c","title":"README"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#readme","text":"\u5251\u6307Offer \u4e2d\u6c47\u603b\u4e86\u6211\u5237\u5251\u6307\u671f\u95f4\u7684\u7b14\u8bb0\u4ee5\u53caJava&Koltin\u7684\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5 \u5728\u6211\u7684\u535a\u5ba2\u91cc\u67e5\u770b \u3002 \u529b\u6263\u7684\u5237\u9898\u8bb0\u5f55\u4e5f\u53ef\u4ee5\u5728\u6211\u7684\u535a\u5ba2\u91cc\u770b\u5230\uff0c\u672c\u4eba\u771f\u7684\u7b97\u6cd5\u5e9f\u7269\uff0c\u4e00\u5f00\u59cb\u597d\u591a\u9898\u76ee\u5b8c\u5168\u6ca1\u6709\u601d\u8def\u8fd8\u6b7b\u78d5\u4e00\u4e24\u4e2a\u5c0f\u65f6\uff0c\u7eaf\u7cb9\u6d6a\u8d39\u65f6\u95f4\uff0c\u5efa\u8bae\u4e00\u9053\u9898\u76ee10\u5206\u949f\u5de6\u53f3\u6ca1\u5565\u601d\u8def\u5c31\u8fc7\uff0c\u5c31\u53bb\u770b\u9898\u89e3\uff0c\u770b\u660e\u767d\u9898\u89e3\u4e4b\u540e\u518d\u81ea\u5df1\u628a\u4ee3\u7801\u5199\u51fa\u6765AC\u6389\u5c31\u7b97\u8fc7\u4e86\u4e00\u904d\u4e86\uff0c\u4e4b\u540e\u8fc7\u6bb5\u65f6\u95f4\u518d\u590d\u76d8\uff0c\u5237\u9898\u5237\u9898\u5237\u9898\uff0c\u591a\u5237\u624d\u6709\u7528\u561b\u3002 \u5237\u9898\u7f51\u7ad9\uff1a \u529b\u6263 \u725b\u5ba2 \u53c2\u8003\u6559\u6750 \u300a\u5251\u6307Offer\u300b\u7b2c2\u7248 \u6ce8\u610f\uff1a\u529b\u6263\u6240\u6709\u7684\u9898\u76ee\u4e0d\u9700\u8981\u7528\u6237\u81ea\u5df1\u5904\u7406\u8f93\u5165\u8f93\u51fa\uff0c\u80fd\u591f\u5b9e\u73b0\u51fd\u6570\u529f\u80fd\u5373\u53ef\uff0c\u7136\u800c\u76ee\u524d\u5927\u591a\u6570\u4e92\u8054\u7f51\u516c\u53f8\u90fd\u5728\u725b\u5ba2\u4e0a\u8fdb\u884c\u7b14\u8bd5\u4ee5\u53ca\u9762\u8bd5\uff0c\u7b14\u8bd5\u4e2d\u8bb8\u591a\u9898\u76ee\u9700\u8981\u81ea\u5df1\u6765\u5904\u7406\u8f93\u5165\u8f93\u51fa\uff0c\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u6ce8\u610f\uff0c\u522b\u7b49\u5f00\u59cb\u6821\u62db\u90fd\u5fd8\u8bb0Scanner\u8981\u600e\u4e48\u7528\u4e86\u3002\u9762\u8bd5\u7684\u65f6\u5019\u6bd4\u8f83\u968f\u673a\uff0c\u6839\u636e\u9762\u8bd5\u5b98\u7684\u9762\u8bd5\u98ce\u683c\u89c6\u60c5\u51b5\u800c\u5b9a\uff0c\u603b\u800c\u8a00\u4e4b\u81ea\u5df1\u5fc5\u987b\u719f\u6089\u638c\u63e1\u5982\u4f55\u5904\u7406\u8f93\u5165\u8f93\u51fa\u7684\u95ee\u9898\u3002","title":"README"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_1","text":"","title":"\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_2","text":"\u524d\u5e8f\u904d\u5386\uff1a\u6839\u5de6\u53f3 \u4e2d\u5e8f\u904d\u5386\uff1a\u5de6\u6839\u53f3 \u540e\u5e8f\u904d\u5386\uff1a\u5de6\u53f3\u6839 \u6839\u636e\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u91cd\u5efa\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5177\u4f53\u9898\u76ee\u89c1 \u5251\u6307 Offer 07 \u3002 \u603b\u5171\u4e24\u79cd\u89e3\u6cd5\uff1a 1. \u9012\u5f52 2. \u8fed\u4ee3","title":"\u6811\u7684\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_3","text":"","title":"\u6570\u7ec4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_4","text":"","title":"\u4e8c\u5206\u67e5\u627e"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_5","text":"","title":"\u52a8\u6001\u89c4\u5212"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_6","text":"","title":"\u5b57\u7b26\u4e32"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_7","text":"","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_8","text":"","title":"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_9","text":"","title":"\u8d2a\u5fc3\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_10","text":"","title":"\u53cc\u6307\u9488"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_11","text":"","title":"\u56de\u6eaf\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_12","text":"","title":"\u5206\u6cbb\u7b97\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_13","text":"","title":"\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_14","text":"","title":"\u54c8\u5e0c\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_15","text":"","title":"\u9012\u5f52"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_16","text":"","title":"\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_17","text":"","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_18","text":"","title":"\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_19","text":"","title":"\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/#_20","text":"\u767e\u5ea6\u767e\u79d1 \u7ef4\u57fa\u767e\u79d1 \u8c37\u6b4c","title":"\u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/","text":"1. \u95ee\u9898 \u00b6 \u627e\u51fa\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\u3002 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 nums \u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u5728 0\uff5en-1 \u7684\u8303\u56f4\u5185\u3002\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [2, 3, 1, 0, 2, 5, 3] \u8f93\u51fa\uff1a2 \u6216 3 \u9650\u5236\uff1a 2 <= n <= 100000 2. \u89e3\u6cd51 - \u6392\u5e8f \u00b6 2.1 Java \u00b6 class Solution { public int findRepeatNumber ( int [] nums ) { Arrays . sort ( nums ); for ( int i = 0 ; i < nums . length ; i ++ ) { if ( nums [ i ] == nums [ i + 1 ] ) return nums [ i ] ; } return - 1 ; } } 2.2 Kotlin \u00b6 class Solution { fun findRepeatNumber ( nums : IntArray ): Int { Arrays . sort ( nums ) for ( i in nums . indices ) { if ( nums [ i ] == nums [ i + 1 ]) return nums [ i ] } return - 1 } } 3. \u89e3\u6cd52 - \u54c8\u5e0c\u8868 \u00b6 3.1 Java \u00b6 class Solution { public int findRepeatNumber ( int [] nums ) { Map < Integer , Integer > map = new HashMap <> (); for ( int num : nums ){ if ( map . containsKey ( num )){ return num ; } else { map . put ( num , 1 ); } } return - 1 ; } } 3.2 Kotlin \u00b6 class Solution { fun findRepeatNumber ( nums : IntArray ): Int { val map = HashMap < Int , Int >() for ( num in nums ) { if ( map . containsKey ( num )) { return num } else { map [ num ] = 1 } } return - 1 } } 4. \u89e3\u6cd53 - \u6bd4\u8f83\u4ea4\u6362 \u00b6 4.1 Java \u00b6 class Solution { public int findRepeatNumber ( int [] nums ) { // \u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u5b57 for ( int i = 0 ; i < nums . length ; i ++ ) { // \u5f53\u524d\u626b\u63cf\u7684\u6570\u5b57\u4e3acur int cur = nums [ i ] ; // \u5224\u65adcur\u548ci\u662f\u5426\u76f8\u7b49 // \u82e5\u76f8\u7b49\uff0c\u7ee7\u7eed\u626b\u63cf\u4e0b\u4e00\u4e2a\u6570 // \u82e5\u4e0d\u76f8\u7b49\uff0c\u6bd4\u8f83cur\u548c\u7b2ccur\u4e2a\u6570 while ( cur != i ) { if ( cur == nums [ cur ] ) { // cur\u548c\u7b2ccur\u4e2a\u6570\u76f8\u7b49\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u91cd\u590d\u6570\uff0c\u8fd4\u56de\u5373\u53ef return cur ; } else { // \u4e0d\u76f8\u7b49\uff0c\u4ea4\u6362\u4e24\u4e2a\u6570 int tmp = nums [ cur ] ; nums [ cur ] = nums [ i ] ; nums [ i ] = tmp ; cur = nums [ i ] ; } } } return - 1 ; } } 4.2 Kotlin \u00b6 class Solution { fun findRepeatNumber ( nums : IntArray ): Int { // \u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u5b57 for ( i in nums . indices ) { // \u5f53\u524d\u626b\u63cf\u7684\u6570\u5b57\u4e3acur var cur = nums [ i ] // \u5224\u65adcur\u548ci\u662f\u5426\u76f8\u7b49 // \u82e5\u76f8\u7b49\uff0c\u7ee7\u7eed\u626b\u63cf\u4e0b\u4e00\u4e2a\u6570 // \u82e5\u4e0d\u76f8\u7b49\uff0c\u6bd4\u8f83cur\u548c\u7b2ccur\u4e2a\u6570 while ( cur != i ) { if ( cur == nums [ cur ]) { // cur\u548c\u7b2ccur\u4e2a\u6570\u76f8\u7b49\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u91cd\u590d\u6570\uff0c\u8fd4\u56de\u5373\u53ef return cur } else { // \u4e0d\u76f8\u7b49\uff0c\u4ea4\u6362\u4e24\u4e2a\u6570 val tmp = nums [ cur ] nums [ cur ] = nums [ i ] nums [ i ] = tmp cur = nums [ i ] } } } return - 1 } } 5. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b 6. \u7b14\u8bb0 \u00b6","title":"LCOF 03. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#1","text":"\u627e\u51fa\u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57\u3002 \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 nums \u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u5728 0\uff5en-1 \u7684\u8303\u56f4\u5185\u3002\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u4e86\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [2, 3, 1, 0, 2, 5, 3] \u8f93\u51fa\uff1a2 \u6216 3 \u9650\u5236\uff1a 2 <= n <= 100000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#2-1-","text":"","title":"2. \u89e3\u6cd51 - \u6392\u5e8f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#21-java","text":"class Solution { public int findRepeatNumber ( int [] nums ) { Arrays . sort ( nums ); for ( int i = 0 ; i < nums . length ; i ++ ) { if ( nums [ i ] == nums [ i + 1 ] ) return nums [ i ] ; } return - 1 ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#22-kotlin","text":"class Solution { fun findRepeatNumber ( nums : IntArray ): Int { Arrays . sort ( nums ) for ( i in nums . indices ) { if ( nums [ i ] == nums [ i + 1 ]) return nums [ i ] } return - 1 } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#3-2-","text":"","title":"3. \u89e3\u6cd52 - \u54c8\u5e0c\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#31-java","text":"class Solution { public int findRepeatNumber ( int [] nums ) { Map < Integer , Integer > map = new HashMap <> (); for ( int num : nums ){ if ( map . containsKey ( num )){ return num ; } else { map . put ( num , 1 ); } } return - 1 ; } }","title":"3.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#32-kotlin","text":"class Solution { fun findRepeatNumber ( nums : IntArray ): Int { val map = HashMap < Int , Int >() for ( num in nums ) { if ( map . containsKey ( num )) { return num } else { map [ num ] = 1 } } return - 1 } }","title":"3.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#4-3-","text":"","title":"4. \u89e3\u6cd53 - \u6bd4\u8f83\u4ea4\u6362"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#41-java","text":"class Solution { public int findRepeatNumber ( int [] nums ) { // \u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u5b57 for ( int i = 0 ; i < nums . length ; i ++ ) { // \u5f53\u524d\u626b\u63cf\u7684\u6570\u5b57\u4e3acur int cur = nums [ i ] ; // \u5224\u65adcur\u548ci\u662f\u5426\u76f8\u7b49 // \u82e5\u76f8\u7b49\uff0c\u7ee7\u7eed\u626b\u63cf\u4e0b\u4e00\u4e2a\u6570 // \u82e5\u4e0d\u76f8\u7b49\uff0c\u6bd4\u8f83cur\u548c\u7b2ccur\u4e2a\u6570 while ( cur != i ) { if ( cur == nums [ cur ] ) { // cur\u548c\u7b2ccur\u4e2a\u6570\u76f8\u7b49\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u91cd\u590d\u6570\uff0c\u8fd4\u56de\u5373\u53ef return cur ; } else { // \u4e0d\u76f8\u7b49\uff0c\u4ea4\u6362\u4e24\u4e2a\u6570 int tmp = nums [ cur ] ; nums [ cur ] = nums [ i ] ; nums [ i ] = tmp ; cur = nums [ i ] ; } } } return - 1 ; } }","title":"4.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#42-kotlin","text":"class Solution { fun findRepeatNumber ( nums : IntArray ): Int { // \u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u5b57 for ( i in nums . indices ) { // \u5f53\u524d\u626b\u63cf\u7684\u6570\u5b57\u4e3acur var cur = nums [ i ] // \u5224\u65adcur\u548ci\u662f\u5426\u76f8\u7b49 // \u82e5\u76f8\u7b49\uff0c\u7ee7\u7eed\u626b\u63cf\u4e0b\u4e00\u4e2a\u6570 // \u82e5\u4e0d\u76f8\u7b49\uff0c\u6bd4\u8f83cur\u548c\u7b2ccur\u4e2a\u6570 while ( cur != i ) { if ( cur == nums [ cur ]) { // cur\u548c\u7b2ccur\u4e2a\u6570\u76f8\u7b49\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u91cd\u590d\u6570\uff0c\u8fd4\u56de\u5373\u53ef return cur } else { // \u4e0d\u76f8\u7b49\uff0c\u4ea4\u6362\u4e24\u4e2a\u6570 val tmp = nums [ cur ] nums [ cur ] = nums [ i ] nums [ i ] = tmp cur = nums [ i ] } } } return - 1 } }","title":"4.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#5","text":"https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"5. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-03/#6","text":"","title":"6. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/","text":"1. \u95ee\u9898 \u00b6 \u5728\u4e00\u4e2a n * m \u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 \u793a\u4f8b: \u73b0\u6709\u77e9\u9635 matrix \u5982\u4e0b\uff1a [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] \u7ed9\u5b9a target = 5\uff0c\u8fd4\u56de true\u3002 \u7ed9\u5b9a target = 20\uff0c\u8fd4\u56de false\u3002 \u9650\u5236\uff1a - 0 <= n <= 1000 - 0 <= m <= 1000 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 class Solution { public boolean findNumberIn2DArray ( int [][] matrix , int target ) { // \u5224\u7a7a if ( matrix . length == 0 ) { return false ; } // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 // \u5f53\u524d\u503c\u548ctarget\u76f8\u7b49\u5c31\u8fd4\u56detrue // target < \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u5217\uff0c\u5f80\u5de6\u79fb\u52a8\u4e00\u5217 // target > \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u884c\uff0c\u5f80\u4e0b\u79fb\u52a8\u4e00\u884c int row = 0 ; int col = matrix [ 0 ] . length - 1 ; while ( row < matrix . length && col >= 0 ) { if ( matrix [ row ][ col ] == target ) return true ; else if ( target < matrix [ row ][ col ] ) col -- ; else if ( target > matrix [ row ][ col ] ) row ++ ; } return false ; } } 2.2 Kotlin \u00b6 class Solution { fun findNumberIn2DArray ( matrix : Array < IntArray >, target : Int ): Boolean { // \u5224\u7a7a if ( matrix . size == 0 ) { return false } // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 // \u5f53\u524d\u503c\u548ctarget\u76f8\u7b49\u5c31\u8fd4\u56detrue // target < \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u5217\uff0c\u5f80\u5de6\u79fb\u52a8\u4e00\u5217 // target > \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u884c\uff0c\u5f80\u4e0b\u79fb\u52a8\u4e00\u884c var row = 0 var col = matrix [ 0 ]. size - 1 while ( row < matrix . size && col >= 0 ) { if ( matrix [ row ][ col ] == target ) return true else if ( target < matrix [ row ][ col ]) col -- else if ( target > matrix [ row ][ col ]) row ++ } return false } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b 4. \u7b14\u8bb0 \u00b6","title":"LCOF 04. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#1","text":"\u5728\u4e00\u4e2a n * m \u7684\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 \u793a\u4f8b: \u73b0\u6709\u77e9\u9635 matrix \u5982\u4e0b\uff1a [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] \u7ed9\u5b9a target = 5\uff0c\u8fd4\u56de true\u3002 \u7ed9\u5b9a target = 20\uff0c\u8fd4\u56de false\u3002 \u9650\u5236\uff1a - 0 <= n <= 1000 - 0 <= m <= 1000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#21-java","text":"class Solution { public boolean findNumberIn2DArray ( int [][] matrix , int target ) { // \u5224\u7a7a if ( matrix . length == 0 ) { return false ; } // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 // \u5f53\u524d\u503c\u548ctarget\u76f8\u7b49\u5c31\u8fd4\u56detrue // target < \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u5217\uff0c\u5f80\u5de6\u79fb\u52a8\u4e00\u5217 // target > \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u884c\uff0c\u5f80\u4e0b\u79fb\u52a8\u4e00\u884c int row = 0 ; int col = matrix [ 0 ] . length - 1 ; while ( row < matrix . length && col >= 0 ) { if ( matrix [ row ][ col ] == target ) return true ; else if ( target < matrix [ row ][ col ] ) col -- ; else if ( target > matrix [ row ][ col ] ) row ++ ; } return false ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#22-kotlin","text":"class Solution { fun findNumberIn2DArray ( matrix : Array < IntArray >, target : Int ): Boolean { // \u5224\u7a7a if ( matrix . size == 0 ) { return false } // \u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\u641c\u7d22 // \u5f53\u524d\u503c\u548ctarget\u76f8\u7b49\u5c31\u8fd4\u56detrue // target < \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u5217\uff0c\u5f80\u5de6\u79fb\u52a8\u4e00\u5217 // target > \u5f53\u524d\u503c\uff0c\u5c31\u5254\u9664\u5f53\u524d\u884c\uff0c\u5f80\u4e0b\u79fb\u52a8\u4e00\u884c var row = 0 var col = matrix [ 0 ]. size - 1 while ( row < matrix . size && col >= 0 ) { if ( matrix [ row ][ col ] == target ) return true else if ( target < matrix [ row ][ col ]) col -- else if ( target > matrix [ row ][ col ]) row ++ } return false } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#3","text":"https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-04/#4","text":"","title":"4. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/","text":"1. \u95ee\u9898 \u00b6 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u628a\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"%20\"\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"We are happy.\" \u8f93\u51fa\uff1a\"We%20are%20happy.\" \u9650\u5236\uff1a - 0 <= s \u7684\u957f\u5ea6 <= 10000 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 class Solution { public String replaceSpace ( String s ) { char [] nums = new char [ s . length () * 3 ] ; int index = 0 ; for ( int i = 0 ; i < s . length (); i ++ ) { if ( s . charAt ( i ) != ' ' ) { nums [ index ++] = s . charAt ( i ); } else { nums [ index ++] = '%' ; nums [ index ++] = '2' ; nums [ index ++] = '0' ; } } String res = new String ( nums , 0 , index ); return res ; } } 2.2 Kotlin \u00b6 class Solution { fun replaceSpace ( s : String ): String { val nums = CharArray ( s . length * 3 ) var index = 0 for ( i in 0. . s . length - 1 ) { if ( s [ i ] != ' ' ) { nums [ index ++] = s [ i ] } else { nums [ index ++] = '%' nums [ index ++] = '2' nums [ index ++] = '0' } } return String ( nums , 0 , index ) } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/ https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/solution/mian-shi-ti-05-ti-huan-kong-ge-by-leetcode-solutio/ 4. \u7b14\u8bb0 \u00b6","title":"LCOF 05. \u66ff\u6362\u7a7a\u683c"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#1","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u628a\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"%20\"\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1as = \"We are happy.\" \u8f93\u51fa\uff1a\"We%20are%20happy.\" \u9650\u5236\uff1a - 0 <= s \u7684\u957f\u5ea6 <= 10000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#21-java","text":"class Solution { public String replaceSpace ( String s ) { char [] nums = new char [ s . length () * 3 ] ; int index = 0 ; for ( int i = 0 ; i < s . length (); i ++ ) { if ( s . charAt ( i ) != ' ' ) { nums [ index ++] = s . charAt ( i ); } else { nums [ index ++] = '%' ; nums [ index ++] = '2' ; nums [ index ++] = '0' ; } } String res = new String ( nums , 0 , index ); return res ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#22-kotlin","text":"class Solution { fun replaceSpace ( s : String ): String { val nums = CharArray ( s . length * 3 ) var index = 0 for ( i in 0. . s . length - 1 ) { if ( s [ i ] != ' ' ) { nums [ index ++] = s [ i ] } else { nums [ index ++] = '%' nums [ index ++] = '2' nums [ index ++] = '0' } } return String ( nums , 0 , index ) } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#3","text":"https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/ https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/solution/mian-shi-ti-05-ti-huan-kong-ge-by-leetcode-solutio/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-05/#4","text":"","title":"4. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/","text":"1. \u95ee\u9898 \u00b6 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u8fd4\u56de\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff08\u7528\u6570\u7ec4\u8fd4\u56de\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [1,3,2] \u8f93\u51fa\uff1a[2,3,1] \u9650\u5236\uff1a - 0 <= \u94fe\u8868\u957f\u5ea6 <= 10000 2. \u89e3\u6cd51 - \u6808 \u00b6 2.1 Java \u00b6 class Solution { public int [] reversePrint ( ListNode head ) { Stack < Integer > stack = new Stack < Integer > (); int len = 0 ; while ( head != null ) { stack . push ( head . val ); head = head . next ; len ++ ; } int [] res = new int [ len ] ; int i = 0 ; while ( ! stack . empty ()) { res [ i ] = stack . pop (); i ++ ; } return res ; } } 2.2 Kotlin \u00b6 // \u6808 class Solution { fun reversePrint ( head : ListNode ?): IntArray { var head = head val stack = Stack < Int >() var len = 0 while ( head != null ) { stack . push ( head !! . `val` ) head = head !! . next len ++ } val res = IntArray ( len ) var i = 0 while (! stack . empty ()) { res [ i ++] = stack . pop () } return res } } 3. \u89e3\u6cd52 - \u9012\u5f52 \u00b6 3.1 Java \u00b6 // \u9012\u5f52 class Solution { ArrayList < Integer > tmp = new ArrayList < Integer > (); public int [] reversePrint ( ListNode head ) { recursion ( head ); int [] res = new int [ tmp . size () ] ; for ( int i = 0 ; i < res . length ; i ++ ) { res [ i ] = tmp . get ( i ); } return res ; } // \u9012\u5f52\u7684\u4ece\u5c3e\u5230\u5934\u6dfb\u52a0\u7ed3\u70b9\u503c\u5230tmp // \u6bcf\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u5148\u9012\u5f52\u6dfb\u52a0\u5b83\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u518d\u6dfb\u52a0\u5b83\u672c\u8eab public void recursion ( ListNode head ) { if ( head == null ) return ; recursion ( head . next ); tmp . add ( head . val ); } } 4. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b 5. \u7b14\u8bb0 \u00b6","title":"LCOF 06. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#1","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u8fd4\u56de\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff08\u7528\u6570\u7ec4\u8fd4\u56de\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [1,3,2] \u8f93\u51fa\uff1a[2,3,1] \u9650\u5236\uff1a - 0 <= \u94fe\u8868\u957f\u5ea6 <= 10000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#2-1-","text":"","title":"2. \u89e3\u6cd51 - \u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#21-java","text":"class Solution { public int [] reversePrint ( ListNode head ) { Stack < Integer > stack = new Stack < Integer > (); int len = 0 ; while ( head != null ) { stack . push ( head . val ); head = head . next ; len ++ ; } int [] res = new int [ len ] ; int i = 0 ; while ( ! stack . empty ()) { res [ i ] = stack . pop (); i ++ ; } return res ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#22-kotlin","text":"// \u6808 class Solution { fun reversePrint ( head : ListNode ?): IntArray { var head = head val stack = Stack < Int >() var len = 0 while ( head != null ) { stack . push ( head !! . `val` ) head = head !! . next len ++ } val res = IntArray ( len ) var i = 0 while (! stack . empty ()) { res [ i ++] = stack . pop () } return res } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#3-2-","text":"","title":"3. \u89e3\u6cd52 - \u9012\u5f52"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#31-java","text":"// \u9012\u5f52 class Solution { ArrayList < Integer > tmp = new ArrayList < Integer > (); public int [] reversePrint ( ListNode head ) { recursion ( head ); int [] res = new int [ tmp . size () ] ; for ( int i = 0 ; i < res . length ; i ++ ) { res [ i ] = tmp . get ( i ); } return res ; } // \u9012\u5f52\u7684\u4ece\u5c3e\u5230\u5934\u6dfb\u52a0\u7ed3\u70b9\u503c\u5230tmp // \u6bcf\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\uff0c\u5148\u9012\u5f52\u6dfb\u52a0\u5b83\u540e\u9762\u7684\u7ed3\u70b9\uff0c\u518d\u6dfb\u52a0\u5b83\u672c\u8eab public void recursion ( ListNode head ) { if ( head == null ) return ; recursion ( head . next ); tmp . add ( head . val ); } }","title":"3.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#4","text":"https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"4. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-06/#5","text":"","title":"5. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/","text":"1. \u95ee\u9898 \u00b6 \u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u524d\u5e8f\u904d\u5386 preorder = [3,9,20,15,7] \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u9650\u5236\uff1a - 0 <= \u8282\u70b9\u4e2a\u6570 <= 5000 2. \u89e3\u6cd5 - \u9012\u5f52 \u00b6 2.1 Java \u00b6 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { // \u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u4e2d\u5404\u4e2a\u7ed3\u70b9\u7684\u4e0b\u6807 Map < Integer , Integer > indexMap = new HashMap < Integer , Integer > (); public TreeNode buildTree ( int [] preorder , int [] inorder ) { // \u5224\u7a7a if ( preorder . length == 0 ) return null ; // \u5c06\u4e2d\u5e8f\u904d\u5386\u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u4e0b\u6807\u5b58\u50a8\u5230map\u4e2d // \u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8981\u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u70b9\u4e0b\u6807\uff1f // \u56e0\u4e3a\u9700\u8981\u5148\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f97\u5230\u5de6\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4\u548c\u7ed3\u70b9\u6570\u91cf\uff0c\u7136\u540e\u6839\u636e\u5de6\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u624d\u80fd\u5728\u524d\u5e8f\u904d\u5386\u4e2d\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4\u3002 for ( int i = 0 ; i < inorder . length ; i ++ ) { indexMap . put ( inorder [ i ] , i ); } // \u7ed3\u70b9\u6570\u91cf int size = preorder . length ; // \u91cd\u5efa\u4e8c\u53c9\u6811 TreeNode root = buildTree ( preorder , 0 , size - 1 , inorder , 0 , size - 1 ); return root ; } // \u524d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4[preStart, preEnd] // \u4e2d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4[inStart, inEnd] public TreeNode buildTree ( int [] preorder , int preStart , int preEnd , int [] inorder , int inStart , int inEnd ) { // \u5224\u65ad\u524d\u5e8f\u904d\u5386\u7684\u4e0b\u6807\u8303\u56f4\u7684start\u548cend\u7684\u5173\u7cfb // \u5f00\u59cb\u5927\u4e8e\u7ed3\u675f\uff0c\u8bf4\u660e\u5f53\u524d\u4e8c\u53c9\u6811\u4e2d\u6ca1\u6709\u7ed3\u70b9\uff0c\u8fd4\u56denull\u5373\u53ef if ( preStart > preEnd ) return null ; // \u53e6\u5916\u4e24\u79cd\u60c5\u51b5\u90fd\u9700\u8981\u5148\u786e\u5b9a\u6839\u8282\u70b9 // \u5df2\u77e5\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u6839\u8282\u70b9 int rootValue = preorder [ preStart ] ; TreeNode root = new TreeNode ( rootValue ); // \u5f00\u59cb\u7b49\u4e8e\u7ed3\u675f\uff0c\u5219\u5f53\u524d\u7684\u4e8c\u53c9\u6811\u4e2d\u6070\u597d\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u5373\u6839\u8282\u70b9 if ( preStart == preEnd ) { return root ; } else { // \u5f00\u59cb\u5c0f\u4e8e\u7ed3\u675f\uff0c\u8bf4\u660e\u5f53\u524d\u4e8c\u53c9\u6811\u4e2d\u6709\u591a\u4e2a\u7ed3\u70b9\u3002 // \u5148\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf int rootIndex = indexMap . get ( rootValue ); //\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4e0b\u6807 int leftNodeNum = rootIndex - inStart ; //\u6839\u8282\u70b9\u4e0b\u6807 - \u4e2d\u5e8f\u904d\u5386\u8d77\u70b9 = \u5de6\u5b50\u6811\u7ed3\u70b9\u6570\u91cf int rightNodeNum = inEnd - rootIndex ; //\u4e2d\u5e8f\u904d\u5386\u7ec8\u70b9 - \u6839\u8282\u70b9\u4e0b\u6807 = \u53f3\u5b50\u6811\u7ed3\u70b9\u6570\u91cf // \u9012\u5f52\u91cd\u5efa\u5de6\u53f3\u5b50\u6811 // \u53c2\u6570\u610f\u4e49\uff1a // \u524d\u5e8f\u904d\u5386\uff0c\u5de6\u5b50\u6811\u7684\u524d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u524d\u5e8f\u7ec8\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u5de6\u5b50\u6811\u7684\u4e2d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u7ec8\u70b9\u4e0b\u6807 TreeNode leftTree = buildTree ( preorder , preStart + 1 , preStart + leftNodeNum , inorder , inStart , inStart + leftNodeNum - 1 ); // \u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4e5f\u53ef\u4ee5\u662frootIndex - 1 // \u53c2\u6570\u610f\u4e49\uff1a // \u524d\u5e8f\u904d\u5386\uff0c\u53f3\u5b50\u6811\u7684\u524d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u524d\u5e8f\u7ec8\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u7ec8\u70b9\u4e0b\u6807 TreeNode rightTree = buildTree ( preorder , preEnd - rightNodeNum + 1 , preEnd , inorder , rootIndex + 1 , inEnd ); // \u6839\u8282\u70b9\u7684\u5de6\u53f3\u7ed3\u70b9\u5373\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9 root . left = leftTree ; root . right = rightTree ; // \u8fd4\u56de\u6839\u8282\u70b9 return root ; } } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/ https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/solution/mian-shi-ti-07-zhong-jian-er-cha-shu-by-leetcode-s/ 4. \u7b14\u8bb0 \u00b6","title":"LCOF 07. \u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/#1","text":"\u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 \u4f8b\u5982\uff0c\u7ed9\u51fa \u524d\u5e8f\u904d\u5386 preorder = [3,9,20,15,7] \u4e2d\u5e8f\u904d\u5386 inorder = [9,3,15,20,7] \u8fd4\u56de\u5982\u4e0b\u7684\u4e8c\u53c9\u6811\uff1a 3 / \\ 9 20 / \\ 15 7 \u9650\u5236\uff1a - 0 <= \u8282\u70b9\u4e2a\u6570 <= 5000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/#2-","text":"","title":"2. \u89e3\u6cd5 - \u9012\u5f52"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/#21-java","text":"/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { // \u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u4e2d\u5404\u4e2a\u7ed3\u70b9\u7684\u4e0b\u6807 Map < Integer , Integer > indexMap = new HashMap < Integer , Integer > (); public TreeNode buildTree ( int [] preorder , int [] inorder ) { // \u5224\u7a7a if ( preorder . length == 0 ) return null ; // \u5c06\u4e2d\u5e8f\u904d\u5386\u4e2d\u6240\u6709\u7ed3\u70b9\u7684\u4e0b\u6807\u5b58\u50a8\u5230map\u4e2d // \u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8981\u5b58\u50a8\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u70b9\u4e0b\u6807\uff1f // \u56e0\u4e3a\u9700\u8981\u5148\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u5f97\u5230\u5de6\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4\u548c\u7ed3\u70b9\u6570\u91cf\uff0c\u7136\u540e\u6839\u636e\u5de6\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf\u624d\u80fd\u5728\u524d\u5e8f\u904d\u5386\u4e2d\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4\u3002 for ( int i = 0 ; i < inorder . length ; i ++ ) { indexMap . put ( inorder [ i ] , i ); } // \u7ed3\u70b9\u6570\u91cf int size = preorder . length ; // \u91cd\u5efa\u4e8c\u53c9\u6811 TreeNode root = buildTree ( preorder , 0 , size - 1 , inorder , 0 , size - 1 ); return root ; } // \u524d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4[preStart, preEnd] // \u4e2d\u5e8f\u904d\u5386\u4e0b\u6807\u8303\u56f4[inStart, inEnd] public TreeNode buildTree ( int [] preorder , int preStart , int preEnd , int [] inorder , int inStart , int inEnd ) { // \u5224\u65ad\u524d\u5e8f\u904d\u5386\u7684\u4e0b\u6807\u8303\u56f4\u7684start\u548cend\u7684\u5173\u7cfb // \u5f00\u59cb\u5927\u4e8e\u7ed3\u675f\uff0c\u8bf4\u660e\u5f53\u524d\u4e8c\u53c9\u6811\u4e2d\u6ca1\u6709\u7ed3\u70b9\uff0c\u8fd4\u56denull\u5373\u53ef if ( preStart > preEnd ) return null ; // \u53e6\u5916\u4e24\u79cd\u60c5\u51b5\u90fd\u9700\u8981\u5148\u786e\u5b9a\u6839\u8282\u70b9 // \u5df2\u77e5\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u6839\u8282\u70b9 int rootValue = preorder [ preStart ] ; TreeNode root = new TreeNode ( rootValue ); // \u5f00\u59cb\u7b49\u4e8e\u7ed3\u675f\uff0c\u5219\u5f53\u524d\u7684\u4e8c\u53c9\u6811\u4e2d\u6070\u597d\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u5373\u6839\u8282\u70b9 if ( preStart == preEnd ) { return root ; } else { // \u5f00\u59cb\u5c0f\u4e8e\u7ed3\u675f\uff0c\u8bf4\u660e\u5f53\u524d\u4e8c\u53c9\u6811\u4e2d\u6709\u591a\u4e2a\u7ed3\u70b9\u3002 // \u5148\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u786e\u5b9a\u5de6\u53f3\u5b50\u6811\u7684\u7ed3\u70b9\u6570\u91cf int rootIndex = indexMap . get ( rootValue ); //\u6839\u8282\u70b9\u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u4e0b\u6807 int leftNodeNum = rootIndex - inStart ; //\u6839\u8282\u70b9\u4e0b\u6807 - \u4e2d\u5e8f\u904d\u5386\u8d77\u70b9 = \u5de6\u5b50\u6811\u7ed3\u70b9\u6570\u91cf int rightNodeNum = inEnd - rootIndex ; //\u4e2d\u5e8f\u904d\u5386\u7ec8\u70b9 - \u6839\u8282\u70b9\u4e0b\u6807 = \u53f3\u5b50\u6811\u7ed3\u70b9\u6570\u91cf // \u9012\u5f52\u91cd\u5efa\u5de6\u53f3\u5b50\u6811 // \u53c2\u6570\u610f\u4e49\uff1a // \u524d\u5e8f\u904d\u5386\uff0c\u5de6\u5b50\u6811\u7684\u524d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u524d\u5e8f\u7ec8\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u5de6\u5b50\u6811\u7684\u4e2d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u7ec8\u70b9\u4e0b\u6807 TreeNode leftTree = buildTree ( preorder , preStart + 1 , preStart + leftNodeNum , inorder , inStart , inStart + leftNodeNum - 1 ); // \u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4e5f\u53ef\u4ee5\u662frootIndex - 1 // \u53c2\u6570\u610f\u4e49\uff1a // \u524d\u5e8f\u904d\u5386\uff0c\u53f3\u5b50\u6811\u7684\u524d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u524d\u5e8f\u7ec8\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u8d77\u70b9\u4e0b\u6807\uff0c\u4e2d\u5e8f\u7ec8\u70b9\u4e0b\u6807 TreeNode rightTree = buildTree ( preorder , preEnd - rightNodeNum + 1 , preEnd , inorder , rootIndex + 1 , inEnd ); // \u6839\u8282\u70b9\u7684\u5de6\u53f3\u7ed3\u70b9\u5373\u5de6\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9 root . left = leftTree ; root . right = rightTree ; // \u8fd4\u56de\u6839\u8282\u70b9 return root ; } } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/#3","text":"https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/ https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/solution/mian-shi-ti-07-zhong-jian-er-cha-shu-by-leetcode-s/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-07/#4","text":"","title":"4. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/","text":"1. \u95ee\u9898 \u00b6 \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\u3002\u961f\u5217\u7684\u58f0\u660e\u5982\u4e0b\uff0c\u8bf7\u5b9e\u73b0\u5b83\u7684\u4e24\u4e2a\u51fd\u6570 appendTail \u548c deleteHead \uff0c\u5206\u522b\u5b8c\u6210\u5728\u961f\u5217\u5c3e\u90e8\u63d2\u5165\u6574\u6570\u548c\u5728\u961f\u5217\u5934\u90e8\u5220\u9664\u6574\u6570\u7684\u529f\u80fd\u3002(\u82e5\u961f\u5217\u4e2d\u6ca1\u6709\u5143\u7d20\uff0cdeleteHead \u64cd\u4f5c\u8fd4\u56de -1 ) \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"] [[],[3],[],[]] \u8f93\u51fa\uff1a[null,null,3,-1] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a [\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"] [[],[],[5],[2],[],[]] \u8f93\u51fa\uff1a[null,-1,null,null,5,2] \u63d0\u793a\uff1a - 1 <= values <= 10000 - \u6700\u591a\u4f1a\u5bf9 appendTail\u3001deleteHead \u8fdb\u884c 10000 \u6b21\u8c03\u7528 2. \u89e3\u6cd5 - \u8f85\u52a9\u6808 \u00b6 2.1 Java \u00b6 /** * Your CQueue object will be instantiated and called as such: * CQueue obj = new CQueue(); * obj.appendTail(value); * int param_2 = obj.deleteHead(); */ class CQueue { // \u8f85\u52a9\u6808 Stack < Integer > stackIn ; Stack < Integer > stackOut ; public CQueue () { stackIn = new Stack < Integer > (); stackOut = new Stack < Integer > (); } public void appendTail ( int value ) { stackIn . push ( value ); } public int deleteHead () { if ( stackIn . empty () && stackOut . empty ()) return - 1 ; // out\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5c31\u5148pop if ( ! stackOut . empty ()) return stackOut . pop (); else { // \u5148\u628ain\u6808\u7684\u5168\u90e8pop\u5230out\u6808\u4e2d while ( ! stackIn . empty ()){ stackOut . push ( stackIn . pop ()); } return stackOut . pop (); } } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/mian-shi-ti-09-yong-liang-ge-zhan-shi-xian-dui-l-3/ 4. \u7b14\u8bb0 \u00b6","title":"LCOF 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/#1","text":"\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\u3002\u961f\u5217\u7684\u58f0\u660e\u5982\u4e0b\uff0c\u8bf7\u5b9e\u73b0\u5b83\u7684\u4e24\u4e2a\u51fd\u6570 appendTail \u548c deleteHead \uff0c\u5206\u522b\u5b8c\u6210\u5728\u961f\u5217\u5c3e\u90e8\u63d2\u5165\u6574\u6570\u548c\u5728\u961f\u5217\u5934\u90e8\u5220\u9664\u6574\u6570\u7684\u529f\u80fd\u3002(\u82e5\u961f\u5217\u4e2d\u6ca1\u6709\u5143\u7d20\uff0cdeleteHead \u64cd\u4f5c\u8fd4\u56de -1 ) \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a [\"CQueue\",\"appendTail\",\"deleteHead\",\"deleteHead\"] [[],[3],[],[]] \u8f93\u51fa\uff1a[null,null,3,-1] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a [\"CQueue\",\"deleteHead\",\"appendTail\",\"appendTail\",\"deleteHead\",\"deleteHead\"] [[],[],[5],[2],[],[]] \u8f93\u51fa\uff1a[null,-1,null,null,5,2] \u63d0\u793a\uff1a - 1 <= values <= 10000 - \u6700\u591a\u4f1a\u5bf9 appendTail\u3001deleteHead \u8fdb\u884c 10000 \u6b21\u8c03\u7528","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/#2-","text":"","title":"2. \u89e3\u6cd5 - \u8f85\u52a9\u6808"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/#21-java","text":"/** * Your CQueue object will be instantiated and called as such: * CQueue obj = new CQueue(); * obj.appendTail(value); * int param_2 = obj.deleteHead(); */ class CQueue { // \u8f85\u52a9\u6808 Stack < Integer > stackIn ; Stack < Integer > stackOut ; public CQueue () { stackIn = new Stack < Integer > (); stackOut = new Stack < Integer > (); } public void appendTail ( int value ) { stackIn . push ( value ); } public int deleteHead () { if ( stackIn . empty () && stackOut . empty ()) return - 1 ; // out\u6808\u4e0d\u4e3a\u7a7a\uff0c\u5c31\u5148pop if ( ! stackOut . empty ()) return stackOut . pop (); else { // \u5148\u628ain\u6808\u7684\u5168\u90e8pop\u5230out\u6808\u4e2d while ( ! stackIn . empty ()){ stackOut . push ( stackIn . pop ()); } return stackOut . pop (); } } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/#3","text":"https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/mian-shi-ti-09-yong-liang-ge-zhan-shi-xian-dui-l-3/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-09/#4","text":"","title":"4. \u7b14\u8bb0"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/","text":"1. \u95ee\u9898 \u00b6 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165 n \uff0c\u6c42\u6590\u6ce2\u90a3\u5951\uff08Fibonacci\uff09\u6570\u5217\u7684\u7b2c n \u9879\u3002\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N > 1. \u6590\u6ce2\u90a3\u5951\u6570\u5217\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5c31\u662f\u7531\u4e4b\u524d\u7684\u4e24\u6570\u76f8\u52a0\u800c\u5f97\u51fa\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1an = 5 \u8f93\u51fa\uff1a5 \u63d0\u793a\uff1a - 0 <= n <= 100 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 // \u9012\u5f52\u8d85\u65f6\u4e86 class Solution { public int fib ( int n ) { if ( n == 0 || n == 1 ) return n ; int [] res = new int [ n + 1 ] ; res [ 0 ] = 0 ; res [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res [ i ] = ( res [ i - 1 ] + res [ i - 2 ] ) % 1000000007 ; return res [ n ] ; } } 2.2 Kotlin \u00b6 // \u9012\u5f52\u8d85\u65f6\u4e86 class Solution { fun fib ( n : Int ): Int { if ( n == 0 || n == 1 ) return n val res = IntArray ( n + 1 ) res [ 0 ] = 0 res [ 1 ] = 1 for ( i in 2. . n ) res [ i ] = ( res [ i - 1 ] + res [ i - 2 ]) % 1000000007 return res [ n ] } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/","title":"LCOF 10-I. \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/#1","text":"\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165 n \uff0c\u6c42\u6590\u6ce2\u90a3\u5951\uff08Fibonacci\uff09\u6570\u5217\u7684\u7b2c n \u9879\u3002\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N > 1. \u6590\u6ce2\u90a3\u5951\u6570\u5217\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5c31\u662f\u7531\u4e4b\u524d\u7684\u4e24\u6570\u76f8\u52a0\u800c\u5f97\u51fa\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1an = 5 \u8f93\u51fa\uff1a5 \u63d0\u793a\uff1a - 0 <= n <= 100","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/#21-java","text":"// \u9012\u5f52\u8d85\u65f6\u4e86 class Solution { public int fib ( int n ) { if ( n == 0 || n == 1 ) return n ; int [] res = new int [ n + 1 ] ; res [ 0 ] = 0 ; res [ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ) res [ i ] = ( res [ i - 1 ] + res [ i - 2 ] ) % 1000000007 ; return res [ n ] ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/#22-kotlin","text":"// \u9012\u5f52\u8d85\u65f6\u4e86 class Solution { fun fib ( n : Int ): Int { if ( n == 0 || n == 1 ) return n val res = IntArray ( n + 1 ) res [ 0 ] = 0 res [ 1 ] = 1 for ( i in 2. . n ) res [ i ] = ( res [ i - 1 ] + res [ i - 2 ]) % 1000000007 return res [ n ] } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-1/#3","text":"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/","text":"1. \u95ee\u9898 \u00b6 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u53f0\u9636\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a2 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1an = 7 \u8f93\u51fa\uff1a21 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1an = 0 \u8f93\u51fa\uff1a1 \u63d0\u793a\uff1a - 0 <= n <= 100 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 // dp class Solution { public int numWays ( int n ) { // \u72b6\u6001\u6570\u7ec4 int [] dp = new int [ n + 1 ] ; // \u8fb9\u754c\u503c if ( n == 0 || n == 1 ) return 1 ; dp [ 0 ] = 1 ; dp [ 1 ] = 1 ; // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b for ( int i = 2 ; i <= n ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] + dp [ i - 2 ] ) % 1000000007 ; } return dp [ n ] ; } } 2.2 Kotlin \u00b6 // dp class Solution { fun numWays ( n : Int ): Int { // \u72b6\u6001\u6570\u7ec4 val dp = IntArray ( n + 1 ) // \u8fb9\u754c\u503c if ( n == 0 || n == 1 ) return 1 dp [ 0 ] = 1 dp [ 1 ] = 1 // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b for ( i in 2. . n ) { dp [ i ] = ( dp [ i - 1 ] + dp [ i - 2 ]) % 1000000007 } return dp [ n ] } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/","title":"LCOF 10-II. \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/#1","text":"\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u53f0\u9636\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1an = 2 \u8f93\u51fa\uff1a2 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1an = 7 \u8f93\u51fa\uff1a21 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1an = 0 \u8f93\u51fa\uff1a1 \u63d0\u793a\uff1a - 0 <= n <= 100","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/#21-java","text":"// dp class Solution { public int numWays ( int n ) { // \u72b6\u6001\u6570\u7ec4 int [] dp = new int [ n + 1 ] ; // \u8fb9\u754c\u503c if ( n == 0 || n == 1 ) return 1 ; dp [ 0 ] = 1 ; dp [ 1 ] = 1 ; // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b for ( int i = 2 ; i <= n ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] + dp [ i - 2 ] ) % 1000000007 ; } return dp [ n ] ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/#22-kotlin","text":"// dp class Solution { fun numWays ( n : Int ): Int { // \u72b6\u6001\u6570\u7ec4 val dp = IntArray ( n + 1 ) // \u8fb9\u754c\u503c if ( n == 0 || n == 1 ) return 1 dp [ 0 ] = 1 dp [ 1 ] = 1 // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b for ( i in 2. . n ) { dp [ i ] = ( dp [ i - 1 ] + dp [ i - 2 ]) % 1000000007 } return dp [ n ] } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-10-2/#3","text":"https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/","text":"1. \u95ee\u9898 \u00b6 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002\u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u6570\u7ec4 [3,4,5,1,2] \u4e3a [1,2,3,4,5] \u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[3,4,5,1,2] \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[2,2,2,0,1] \u8f93\u51fa\uff1a0 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 class Solution { public int minArray ( int [] nums ) { // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de if ( nums . length == 1 ) return nums [ 0 ] ; // \u5de6\u53f3\u8fb9\u754c int left = 0 ; int right = nums . length - 1 ; // \u4e8c\u5206\u67e5\u627e // \u7ecf\u8fc7\u65cb\u8f6c\u4e4b\u540e\u7684\u6570\u7ec4\u88ab\u5206\u4e3a\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0cnums1\u548cnums2 // nums1\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a\u90fd\u4f1a\u3010\u5927\u4e8e\u7b49\u4e8e\u3011nums2\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a // \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u5728nums\u6570\u7ec4\u4e2d\u627e\u5230nums2\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20nums[i]\uff08\u4e5f\u5c31\u662f\u6700\u5c0f\u503c\uff09 while ( left < right ) { // \u4e2d\u70b9 int mid = left + ( right - left ) / 2 ; // \u6bd4\u8f83nums[mid]\u548cnums[right]\u7684\u5927\u5c0f if ( nums [ mid ] < nums [ right ] ) { // nums[mid]\u66f4\u5c0f\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<i<=mid<right right = mid ; } else if ( nums [ mid ] > nums [ right ] ) { // nums[mid]\u66f4\u5927\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<mid<i<right left = mid + 1 ; } else { // \u7531\u4e8e\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u65e0\u6cd5\u5224\u65admid\u76ee\u524d\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u7531\u4e8enums[mid]=nums[right]\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u53f3\u7aef\u70b9 right -= 1 ; } } // \u8fd4\u56denums[left]\u6216nums[right] return nums [ left ] ; } } 2.2 Kotlin \u00b6 class Solution { fun minArray ( nums : IntArray ): Int { // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de if ( nums . size == 1 ) return nums [ 0 ] // \u5de6\u53f3\u8fb9\u754c var left = 0 var right = nums . size - 1 // \u4e8c\u5206\u67e5\u627e // \u7ecf\u8fc7\u65cb\u8f6c\u4e4b\u540e\u7684\u6570\u7ec4\u88ab\u5206\u4e3a\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0cnums1\u548cnums2 // nums1\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a\u90fd\u4f1a\u3010\u5927\u4e8e\u7b49\u4e8e\u3011nums2\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a // \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u5728nums\u6570\u7ec4\u4e2d\u627e\u5230nums2\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20nums[i]\uff08\u4e5f\u5c31\u662f\u6700\u5c0f\u503c\uff09 while ( left < right ) { // \u4e2d\u70b9 val mid = left + ( right - left ) / 2 // \u6bd4\u8f83nums[mid]\u548cnums[right]\u7684\u5927\u5c0f if ( nums [ mid ] < nums [ right ]) { // nums[mid]\u66f4\u5c0f\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<i<=mid<right right = mid } else if ( nums [ mid ] > nums [ right ]) { // nums[mid]\u66f4\u5927\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<mid<i<right left = mid + 1 } else { // \u7531\u4e8e\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u65e0\u6cd5\u5224\u65admid\u76ee\u524d\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u7531\u4e8enums[mid]=nums[right]\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u53f3\u7aef\u70b9 right -= 1 } } // \u8fd4\u56denums[left]\u6216nums[right] return nums [ left ] } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/ https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-by-leetcode-s/ https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/mian-shi-ti-11-xuan-zhuan-shu-zu-de-zui-xiao-shu-3/","title":"LCOF 11. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/#1","text":"\u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002\u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u6570\u7ec4 [3,4,5,1,2] \u4e3a [1,2,3,4,5] \u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[3,4,5,1,2] \u8f93\u51fa\uff1a1 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[2,2,2,0,1] \u8f93\u51fa\uff1a0","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/#21-java","text":"class Solution { public int minArray ( int [] nums ) { // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de if ( nums . length == 1 ) return nums [ 0 ] ; // \u5de6\u53f3\u8fb9\u754c int left = 0 ; int right = nums . length - 1 ; // \u4e8c\u5206\u67e5\u627e // \u7ecf\u8fc7\u65cb\u8f6c\u4e4b\u540e\u7684\u6570\u7ec4\u88ab\u5206\u4e3a\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0cnums1\u548cnums2 // nums1\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a\u90fd\u4f1a\u3010\u5927\u4e8e\u7b49\u4e8e\u3011nums2\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a // \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u5728nums\u6570\u7ec4\u4e2d\u627e\u5230nums2\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20nums[i]\uff08\u4e5f\u5c31\u662f\u6700\u5c0f\u503c\uff09 while ( left < right ) { // \u4e2d\u70b9 int mid = left + ( right - left ) / 2 ; // \u6bd4\u8f83nums[mid]\u548cnums[right]\u7684\u5927\u5c0f if ( nums [ mid ] < nums [ right ] ) { // nums[mid]\u66f4\u5c0f\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<i<=mid<right right = mid ; } else if ( nums [ mid ] > nums [ right ] ) { // nums[mid]\u66f4\u5927\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<mid<i<right left = mid + 1 ; } else { // \u7531\u4e8e\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u65e0\u6cd5\u5224\u65admid\u76ee\u524d\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u7531\u4e8enums[mid]=nums[right]\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u53f3\u7aef\u70b9 right -= 1 ; } } // \u8fd4\u56denums[left]\u6216nums[right] return nums [ left ] ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/#22-kotlin","text":"class Solution { fun minArray ( nums : IntArray ): Int { // \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de if ( nums . size == 1 ) return nums [ 0 ] // \u5de6\u53f3\u8fb9\u754c var left = 0 var right = nums . size - 1 // \u4e8c\u5206\u67e5\u627e // \u7ecf\u8fc7\u65cb\u8f6c\u4e4b\u540e\u7684\u6570\u7ec4\u88ab\u5206\u4e3a\u4e86\u4e24\u4e2a\u6570\u7ec4\uff0cnums1\u548cnums2 // nums1\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a\u90fd\u4f1a\u3010\u5927\u4e8e\u7b49\u4e8e\u3011nums2\u4e2d\u7684\u5143\u7d20\u7684\u4efb\u4e00\u4e2a // \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u5728nums\u6570\u7ec4\u4e2d\u627e\u5230nums2\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20nums[i]\uff08\u4e5f\u5c31\u662f\u6700\u5c0f\u503c\uff09 while ( left < right ) { // \u4e2d\u70b9 val mid = left + ( right - left ) / 2 // \u6bd4\u8f83nums[mid]\u548cnums[right]\u7684\u5927\u5c0f if ( nums [ mid ] < nums [ right ]) { // nums[mid]\u66f4\u5c0f\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<i<=mid<right right = mid } else if ( nums [ mid ] > nums [ right ]) { // nums[mid]\u66f4\u5927\uff0c\u8bf4\u660e\u6b64\u65f6nums[mid]\u5904\u4e8e\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0cleft<mid<i<right left = mid + 1 } else { // \u7531\u4e8e\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u65e0\u6cd5\u5224\u65admid\u76ee\u524d\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u7531\u4e8enums[mid]=nums[right]\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u53f3\u7aef\u70b9 right -= 1 } } // \u8fd4\u56denums[left]\u6216nums[right] return nums [ left ] } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-11/#3","text":"https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/ https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-by-leetcode-s/ https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/mian-shi-ti-11-xuan-zhuan-shu-zu-de-zui-xiao-shu-3/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/","text":"1. \u95ee\u9898 \u00b6 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002\u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u683c\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\u3001\u53f3\u3001\u4e0a\u3001\u4e0b\u79fb\u52a8\u4e00\u683c\u3002\u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u7684\u67d0\u4e00\u683c\uff0c\u90a3\u4e48\u8be5\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8be5\u683c\u5b50\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u76843\u00d74\u7684\u77e9\u9635\u4e2d\u5305\u542b\u4e00\u6761\u5b57\u7b26\u4e32\u201cbfce\u201d\u7684\u8def\u5f84\uff08\u8def\u5f84\u4e2d\u7684\u5b57\u6bcd\u7528\u52a0\u7c97\u6807\u51fa\uff09\u3002 [[\"a\",\"b\",\"c\",\"e\"], [\"s\",\"f\",\"c\",\"s\"], [\"a\",\"d\",\"e\",\"e\"]] \u4f46\u77e9\u9635\u4e2d\u4e0d\u5305\u542b\u5b57\u7b26\u4e32\u201cabfb\u201d\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26b\u5360\u636e\u4e86\u77e9\u9635\u4e2d\u7684\u7b2c\u4e00\u884c\u7b2c\u4e8c\u4e2a\u683c\u5b50\u4e4b\u540e\uff0c\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1aboard = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\" \u8f93\u51fa\uff1atrue \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aboard = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\" \u8f93\u51fa\uff1afalse \u63d0\u793a\uff1a - 1 <= board.length <= 200 - 1 <= board[i].length <= 200 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 class Solution { public boolean exist ( char [][] board , String word ) { // \u5b57\u7b26\u4e32 - \u5b57\u7b26\u6570\u7ec4 char [] words = word . toCharArray (); // \u904d\u5386\u6240\u6709\u5b57\u7b26\uff0c\u627e\u5230\u4e3a\u6b62\uff0c\u6ca1\u627e\u5230\u5c31\u8fd4\u56defalse for ( int i = 0 ; i < board . length ; i ++ ){ for ( int j = 0 ; j < board [ 0 ] . length ; j ++ ){ if ( dfs ( board , words , i , j , 0 )) return true ; } } return false ; } public boolean dfs ( char [][] board , char [] word , int i , int j , int index ) { // \u8d8a\u754c\uff0c\u77e9\u9635\u5f53\u524d\u5b57\u7b26\u4e0d\u7b49\u4e8e\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e0d\u5408\u6cd5\uff0c\u8fd4\u56defalse if ( i < 0 || i >= board . length || j < 0 || j >= board [ 0 ] . length || board [ i ][ j ] != word [ index ] ) return false ; // \u77e9\u9635\u5f53\u524d\u5b57\u7b26=\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e14\u5df2\u7ecf\u662f\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5408\u6cd5\uff0c\u8fd4\u56detrue if ( index == word . length - 1 ) return true ; // \u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u7528\u4e8e\u8bbf\u95ee\u7ed3\u675f\u540e\u6062\u590d\u77e9\u9635 char curChar = board [ i ][ j ] ; // \u5df2\u8bbf\u95ee\uff0c\u6807\u8bb0\u4e3a'/' board [ i ][ j ] = '/' ; // \u4e0a\u4e0b\u5de6\u53f3\u90fd\u8bbf\u95ee\u4e00\u4e0b\uff0c\u53ea\u8981\u6709\u4e00\u6761\u8def\u6210\u4e86\u5c31\u53ef\u4ee5\uff0c\u6240\u4ee5\u7528\u6216 boolean ans = dfs ( board , word , i + 1 , j , index + 1 ) || dfs ( board , word , i - 1 , j , index + 1 ) || dfs ( board , word , i , j + 1 , index + 1 ) || dfs ( board , word , i , j - 1 , index + 1 ); // \u8bbf\u95ee\u540e\u8fd8\u539f\u77e9\u9635 board [ i ][ j ] = curChar ; // \u8fd4\u56de\u7ed3\u679c return ans ; } } 2.2 Kotlin \u00b6 class Solution { fun exist ( board : Array < CharArray >, word : String ): Boolean { // \u5b57\u7b26\u4e32 - \u5b57\u7b26\u6570\u7ec4 val words = word . toCharArray () // \u904d\u5386\u6240\u6709\u5b57\u7b26\uff0c\u627e\u5230\u4e3a\u6b62\uff0c\u6ca1\u627e\u5230\u5c31\u8fd4\u56defalse for ( i in board . indices ) { for ( j in 0 until board [ 0 ]. size ) { if ( dfs ( board , words , i , j , 0 )) return true } } return false } fun dfs ( board : Array < CharArray >, word : CharArray , i : Int , j : Int , index : Int ): Boolean { // \u8d8a\u754c\uff0c\u77e9\u9635\u5f53\u524d\u5b57\u7b26\u4e0d\u7b49\u4e8e\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e0d\u5408\u6cd5\uff0c\u8fd4\u56defalse if ( i < 0 || i >= board . size || j < 0 || j >= board [ 0 ]. size || board [ i ][ j ] != word [ index ]) return false // \u77e9\u9635\u5f53\u524d\u5b57\u7b26=\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e14\u5df2\u7ecf\u662f\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5408\u6cd5\uff0c\u8fd4\u56detrue if ( index == word . size - 1 ) return true // \u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u7528\u4e8e\u8bbf\u95ee\u7ed3\u675f\u540e\u6062\u590d\u77e9\u9635 val curChar = board [ i ][ j ] // \u5df2\u8bbf\u95ee\uff0c\u6807\u8bb0\u4e3a'/' board [ i ][ j ] = '/' // \u4e0a\u4e0b\u5de6\u53f3\u90fd\u8bbf\u95ee\u4e00\u4e0b\uff0c\u53ea\u8981\u6709\u4e00\u6761\u8def\u6210\u4e86\u5c31\u53ef\u4ee5\uff0c\u6240\u4ee5\u7528\u6216 val ans = dfs ( board , word , i + 1 , j , index + 1 ) || dfs ( board , word , i - 1 , j , index + 1 ) || dfs ( board , word , i , j + 1 , index + 1 ) || dfs ( board , word , i , j - 1 , index + 1 ) // \u8bbf\u95ee\u540e\u8fd8\u539f\u77e9\u9635 board [ i ][ j ] = curChar // \u8fd4\u56de\u7ed3\u679c return ans } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/ https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/solution/mian-shi-ti-12-ju-zhen-zhong-de-lu-jing-shen-du-yo/","title":"LCOF 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/#1","text":"\u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002\u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u683c\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\u3001\u53f3\u3001\u4e0a\u3001\u4e0b\u79fb\u52a8\u4e00\u683c\u3002\u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u7684\u67d0\u4e00\u683c\uff0c\u90a3\u4e48\u8be5\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8be5\u683c\u5b50\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u76843\u00d74\u7684\u77e9\u9635\u4e2d\u5305\u542b\u4e00\u6761\u5b57\u7b26\u4e32\u201cbfce\u201d\u7684\u8def\u5f84\uff08\u8def\u5f84\u4e2d\u7684\u5b57\u6bcd\u7528\u52a0\u7c97\u6807\u51fa\uff09\u3002 [[\"a\",\"b\",\"c\",\"e\"], [\"s\",\"f\",\"c\",\"s\"], [\"a\",\"d\",\"e\",\"e\"]] \u4f46\u77e9\u9635\u4e2d\u4e0d\u5305\u542b\u5b57\u7b26\u4e32\u201cabfb\u201d\u7684\u8def\u5f84\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26b\u5360\u636e\u4e86\u77e9\u9635\u4e2d\u7684\u7b2c\u4e00\u884c\u7b2c\u4e8c\u4e2a\u683c\u5b50\u4e4b\u540e\uff0c\u8def\u5f84\u4e0d\u80fd\u518d\u6b21\u8fdb\u5165\u8fd9\u4e2a\u683c\u5b50\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1aboard = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\" \u8f93\u51fa\uff1atrue \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1aboard = [[\"a\",\"b\"],[\"c\",\"d\"]], word = \"abcd\" \u8f93\u51fa\uff1afalse \u63d0\u793a\uff1a - 1 <= board.length <= 200 - 1 <= board[i].length <= 200","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/#21-java","text":"class Solution { public boolean exist ( char [][] board , String word ) { // \u5b57\u7b26\u4e32 - \u5b57\u7b26\u6570\u7ec4 char [] words = word . toCharArray (); // \u904d\u5386\u6240\u6709\u5b57\u7b26\uff0c\u627e\u5230\u4e3a\u6b62\uff0c\u6ca1\u627e\u5230\u5c31\u8fd4\u56defalse for ( int i = 0 ; i < board . length ; i ++ ){ for ( int j = 0 ; j < board [ 0 ] . length ; j ++ ){ if ( dfs ( board , words , i , j , 0 )) return true ; } } return false ; } public boolean dfs ( char [][] board , char [] word , int i , int j , int index ) { // \u8d8a\u754c\uff0c\u77e9\u9635\u5f53\u524d\u5b57\u7b26\u4e0d\u7b49\u4e8e\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e0d\u5408\u6cd5\uff0c\u8fd4\u56defalse if ( i < 0 || i >= board . length || j < 0 || j >= board [ 0 ] . length || board [ i ][ j ] != word [ index ] ) return false ; // \u77e9\u9635\u5f53\u524d\u5b57\u7b26=\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e14\u5df2\u7ecf\u662f\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5408\u6cd5\uff0c\u8fd4\u56detrue if ( index == word . length - 1 ) return true ; // \u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u7528\u4e8e\u8bbf\u95ee\u7ed3\u675f\u540e\u6062\u590d\u77e9\u9635 char curChar = board [ i ][ j ] ; // \u5df2\u8bbf\u95ee\uff0c\u6807\u8bb0\u4e3a'/' board [ i ][ j ] = '/' ; // \u4e0a\u4e0b\u5de6\u53f3\u90fd\u8bbf\u95ee\u4e00\u4e0b\uff0c\u53ea\u8981\u6709\u4e00\u6761\u8def\u6210\u4e86\u5c31\u53ef\u4ee5\uff0c\u6240\u4ee5\u7528\u6216 boolean ans = dfs ( board , word , i + 1 , j , index + 1 ) || dfs ( board , word , i - 1 , j , index + 1 ) || dfs ( board , word , i , j + 1 , index + 1 ) || dfs ( board , word , i , j - 1 , index + 1 ); // \u8bbf\u95ee\u540e\u8fd8\u539f\u77e9\u9635 board [ i ][ j ] = curChar ; // \u8fd4\u56de\u7ed3\u679c return ans ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/#22-kotlin","text":"class Solution { fun exist ( board : Array < CharArray >, word : String ): Boolean { // \u5b57\u7b26\u4e32 - \u5b57\u7b26\u6570\u7ec4 val words = word . toCharArray () // \u904d\u5386\u6240\u6709\u5b57\u7b26\uff0c\u627e\u5230\u4e3a\u6b62\uff0c\u6ca1\u627e\u5230\u5c31\u8fd4\u56defalse for ( i in board . indices ) { for ( j in 0 until board [ 0 ]. size ) { if ( dfs ( board , words , i , j , 0 )) return true } } return false } fun dfs ( board : Array < CharArray >, word : CharArray , i : Int , j : Int , index : Int ): Boolean { // \u8d8a\u754c\uff0c\u77e9\u9635\u5f53\u524d\u5b57\u7b26\u4e0d\u7b49\u4e8e\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e0d\u5408\u6cd5\uff0c\u8fd4\u56defalse if ( i < 0 || i >= board . size || j < 0 || j >= board [ 0 ]. size || board [ i ][ j ] != word [ index ]) return false // \u77e9\u9635\u5f53\u524d\u5b57\u7b26=\u5b57\u7b26\u4e32\u5f53\u524d\u5b57\u7b26\uff0c\u4e14\u5df2\u7ecf\u662f\u5b57\u7b26\u4e32\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5408\u6cd5\uff0c\u8fd4\u56detrue if ( index == word . size - 1 ) return true // \u8bb0\u5f55\u4e0b\u5f53\u524d\u7684\u5b57\u7b26\uff0c\u7528\u4e8e\u8bbf\u95ee\u7ed3\u675f\u540e\u6062\u590d\u77e9\u9635 val curChar = board [ i ][ j ] // \u5df2\u8bbf\u95ee\uff0c\u6807\u8bb0\u4e3a'/' board [ i ][ j ] = '/' // \u4e0a\u4e0b\u5de6\u53f3\u90fd\u8bbf\u95ee\u4e00\u4e0b\uff0c\u53ea\u8981\u6709\u4e00\u6761\u8def\u6210\u4e86\u5c31\u53ef\u4ee5\uff0c\u6240\u4ee5\u7528\u6216 val ans = dfs ( board , word , i + 1 , j , index + 1 ) || dfs ( board , word , i - 1 , j , index + 1 ) || dfs ( board , word , i , j + 1 , index + 1 ) || dfs ( board , word , i , j - 1 , index + 1 ) // \u8bbf\u95ee\u540e\u8fd8\u539f\u77e9\u9635 board [ i ][ j ] = curChar // \u8fd4\u56de\u7ed3\u679c return ans } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-12/#3","text":"https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/ https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/solution/mian-shi-ti-12-ju-zhen-zhong-de-lu-jing-shen-du-yo/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/","text":"1. \u95ee\u9898 \u00b6 \u5730\u4e0a\u6709\u4e00\u4e2am\u884cn\u5217\u7684\u65b9\u683c\uff0c\u4ece\u5750\u6807 [0,0] \u5230\u5750\u6807 [m-1,n-1] \u3002\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 [0, 0] \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u5b83\u6bcf\u6b21\u53ef\u4ee5\u5411\u5de6\u3001\u53f3\u3001\u4e0a\u3001\u4e0b\u79fb\u52a8\u4e00\u683c\uff08\u4e0d\u80fd\u79fb\u52a8\u5230\u65b9\u683c\u5916\uff09\uff0c\u4e5f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8ek\u7684\u683c\u5b50\u3002\u4f8b\u5982\uff0c\u5f53k\u4e3a18\u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c [35, 37] \uff0c\u56e0\u4e3a3+5+3+7=18\u3002\u4f46\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c [35, 38]\uff0c\u56e0\u4e3a3+5+3+8=19\u3002\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u5230\u8fbe\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1am = 2, n = 3, k = 1 \u8f93\u51fa\uff1a3 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1am = 3, n = 1, k = 0 \u8f93\u51fa\uff1a1 \u63d0\u793a\uff1a - 1 <= n,m <= 100 - 0 <= k <= 20 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 /** * \u641c\u7d22\u77e9\u9635\uff1a * \u9012\u5f52 \u2014\u2014 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 * \u961f\u5217 \u2014\u2014 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 * * \u9012\u5f52\u51fa\u53e3\uff1a * \u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee * * \u8bb0\u5f55\u5df2\u8bbf\u95ee * * \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c * * * Ref\uff1a * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/ * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ */ class Solution { public int movingCount ( int m , int n , int k ) { boolean [][] visited = new boolean [ m ][ n ] ; return dfs ( m , n , 0 , 0 , k , visited ); } public int dfs ( int m , int n , int i , int j , int k , boolean [][] visited ) { // \u9012\u5f52\u51fa\u53e3\uff1a\u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee if ( i < 0 || i >= m || j < 0 || j >= n || digitCount ( i , j ) > k || visited [ i ][ j ] ) return 0 ; // \u5f53\u524d\u4f4d\u7f6e\u5df2\u8bbf\u95ee visited [ i ][ j ] = true ; // \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c return 1 + dfs ( m , n , i + 1 , j , k , visited ) + dfs ( m , n , i - 1 , j , k , visited ) + dfs ( m , n , i , j + 1 , k , visited ) + dfs ( m , n , i , j - 1 , k , visited ); } // \u8ba1\u7b97x\u548cy\u7684\u6570\u4f4d\u4e4b\u548c public int digitCount ( int x , int y ) { int sum = 0 ; while ( x != 0 || y != 0 ) { sum += x % 10 ; x /= 10 ; sum += y % 10 ; y /= 10 ; } return sum ; } } 2.2 Kotlin \u00b6 /** * \u641c\u7d22\u77e9\u9635\uff1a * \u9012\u5f52 \u2014\u2014 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 * \u961f\u5217 \u2014\u2014 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 * * \u9012\u5f52\u51fa\u53e3\uff1a * \u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee * * \u8bb0\u5f55\u5df2\u8bbf\u95ee * * \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c * * * Ref\uff1a * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/ * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ */ class Solution { fun movingCount ( m : Int , n : Int , k : Int ): Int { val visited = Array ( m ) { BooleanArray ( n ) } return dfs ( m , n , 0 , 0 , k , visited ) } fun dfs ( m : Int , n : Int , i : Int , j : Int , k : Int , visited : Array < BooleanArray >): Int { // \u9012\u5f52\u51fa\u53e3\uff1a\u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee if ( i < 0 || i >= m || j < 0 || j >= n || digitCount ( i , j ) > k || visited [ i ][ j ]) return 0 // \u5f53\u524d\u4f4d\u7f6e\u5df2\u8bbf\u95ee visited [ i ][ j ] = true // \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c return ( 1 + dfs ( m , n , i + 1 , j , k , visited ) + dfs ( m , n , i - 1 , j , k , visited ) + dfs ( m , n , i , j + 1 , k , visited ) + dfs ( m , n , i , j - 1 , k , visited )) } // \u8ba1\u7b97x\u548cy\u7684\u6570\u4f4d\u4e4b\u548c fun digitCount ( x : Int , y : Int ): Int { var x = x var y = y var sum = 0 while ( x != 0 || y != 0 ) { sum += x % 10 x /= 10 sum += y % 10 y /= 10 } return sum } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/","title":"LCOF 13. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/#1","text":"\u5730\u4e0a\u6709\u4e00\u4e2am\u884cn\u5217\u7684\u65b9\u683c\uff0c\u4ece\u5750\u6807 [0,0] \u5230\u5750\u6807 [m-1,n-1] \u3002\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 [0, 0] \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u5b83\u6bcf\u6b21\u53ef\u4ee5\u5411\u5de6\u3001\u53f3\u3001\u4e0a\u3001\u4e0b\u79fb\u52a8\u4e00\u683c\uff08\u4e0d\u80fd\u79fb\u52a8\u5230\u65b9\u683c\u5916\uff09\uff0c\u4e5f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8ek\u7684\u683c\u5b50\u3002\u4f8b\u5982\uff0c\u5f53k\u4e3a18\u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c [35, 37] \uff0c\u56e0\u4e3a3+5+3+7=18\u3002\u4f46\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c [35, 38]\uff0c\u56e0\u4e3a3+5+3+8=19\u3002\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u5230\u8fbe\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1am = 2, n = 3, k = 1 \u8f93\u51fa\uff1a3 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1am = 3, n = 1, k = 0 \u8f93\u51fa\uff1a1 \u63d0\u793a\uff1a - 1 <= n,m <= 100 - 0 <= k <= 20","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/#21-java","text":"/** * \u641c\u7d22\u77e9\u9635\uff1a * \u9012\u5f52 \u2014\u2014 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 * \u961f\u5217 \u2014\u2014 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 * * \u9012\u5f52\u51fa\u53e3\uff1a * \u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee * * \u8bb0\u5f55\u5df2\u8bbf\u95ee * * \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c * * * Ref\uff1a * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/ * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ */ class Solution { public int movingCount ( int m , int n , int k ) { boolean [][] visited = new boolean [ m ][ n ] ; return dfs ( m , n , 0 , 0 , k , visited ); } public int dfs ( int m , int n , int i , int j , int k , boolean [][] visited ) { // \u9012\u5f52\u51fa\u53e3\uff1a\u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee if ( i < 0 || i >= m || j < 0 || j >= n || digitCount ( i , j ) > k || visited [ i ][ j ] ) return 0 ; // \u5f53\u524d\u4f4d\u7f6e\u5df2\u8bbf\u95ee visited [ i ][ j ] = true ; // \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c return 1 + dfs ( m , n , i + 1 , j , k , visited ) + dfs ( m , n , i - 1 , j , k , visited ) + dfs ( m , n , i , j + 1 , k , visited ) + dfs ( m , n , i , j - 1 , k , visited ); } // \u8ba1\u7b97x\u548cy\u7684\u6570\u4f4d\u4e4b\u548c public int digitCount ( int x , int y ) { int sum = 0 ; while ( x != 0 || y != 0 ) { sum += x % 10 ; x /= 10 ; sum += y % 10 ; y /= 10 ; } return sum ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/#22-kotlin","text":"/** * \u641c\u7d22\u77e9\u9635\uff1a * \u9012\u5f52 \u2014\u2014 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 * \u961f\u5217 \u2014\u2014 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22 * * \u9012\u5f52\u51fa\u53e3\uff1a * \u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee * * \u8bb0\u5f55\u5df2\u8bbf\u95ee * * \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c * * * Ref\uff1a * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/ * https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ */ class Solution { fun movingCount ( m : Int , n : Int , k : Int ): Int { val visited = Array ( m ) { BooleanArray ( n ) } return dfs ( m , n , 0 , 0 , k , visited ) } fun dfs ( m : Int , n : Int , i : Int , j : Int , k : Int , visited : Array < BooleanArray >): Int { // \u9012\u5f52\u51fa\u53e3\uff1a\u8d8a\u754c\uff0c\u6570\u4f4d\u4e4b\u548c\u4e0d\u5408\u6cd5\uff0c\u5df2\u8bbf\u95ee if ( i < 0 || i >= m || j < 0 || j >= n || digitCount ( i , j ) > k || visited [ i ][ j ]) return 0 // \u5f53\u524d\u4f4d\u7f6e\u5df2\u8bbf\u95ee visited [ i ][ j ] = true // \u89e3\u51b3\u5b50\u95ee\u9898\uff0c\u8fd4\u56de\u5f53\u524d\u95ee\u9898\u7684\u7ed3\u679c return ( 1 + dfs ( m , n , i + 1 , j , k , visited ) + dfs ( m , n , i - 1 , j , k , visited ) + dfs ( m , n , i , j + 1 , k , visited ) + dfs ( m , n , i , j - 1 , k , visited )) } // \u8ba1\u7b97x\u548cy\u7684\u6570\u4f4d\u4e4b\u548c fun digitCount ( x : Int , y : Int ): Int { var x = x var y = y var sum = 0 while ( x != 0 || y != 0 ) { sum += x % 10 x /= 10 sum += y % 10 y /= 10 } return sum } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-13/#3","text":"https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/ https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/ji-qi-ren-de-yun-dong-fan-wei-by-leetcode-solution/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/","text":"1. \u95ee\u9898 \u00b6 \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210\u6574\u6570\u957f\u5ea6\u7684 m \u6bb5\uff08m\u3001n\u90fd\u662f\u6574\u6570\uff0cn>1\u5e76\u4e14m>1\uff09\uff0c\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0],k[1]...k[m - 1] \u3002\u8bf7\u95ee k[0] k[1] ...*k[m - 1] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f\u4f8b\u5982\uff0c\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u662f18\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36 \u63d0\u793a\uff1a - 2 <= n <= 1000 2. \u89e3\u6cd5 - \u8d2a\u5fc3 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) 2.1 Java \u00b6 class Solution { public int cuttingRope ( int n ) { // \u5355\u72ec\u5904\u7406 if ( n == 2 ) return 1 ; if ( n == 3 ) return 2 ; // \u6700\u5927\u4e58\u79ef long maxProduct = 1 ; // \u53d6\u6a21 int mod = ( int ) 1e9 + 7 ; // n\u5927\u4e8e4\u7684\u60c5\u51b5\u4e0b\u4e0d\u505c\u5730\u62c63\u51fa\u6765 while ( n > 4 ) { // \u62c6\u4e00\u4e2a3\u5c31\u4e58\u4e00\u4e0b maxProduct *= 3 ; // \u6bcf\u6c42\u51fa\u4e00\u4e2a\u65b0\u7684\u4e58\u79ef\u5c31\u53d6\u6a21 maxProduct %= mod ; // \u62c6\u4e86\u4e00\u4e2a3\u5f53\u7136\u8981\u526a\u53bb\u4e00\u4e2a3 n -= 3 ; } // \u9000\u51fa\u5faa\u73af\u540e\uff0c\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u53ea\u6709\u53ef\u80fd\u662f1\uff0c2\uff0c3 // \u4e0d\u7ba1\u662f\u8c01\u90fd\u6ca1\u6709\u5fc5\u8981\u62c6\uff0c\u8d8a\u62c6\u8d8a\u5c0f\uff0c\u76f4\u63a5\u4e58\u4e0a\u5373\u53ef return ( int )( maxProduct * n % mod ); } } 2.2 Kotlin \u00b6 class Solution { fun cuttingRope ( n : Int ): Int { var n = n // \u5355\u72ec\u5904\u7406 if ( n == 2 ) return 1 if ( n == 3 ) return 2 // \u6700\u5927\u4e58\u79ef var maxProduct : Long = 1 // \u53d6\u6a21 val mod = 1 e9 . toInt () + 7 // n\u5927\u4e8e4\u7684\u60c5\u51b5\u4e0b\u4e0d\u505c\u5730\u62c63\u51fa\u6765 while ( n > 4 ) { // \u62c6\u4e00\u4e2a3\u5c31\u4e58\u4e00\u4e0b maxProduct *= 3 // \u6bcf\u6c42\u51fa\u4e00\u4e2a\u65b0\u7684\u4e58\u79ef\u5c31\u53d6\u6a21 maxProduct %= mod . toLong () // \u62c6\u4e86\u4e00\u4e2a3\u5f53\u7136\u8981\u526a\u53bb\u4e00\u4e2a3 n -= 3 } // \u9000\u51fa\u5faa\u73af\u540e\uff0c\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u53ea\u6709\u53ef\u80fd\u662f1\uff0c2\uff0c3 // \u4e0d\u7ba1\u662f\u8c01\u90fd\u6ca1\u6709\u5fc5\u8981\u62c6\uff0c\u8d8a\u62c6\u8d8a\u5c0f\uff0c\u76f4\u63a5\u4e58\u4e0a\u5373\u53ef return ( maxProduct * n % mod ). toInt () } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/ https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/solution/javatan-xin-si-lu-jiang-jie-by-henrylee4/","title":"LCOF 14-II. \u526a\u7ef3\u5b50 II"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/#1","text":"\u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210\u6574\u6570\u957f\u5ea6\u7684 m \u6bb5\uff08m\u3001n\u90fd\u662f\u6574\u6570\uff0cn>1\u5e76\u4e14m>1\uff09\uff0c\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0],k[1]...k[m - 1] \u3002\u8bf7\u95ee k[0] k[1] ...*k[m - 1] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f\u4f8b\u5982\uff0c\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u662f18\u3002 \u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36 \u63d0\u793a\uff1a - 2 <= n <= 1000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/#2-","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)","title":"2. \u89e3\u6cd5 - \u8d2a\u5fc3"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/#21-java","text":"class Solution { public int cuttingRope ( int n ) { // \u5355\u72ec\u5904\u7406 if ( n == 2 ) return 1 ; if ( n == 3 ) return 2 ; // \u6700\u5927\u4e58\u79ef long maxProduct = 1 ; // \u53d6\u6a21 int mod = ( int ) 1e9 + 7 ; // n\u5927\u4e8e4\u7684\u60c5\u51b5\u4e0b\u4e0d\u505c\u5730\u62c63\u51fa\u6765 while ( n > 4 ) { // \u62c6\u4e00\u4e2a3\u5c31\u4e58\u4e00\u4e0b maxProduct *= 3 ; // \u6bcf\u6c42\u51fa\u4e00\u4e2a\u65b0\u7684\u4e58\u79ef\u5c31\u53d6\u6a21 maxProduct %= mod ; // \u62c6\u4e86\u4e00\u4e2a3\u5f53\u7136\u8981\u526a\u53bb\u4e00\u4e2a3 n -= 3 ; } // \u9000\u51fa\u5faa\u73af\u540e\uff0c\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u53ea\u6709\u53ef\u80fd\u662f1\uff0c2\uff0c3 // \u4e0d\u7ba1\u662f\u8c01\u90fd\u6ca1\u6709\u5fc5\u8981\u62c6\uff0c\u8d8a\u62c6\u8d8a\u5c0f\uff0c\u76f4\u63a5\u4e58\u4e0a\u5373\u53ef return ( int )( maxProduct * n % mod ); } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/#22-kotlin","text":"class Solution { fun cuttingRope ( n : Int ): Int { var n = n // \u5355\u72ec\u5904\u7406 if ( n == 2 ) return 1 if ( n == 3 ) return 2 // \u6700\u5927\u4e58\u79ef var maxProduct : Long = 1 // \u53d6\u6a21 val mod = 1 e9 . toInt () + 7 // n\u5927\u4e8e4\u7684\u60c5\u51b5\u4e0b\u4e0d\u505c\u5730\u62c63\u51fa\u6765 while ( n > 4 ) { // \u62c6\u4e00\u4e2a3\u5c31\u4e58\u4e00\u4e0b maxProduct *= 3 // \u6bcf\u6c42\u51fa\u4e00\u4e2a\u65b0\u7684\u4e58\u79ef\u5c31\u53d6\u6a21 maxProduct %= mod . toLong () // \u62c6\u4e86\u4e00\u4e2a3\u5f53\u7136\u8981\u526a\u53bb\u4e00\u4e2a3 n -= 3 } // \u9000\u51fa\u5faa\u73af\u540e\uff0c\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u53ea\u6709\u53ef\u80fd\u662f1\uff0c2\uff0c3 // \u4e0d\u7ba1\u662f\u8c01\u90fd\u6ca1\u6709\u5fc5\u8981\u62c6\uff0c\u8d8a\u62c6\u8d8a\u5c0f\uff0c\u76f4\u63a5\u4e58\u4e0a\u5373\u53ef return ( maxProduct * n % mod ). toInt () } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14-2/#3","text":"https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/ https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/solution/javatan-xin-si-lu-jiang-jie-by-henrylee4/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/","text":"1. \u95ee\u9898 \u00b6 \u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210\u6574\u6570\u957f\u5ea6\u7684 m \u6bb5\uff08m\u3001n\u90fd\u662f\u6574\u6570\uff0cn>1\u5e76\u4e14m>1\uff09\uff0c\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0],k[1]...k[m-1] \u3002\u8bf7\u95ee k[0] k[1] ...*k[m-1] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f\u4f8b\u5982\uff0c\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u662f18\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36 \u63d0\u793a\uff1a - 2 <= n <= 58 2. \u89e3\u6cd5 - \u52a8\u6001\u89c4\u5212 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) 2.1 Java \u00b6 class Solution { public int cuttingRope ( int n ) { // \u8fb9\u754c\u503c if ( n < 2 ) return 0 ; else if ( n == 2 ) return 1 ; else if ( n == 3 ) return 2 ; // \u72b6\u6001\u6570\u7ec4 // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // \u7279\u6b8a\u5904\u7406\uff1a\u5982\u679c\u67d0\u4e2a\u957f\u5ea6\u7684\u7ef3\u5b50\uff0c\u526a\u4e86\u4e00\u4e0b\u4e4b\u540e\uff0c\u5176\u4e2d\u4e00\u6bb5\u7684\u957f\u5ea6\u5728[0,3]\u7684\u533a\u95f4\u5185\uff0c\u5c31\u4e0d\u8981\u518d\u526a\u8fd9\u4e00\u6bb5\u4e86 // \u56e0\u4e3a\u526a\u4e86\u4e4b\u540e\uff0c\u4e58\u79ef\u4f1a\u53d8\u5c0f\uff0c\u800cres[i]\u662f\u957f\u5ea6\u4e3ai\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef // \u6240\u4ee5dp[0],dp[1],dp[2],dp[3]\u8981\u5355\u72ec\u5904\u7406 int [] dp = new int [ n + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; dp [ 2 ] = 2 ; dp [ 3 ] = 3 ; // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // dp[n] = max(dp[j] * dp[n-j]) \u5176\u4e2dj\u7684\u8303\u56f4\u4e3a\uff1a[1,n-1] for ( int i = 4 ; i <= n ; i ++ ) { // \u5f53\u524d\u7ef3\u5b50\u957f\u5ea6\u4e3ai // \u4e58\u79ef\u7684\u6700\u5927\u503c\u2193 int maxValue = 0 ; // j\u4ece1\u5f00\u59cb\u662f\u56e0\u4e3a\u526a\u4e00\u5200\u5b50\u4e0b\u53bb\u957f\u5ea6\u6700\u5c11\u4e3a1 // j\u6700\u5927\u4e3ai\u56e0\u4e3a\u5f53\u524d\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3ai // \u8fd9\u91cc\u7684\u5faa\u73af\u6761\u4ef6\u53ef\u4ee5\u6539\u4e3aj<=i/2\uff0c\u56e0\u4e3ai/2\u4e4b\u540e\u7b97\u51fa\u6765\u7684\u5c31\u662f\u91cd\u590d\u7684\u4e58\u79ef\u4e86\uff0c\u5f53n\u7279\u522b\u7279\u522b\u5927\u7684\u65f6\u5019\uff0c\u53ea\u7b97\u5230i/2\u53ef\u4ee5\u8282\u7701\u65f6\u95f4 for ( int j = 1 ; j <= i ; j ++ ) { // \u5f53\u524d\u4e58\u79ef int product = dp [ j ] * dp [ i - j ] ; if ( product > maxValue ) maxValue = product ; } // \u628a\u6700\u5927\u503c\u5b58\u5165dp\u6570\u7ec4 dp [ i ] = maxValue ; } // \u8fd4\u56de\u7ed3\u679c return dp [ n ] ; } } 2.2 Kotlin \u00b6 class Solution { fun cuttingRope ( n : Int ): Int { // \u8fb9\u754c\u503c if ( n < 2 ) return 0 else if ( n == 2 ) return 1 else if ( n == 3 ) return 2 // \u72b6\u6001\u6570\u7ec4 // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // \u7279\u6b8a\u5904\u7406\uff1a\u5982\u679c\u67d0\u4e2a\u957f\u5ea6\u7684\u7ef3\u5b50\uff0c\u526a\u4e86\u4e00\u4e0b\u4e4b\u540e\uff0c\u5176\u4e2d\u4e00\u6bb5\u7684\u957f\u5ea6\u5728[0,3]\u7684\u533a\u95f4\u5185\uff0c\u5c31\u4e0d\u8981\u518d\u526a\u8fd9\u4e00\u6bb5\u4e86 // \u56e0\u4e3a\u526a\u4e86\u4e4b\u540e\uff0c\u4e58\u79ef\u4f1a\u53d8\u5c0f\uff0c\u800cres[i]\u662f\u957f\u5ea6\u4e3ai\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef // \u6240\u4ee5dp[0],dp[1],dp[2],dp[3]\u8981\u5355\u72ec\u5904\u7406 val dp = IntArray ( n + 1 ) dp [ 0 ] = 0 dp [ 1 ] = 1 dp [ 2 ] = 2 dp [ 3 ] = 3 // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // dp[n] = max(dp[j] * dp[n-j]) \u5176\u4e2dj\u7684\u8303\u56f4\u4e3a\uff1a[1,n-1] for ( i in 4. . n ) { // \u5f53\u524d\u7ef3\u5b50\u957f\u5ea6\u4e3ai // \u4e58\u79ef\u7684\u6700\u5927\u503c\u2193 var maxValue = 0 // j\u4ece1\u5f00\u59cb\u662f\u56e0\u4e3a\u526a\u4e00\u5200\u5b50\u4e0b\u53bb\u957f\u5ea6\u6700\u5c11\u4e3a1 // j\u6700\u5927\u4e3ai\u56e0\u4e3a\u5f53\u524d\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3ai // \u8fd9\u91cc\u7684\u5faa\u73af\u6761\u4ef6\u53ef\u4ee5\u6539\u4e3aj<=i/2\uff0c\u56e0\u4e3ai/2\u4e4b\u540e\u7b97\u51fa\u6765\u7684\u5c31\u662f\u91cd\u590d\u7684\u4e58\u79ef\u4e86\uff0c\u5f53n\u7279\u522b\u7279\u522b\u5927\u7684\u65f6\u5019\uff0c\u53ea\u7b97\u5230i/2\u53ef\u4ee5\u8282\u7701\u65f6\u95f4 for ( j in 1. . i ) { // \u5f53\u524d\u4e58\u79ef val product = dp [ j ] * dp [ i - j ] if ( product > maxValue ) maxValue = product } // \u628a\u6700\u5927\u503c\u5b58\u5165dp\u6570\u7ec4 dp [ i ] = maxValue } // \u8fd4\u56de\u7ed3\u679c return dp [ n ] } } 3. \u89e3\u6cd5 - \u8d2a\u5fc3 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) 3.1 Java \u00b6 // \u8d2a\u5fc3\u7b97\u6cd5 class Solution { public int cuttingRope ( int n ) { // \u6309\u7167\u5982\u4e0b\u7b56\u7565\u6765\u526a\u7ef3\u5b50\uff1a // 1. \u5f53 n>=5 \u65f6 \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50 // 2. \u5f53\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u4e3a4\u65f6\uff0c\u628a\u7ef3\u5b50\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50 // \u8bc1\u660e\u8be5\u601d\u8def\u7684\u6b63\u786e\u6027\uff1a // 1. \u9996\u5148\u5f53 n>=5 \u65f6\uff0c\u53ef\u4ee5\u8bc1\u660e 2(n-2)>n \u4e14 3(n-3)>n\u3002 // \u4e5f\u5c31\u662f\u8bf4\u5f53\u7ef3\u5b50\u5269\u4e0b\u7684\u957f\u5ea6\u5927\u4e8e\u6216\u8005\u7b49\u4e8e5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u526a\u6210\u957f\u5ea6\u4e3a3\u6216\u80052\u7684\u7ef3\u5b50\u6bb5 // \u53e6\u5916 n>=5 \u65f6 3(n-3)>=2(n-2)\uff0c\u6240\u4ee5\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u591a\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // 2. \u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3a4\uff0c\u7531\u4e8e2x2>1x3\uff0c\u6240\u4ee5\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6bd4\u8f83\u597d // \u51e0\u4e2a\u8fb9\u754c\u503c if ( n < 2 ) return 0 ; if ( n == 2 ) return 1 ; if ( n == 3 ) return 2 ; // \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // numOf3 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6570\u91cf int numOf3 = n / 3 ; // \u5f53\u7ef3\u5b50\u6700\u540e\u5269\u4e0b\u7684\u7a0b\u5ea6\u4e3a4\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u518d\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // \u6b64\u65f6\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\uff0c\u56e0\u4e3a2x2 > 3x1 // \u5982\u679cn\u51cf\u53bb\u6240\u6709\u76843\u5269\u4e0b\u4e861\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a3\u53ef\u4ee5\u548c\u8fd9\u4e2a1\u52a0\u8d77\u6765\u7b49\u4e8e4\uff0c\u8fd9\u4e2a4\u53ef\u4ee5\u62c6\u62102\u548c2\uff0c\u4e8e\u662f3\u7684\u6570\u91cf\u5c31\u51cf\u4e00\u3002 if ( n - 3 * numOf3 == 1 ) numOf3 -= 1 ; // numsOf2 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6570\u91cf int numOf2 = ( n - numOf3 * 3 ) / 2 ; // \u6700\u5927\u4e58\u79ef double maxProduct = Math . pow ( 3 , numOf3 ) * Math . pow ( 2 , numOf2 ); return ( int ) maxProduct ; } } 3.2 Kotlin \u00b6 // \u8d2a\u5fc3\u7b97\u6cd5 class Solution { fun cuttingRope ( n : Int ): Int { // \u6309\u7167\u5982\u4e0b\u7b56\u7565\u6765\u526a\u7ef3\u5b50\uff1a // 1. \u5f53 n>=5 \u65f6 \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50 // 2. \u5f53\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u4e3a4\u65f6\uff0c\u628a\u7ef3\u5b50\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50 // \u8bc1\u660e\u8be5\u601d\u8def\u7684\u6b63\u786e\u6027\uff1a // 1. \u9996\u5148\u5f53 n>=5 \u65f6\uff0c\u53ef\u4ee5\u8bc1\u660e 2(n-2)>n \u4e14 3(n-3)>n\u3002 // \u4e5f\u5c31\u662f\u8bf4\u5f53\u7ef3\u5b50\u5269\u4e0b\u7684\u957f\u5ea6\u5927\u4e8e\u6216\u8005\u7b49\u4e8e5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u526a\u6210\u957f\u5ea6\u4e3a3\u6216\u80052\u7684\u7ef3\u5b50\u6bb5 // \u53e6\u5916 n>=5 \u65f6 3(n-3)>=2(n-2)\uff0c\u6240\u4ee5\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u591a\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // 2. \u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3a4\uff0c\u7531\u4e8e2x2>1x3\uff0c\u6240\u4ee5\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6bd4\u8f83\u597d // \u51e0\u4e2a\u8fb9\u754c\u503c if ( n < 2 ) return 0 if ( n == 2 ) return 1 if ( n == 3 ) return 2 // \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // numOf3 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6570\u91cf var numOf3 = n / 3 // \u5f53\u7ef3\u5b50\u6700\u540e\u5269\u4e0b\u7684\u7a0b\u5ea6\u4e3a4\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u518d\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // \u6b64\u65f6\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\uff0c\u56e0\u4e3a2x2 > 3x1 // \u5982\u679cn\u51cf\u53bb\u6240\u6709\u76843\u5269\u4e0b\u4e861\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a3\u53ef\u4ee5\u548c\u8fd9\u4e2a1\u52a0\u8d77\u6765\u7b49\u4e8e4\uff0c\u8fd9\u4e2a4\u53ef\u4ee5\u62c6\u62102\u548c2\uff0c\u4e8e\u662f3\u7684\u6570\u91cf\u5c31\u51cf\u4e00\u3002 if ( n - 3 * numOf3 == 1 ) numOf3 -= 1 // numsOf2 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6570\u91cf val numOf2 = ( n - numOf3 * 3 ) / 2 // \u6700\u5927\u4e58\u79ef val maxProduct = Math . pow ( 3.0 , numOf3 . toDouble ()) * Math . pow ( 2.0 , numOf2 . toDouble ()) return maxProduct . toInt () } } 4. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/jian-sheng-zi-lcof/ https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/zi-jie-ti-ku-jian-14-i-zhong-deng-jian-sheng-zi-1s/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"LCOF 14-I. \u526a\u7ef3\u5b50"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#1","text":"\u7ed9\u4f60\u4e00\u6839\u957f\u5ea6\u4e3a n \u7684\u7ef3\u5b50\uff0c\u8bf7\u628a\u7ef3\u5b50\u526a\u6210\u6574\u6570\u957f\u5ea6\u7684 m \u6bb5\uff08m\u3001n\u90fd\u662f\u6574\u6570\uff0cn>1\u5e76\u4e14m>1\uff09\uff0c\u6bcf\u6bb5\u7ef3\u5b50\u7684\u957f\u5ea6\u8bb0\u4e3a k[0],k[1]...k[m-1] \u3002\u8bf7\u95ee k[0] k[1] ...*k[m-1] \u53ef\u80fd\u7684\u6700\u5927\u4e58\u79ef\u662f\u591a\u5c11\uff1f\u4f8b\u5982\uff0c\u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u662f8\u65f6\uff0c\u6211\u4eec\u628a\u5b83\u526a\u6210\u957f\u5ea6\u5206\u522b\u4e3a2\u30013\u30013\u7684\u4e09\u6bb5\uff0c\u6b64\u65f6\u5f97\u5230\u7684\u6700\u5927\u4e58\u79ef\u662f18\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 \u8f93\u51fa: 1 \u89e3\u91ca: 2 = 1 + 1, 1 \u00d7 1 = 1 \u793a\u4f8b 2: \u8f93\u5165: 10 \u8f93\u51fa: 36 \u89e3\u91ca: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36 \u63d0\u793a\uff1a - 2 <= n <= 58","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#2-","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)","title":"2. \u89e3\u6cd5 - \u52a8\u6001\u89c4\u5212"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#21-java","text":"class Solution { public int cuttingRope ( int n ) { // \u8fb9\u754c\u503c if ( n < 2 ) return 0 ; else if ( n == 2 ) return 1 ; else if ( n == 3 ) return 2 ; // \u72b6\u6001\u6570\u7ec4 // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // \u7279\u6b8a\u5904\u7406\uff1a\u5982\u679c\u67d0\u4e2a\u957f\u5ea6\u7684\u7ef3\u5b50\uff0c\u526a\u4e86\u4e00\u4e0b\u4e4b\u540e\uff0c\u5176\u4e2d\u4e00\u6bb5\u7684\u957f\u5ea6\u5728[0,3]\u7684\u533a\u95f4\u5185\uff0c\u5c31\u4e0d\u8981\u518d\u526a\u8fd9\u4e00\u6bb5\u4e86 // \u56e0\u4e3a\u526a\u4e86\u4e4b\u540e\uff0c\u4e58\u79ef\u4f1a\u53d8\u5c0f\uff0c\u800cres[i]\u662f\u957f\u5ea6\u4e3ai\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef // \u6240\u4ee5dp[0],dp[1],dp[2],dp[3]\u8981\u5355\u72ec\u5904\u7406 int [] dp = new int [ n + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = 1 ; dp [ 2 ] = 2 ; dp [ 3 ] = 3 ; // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // dp[n] = max(dp[j] * dp[n-j]) \u5176\u4e2dj\u7684\u8303\u56f4\u4e3a\uff1a[1,n-1] for ( int i = 4 ; i <= n ; i ++ ) { // \u5f53\u524d\u7ef3\u5b50\u957f\u5ea6\u4e3ai // \u4e58\u79ef\u7684\u6700\u5927\u503c\u2193 int maxValue = 0 ; // j\u4ece1\u5f00\u59cb\u662f\u56e0\u4e3a\u526a\u4e00\u5200\u5b50\u4e0b\u53bb\u957f\u5ea6\u6700\u5c11\u4e3a1 // j\u6700\u5927\u4e3ai\u56e0\u4e3a\u5f53\u524d\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3ai // \u8fd9\u91cc\u7684\u5faa\u73af\u6761\u4ef6\u53ef\u4ee5\u6539\u4e3aj<=i/2\uff0c\u56e0\u4e3ai/2\u4e4b\u540e\u7b97\u51fa\u6765\u7684\u5c31\u662f\u91cd\u590d\u7684\u4e58\u79ef\u4e86\uff0c\u5f53n\u7279\u522b\u7279\u522b\u5927\u7684\u65f6\u5019\uff0c\u53ea\u7b97\u5230i/2\u53ef\u4ee5\u8282\u7701\u65f6\u95f4 for ( int j = 1 ; j <= i ; j ++ ) { // \u5f53\u524d\u4e58\u79ef int product = dp [ j ] * dp [ i - j ] ; if ( product > maxValue ) maxValue = product ; } // \u628a\u6700\u5927\u503c\u5b58\u5165dp\u6570\u7ec4 dp [ i ] = maxValue ; } // \u8fd4\u56de\u7ed3\u679c return dp [ n ] ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#22-kotlin","text":"class Solution { fun cuttingRope ( n : Int ): Int { // \u8fb9\u754c\u503c if ( n < 2 ) return 0 else if ( n == 2 ) return 1 else if ( n == 3 ) return 2 // \u72b6\u6001\u6570\u7ec4 // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // \u7279\u6b8a\u5904\u7406\uff1a\u5982\u679c\u67d0\u4e2a\u957f\u5ea6\u7684\u7ef3\u5b50\uff0c\u526a\u4e86\u4e00\u4e0b\u4e4b\u540e\uff0c\u5176\u4e2d\u4e00\u6bb5\u7684\u957f\u5ea6\u5728[0,3]\u7684\u533a\u95f4\u5185\uff0c\u5c31\u4e0d\u8981\u518d\u526a\u8fd9\u4e00\u6bb5\u4e86 // \u56e0\u4e3a\u526a\u4e86\u4e4b\u540e\uff0c\u4e58\u79ef\u4f1a\u53d8\u5c0f\uff0c\u800cres[i]\u662f\u957f\u5ea6\u4e3ai\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u540e\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef // \u6240\u4ee5dp[0],dp[1],dp[2],dp[3]\u8981\u5355\u72ec\u5904\u7406 val dp = IntArray ( n + 1 ) dp [ 0 ] = 0 dp [ 1 ] = 1 dp [ 2 ] = 2 dp [ 3 ] = 3 // \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b // dp[n]\u8868\u793a\u628a\u957f\u5ea6\u4e3an\u7684\u7ef3\u5b50\u526a\u6210\u82e5\u5e72\u6bb5\u4e4b\u540e\u5404\u6bb5\u957f\u5ea6\u4e58\u79ef\u7684\u6700\u5927\u503c // dp[n] = max(dp[j] * dp[n-j]) \u5176\u4e2dj\u7684\u8303\u56f4\u4e3a\uff1a[1,n-1] for ( i in 4. . n ) { // \u5f53\u524d\u7ef3\u5b50\u957f\u5ea6\u4e3ai // \u4e58\u79ef\u7684\u6700\u5927\u503c\u2193 var maxValue = 0 // j\u4ece1\u5f00\u59cb\u662f\u56e0\u4e3a\u526a\u4e00\u5200\u5b50\u4e0b\u53bb\u957f\u5ea6\u6700\u5c11\u4e3a1 // j\u6700\u5927\u4e3ai\u56e0\u4e3a\u5f53\u524d\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3ai // \u8fd9\u91cc\u7684\u5faa\u73af\u6761\u4ef6\u53ef\u4ee5\u6539\u4e3aj<=i/2\uff0c\u56e0\u4e3ai/2\u4e4b\u540e\u7b97\u51fa\u6765\u7684\u5c31\u662f\u91cd\u590d\u7684\u4e58\u79ef\u4e86\uff0c\u5f53n\u7279\u522b\u7279\u522b\u5927\u7684\u65f6\u5019\uff0c\u53ea\u7b97\u5230i/2\u53ef\u4ee5\u8282\u7701\u65f6\u95f4 for ( j in 1. . i ) { // \u5f53\u524d\u4e58\u79ef val product = dp [ j ] * dp [ i - j ] if ( product > maxValue ) maxValue = product } // \u628a\u6700\u5927\u503c\u5b58\u5165dp\u6570\u7ec4 dp [ i ] = maxValue } // \u8fd4\u56de\u7ed3\u679c return dp [ n ] } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#3-","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(1) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)","title":"3. \u89e3\u6cd5 - \u8d2a\u5fc3"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#31-java","text":"// \u8d2a\u5fc3\u7b97\u6cd5 class Solution { public int cuttingRope ( int n ) { // \u6309\u7167\u5982\u4e0b\u7b56\u7565\u6765\u526a\u7ef3\u5b50\uff1a // 1. \u5f53 n>=5 \u65f6 \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50 // 2. \u5f53\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u4e3a4\u65f6\uff0c\u628a\u7ef3\u5b50\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50 // \u8bc1\u660e\u8be5\u601d\u8def\u7684\u6b63\u786e\u6027\uff1a // 1. \u9996\u5148\u5f53 n>=5 \u65f6\uff0c\u53ef\u4ee5\u8bc1\u660e 2(n-2)>n \u4e14 3(n-3)>n\u3002 // \u4e5f\u5c31\u662f\u8bf4\u5f53\u7ef3\u5b50\u5269\u4e0b\u7684\u957f\u5ea6\u5927\u4e8e\u6216\u8005\u7b49\u4e8e5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u526a\u6210\u957f\u5ea6\u4e3a3\u6216\u80052\u7684\u7ef3\u5b50\u6bb5 // \u53e6\u5916 n>=5 \u65f6 3(n-3)>=2(n-2)\uff0c\u6240\u4ee5\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u591a\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // 2. \u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3a4\uff0c\u7531\u4e8e2x2>1x3\uff0c\u6240\u4ee5\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6bd4\u8f83\u597d // \u51e0\u4e2a\u8fb9\u754c\u503c if ( n < 2 ) return 0 ; if ( n == 2 ) return 1 ; if ( n == 3 ) return 2 ; // \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // numOf3 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6570\u91cf int numOf3 = n / 3 ; // \u5f53\u7ef3\u5b50\u6700\u540e\u5269\u4e0b\u7684\u7a0b\u5ea6\u4e3a4\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u518d\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // \u6b64\u65f6\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\uff0c\u56e0\u4e3a2x2 > 3x1 // \u5982\u679cn\u51cf\u53bb\u6240\u6709\u76843\u5269\u4e0b\u4e861\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a3\u53ef\u4ee5\u548c\u8fd9\u4e2a1\u52a0\u8d77\u6765\u7b49\u4e8e4\uff0c\u8fd9\u4e2a4\u53ef\u4ee5\u62c6\u62102\u548c2\uff0c\u4e8e\u662f3\u7684\u6570\u91cf\u5c31\u51cf\u4e00\u3002 if ( n - 3 * numOf3 == 1 ) numOf3 -= 1 ; // numsOf2 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6570\u91cf int numOf2 = ( n - numOf3 * 3 ) / 2 ; // \u6700\u5927\u4e58\u79ef double maxProduct = Math . pow ( 3 , numOf3 ) * Math . pow ( 2 , numOf2 ); return ( int ) maxProduct ; } }","title":"3.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#32-kotlin","text":"// \u8d2a\u5fc3\u7b97\u6cd5 class Solution { fun cuttingRope ( n : Int ): Int { // \u6309\u7167\u5982\u4e0b\u7b56\u7565\u6765\u526a\u7ef3\u5b50\uff1a // 1. \u5f53 n>=5 \u65f6 \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50 // 2. \u5f53\u5269\u4e0b\u7684\u7ef3\u5b50\u957f\u5ea6\u4e3a4\u65f6\uff0c\u628a\u7ef3\u5b50\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50 // \u8bc1\u660e\u8be5\u601d\u8def\u7684\u6b63\u786e\u6027\uff1a // 1. \u9996\u5148\u5f53 n>=5 \u65f6\uff0c\u53ef\u4ee5\u8bc1\u660e 2(n-2)>n \u4e14 3(n-3)>n\u3002 // \u4e5f\u5c31\u662f\u8bf4\u5f53\u7ef3\u5b50\u5269\u4e0b\u7684\u957f\u5ea6\u5927\u4e8e\u6216\u8005\u7b49\u4e8e5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u628a\u5b83\u526a\u6210\u957f\u5ea6\u4e3a3\u6216\u80052\u7684\u7ef3\u5b50\u6bb5 // \u53e6\u5916 n>=5 \u65f6 3(n-3)>=2(n-2)\uff0c\u6240\u4ee5\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u591a\u526a\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // 2. \u5f53\u7ef3\u5b50\u7684\u957f\u5ea6\u4e3a4\uff0c\u7531\u4e8e2x2>1x3\uff0c\u6240\u4ee5\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6bd4\u8f83\u597d // \u51e0\u4e2a\u8fb9\u754c\u503c if ( n < 2 ) return 0 if ( n == 2 ) return 1 if ( n == 3 ) return 2 // \u5c3d\u53ef\u80fd\u591a\u5730\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // numOf3 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6570\u91cf var numOf3 = n / 3 // \u5f53\u7ef3\u5b50\u6700\u540e\u5269\u4e0b\u7684\u7a0b\u5ea6\u4e3a4\u7684\u65f6\u5019\uff0c\u4e0d\u80fd\u518d\u526a\u53bb\u957f\u5ea6\u4e3a3\u7684\u7ef3\u5b50\u6bb5 // \u6b64\u65f6\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u526a\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\uff0c\u56e0\u4e3a2x2 > 3x1 // \u5982\u679cn\u51cf\u53bb\u6240\u6709\u76843\u5269\u4e0b\u4e861\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a3\u53ef\u4ee5\u548c\u8fd9\u4e2a1\u52a0\u8d77\u6765\u7b49\u4e8e4\uff0c\u8fd9\u4e2a4\u53ef\u4ee5\u62c6\u62102\u548c2\uff0c\u4e8e\u662f3\u7684\u6570\u91cf\u5c31\u51cf\u4e00\u3002 if ( n - 3 * numOf3 == 1 ) numOf3 -= 1 // numsOf2 \u662f\u7ef3\u5b50\u6bb5\u957f\u5ea6\u4e3a2\u7684\u7ef3\u5b50\u6570\u91cf val numOf2 = ( n - numOf3 * 3 ) / 2 // \u6700\u5927\u4e58\u79ef val maxProduct = Math . pow ( 3.0 , numOf3 . toDouble ()) * Math . pow ( 2.0 , numOf2 . toDouble ()) return maxProduct . toInt () } }","title":"3.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-14/#4","text":"https://leetcode-cn.com/problems/jian-sheng-zi-lcof/ https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/zi-jie-ti-ku-jian-14-i-zhong-deng-jian-sheng-zi-1s/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"4. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/","text":"1. \u95ee\u9898 \u00b6 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\u3002\u4f8b\u5982\uff0c\u628a 9 \u8868\u793a\u6210\u4e8c\u8fdb\u5236\u662f 1001\uff0c\u6709 2 \u4f4d\u662f 1\u3002\u56e0\u6b64\uff0c\u5982\u679c\u8f93\u5165 9\uff0c\u5219\u8be5\u51fd\u6570\u8f93\u51fa 2\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a00000000000000000000000000001011 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 00000000000000000000000000001011 \u4e2d\uff0c\u5171\u6709\u4e09\u4f4d\u4e3a '1'\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a00000000000000000000000010000000 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 00000000000000000000000010000000 \u4e2d\uff0c\u5171\u6709\u4e00\u4f4d\u4e3a '1'\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a11111111111111111111111111111101 \u8f93\u51fa\uff1a31 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 11111111111111111111111111111101 \u4e2d\uff0c\u5171\u6709 31 \u4f4d\u4e3a '1'\u3002 2. \u89e3\u6cd5\u2460 - \u9010\u4f4d\u5224\u65ad \u00b6 2.1 Java \u00b6 public class Solution { public int hammingWeight ( int n ) { /** * \u6839\u636e\u4f4d\u8fd0\u7b97\u7684\u5b9a\u4e49\uff1a * 1. \u5982\u679cn&1=0\uff0c\u90a3\u4e48n\u4e8c\u8fdb\u5236\u7684\u6700\u53f3\u4f4d\u662f0 * 2. \u5982\u679cn&1=1\uff0c\u90a3\u4e48n\u4e8c\u8fdb\u5236\u7684\u6700\u5de6\u4f4d\u662f1 */ // n\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 int num = 0 ; /** * \u672c\u9898\u4e2dn\u4e3a\u65e0\u7b26\u53f7\u6570\uff0c\u6240\u4ee5\u53f3\u79fb\u65f6\u4f7f\u7528\u65e0\u7b26\u53f7\u53f3\u79fb * \u65e0\u7b26\u53f7\u53f3\u79fb\uff1a\u4e0d\u7ba1\u7b26\u53f7\u4f4d\uff0c\u53f3\u79fb\u65f6\u5f80\u6700\u5de6\u8fb9\u88650\u5373\u53ef */ while ( n != 0 ) { // \u5982\u679cn\u7684\u6700\u53f3\u8fb9\u662f1\uff0c\u90a3\u4e48n&1=1\uff0c\u6240\u4ee51\u7684\u4e2a\u6570\u5c31\u52a0\u4e00 // \u5982\u679cn\u7684\u6700\u53f3\u8fb9\u662f0\uff0c\u90a3\u4e48n&1=0\uff0c\u6240\u4ee51\u4e2a\u4e2a\u6570\u4e0d\u53d8 num += n & 1 ; // \u6bcf\u6b21\u5224\u65ad\u5b8c\u6700\u53f3\u4f4d\u6570\u5b57\u5c31\u5c06n\u53f3\u79fb\u4e00\u4f4d n >>>= 1 ; } return num ; } } 3. \u89e3\u6cd5\u2461 - \u4f7f\u7528n&(n\u22121) \u00b6 3.1 Java \u00b6 public class Solution { // you need to treat n as an unsigned value public int hammingWeight ( int n ) { // \u5229\u7528 n&(n\u22121) // n = 100100100000 // n-1 = 100100011111 // n&(n-1) = 100100000000 // \u6240\u4ee5n\u548cn-1\u7684&\u64cd\u4f5c\u4f1a\u6d88\u53bbn\u6700\u53f3\u8fb9\u76841 // \u53ea\u8981\u7b97\u51fan\u53d8\u4e3a0\u603b\u5171\u505a\u4e86\u51e0\u6b21&\u64cd\u4f5c\u5373\u53ef\u6c42\u89e31\u7684\u4e2a\u6570 int num = 0 ; while ( n != 0 ) { n = n & ( n - 1 ); num ++ ; } return num ; } } 3.2 \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(M) - n&(n\u22121)\u64cd\u4f5c\u53ea\u6709\u3010\u51cf\u6cd5\u3011\u548c\u3010\u4e0e\u3011\u8fd0\u7b97\uff0c\u5360\u7528O(1)\uff1b\u8bbeM\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57n\u4e2d1\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u9700\u8981\u5faa\u73afM\u6b21\uff08\u6bcf\u6b21\u6d88\u53bb\u4e00\u4e2a1\uff09\uff0c\u6240\u4ee5\u662fO(M)\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) - \u53d8\u91cfans\u5360\u7528\u5e38\u6570\u7a7a\u95f4\u3002 4. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/ https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/solution/mian-shi-ti-15-er-jin-zhi-zhong-1de-ge-shu-wei-yun/","title":"LCOF 15. \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#1","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570\u3002\u4f8b\u5982\uff0c\u628a 9 \u8868\u793a\u6210\u4e8c\u8fdb\u5236\u662f 1001\uff0c\u6709 2 \u4f4d\u662f 1\u3002\u56e0\u6b64\uff0c\u5982\u679c\u8f93\u5165 9\uff0c\u5219\u8be5\u51fd\u6570\u8f93\u51fa 2\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a00000000000000000000000000001011 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 00000000000000000000000000001011 \u4e2d\uff0c\u5171\u6709\u4e09\u4f4d\u4e3a '1'\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a00000000000000000000000010000000 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 00000000000000000000000010000000 \u4e2d\uff0c\u5171\u6709\u4e00\u4f4d\u4e3a '1'\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a11111111111111111111111111111101 \u8f93\u51fa\uff1a31 \u89e3\u91ca\uff1a\u8f93\u5165\u7684\u4e8c\u8fdb\u5236\u4e32 11111111111111111111111111111101 \u4e2d\uff0c\u5171\u6709 31 \u4f4d\u4e3a '1'\u3002","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#2-1-","text":"","title":"2. \u89e3\u6cd5\u2460 - \u9010\u4f4d\u5224\u65ad"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#21-java","text":"public class Solution { public int hammingWeight ( int n ) { /** * \u6839\u636e\u4f4d\u8fd0\u7b97\u7684\u5b9a\u4e49\uff1a * 1. \u5982\u679cn&1=0\uff0c\u90a3\u4e48n\u4e8c\u8fdb\u5236\u7684\u6700\u53f3\u4f4d\u662f0 * 2. \u5982\u679cn&1=1\uff0c\u90a3\u4e48n\u4e8c\u8fdb\u5236\u7684\u6700\u5de6\u4f4d\u662f1 */ // n\u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570 int num = 0 ; /** * \u672c\u9898\u4e2dn\u4e3a\u65e0\u7b26\u53f7\u6570\uff0c\u6240\u4ee5\u53f3\u79fb\u65f6\u4f7f\u7528\u65e0\u7b26\u53f7\u53f3\u79fb * \u65e0\u7b26\u53f7\u53f3\u79fb\uff1a\u4e0d\u7ba1\u7b26\u53f7\u4f4d\uff0c\u53f3\u79fb\u65f6\u5f80\u6700\u5de6\u8fb9\u88650\u5373\u53ef */ while ( n != 0 ) { // \u5982\u679cn\u7684\u6700\u53f3\u8fb9\u662f1\uff0c\u90a3\u4e48n&1=1\uff0c\u6240\u4ee51\u7684\u4e2a\u6570\u5c31\u52a0\u4e00 // \u5982\u679cn\u7684\u6700\u53f3\u8fb9\u662f0\uff0c\u90a3\u4e48n&1=0\uff0c\u6240\u4ee51\u4e2a\u4e2a\u6570\u4e0d\u53d8 num += n & 1 ; // \u6bcf\u6b21\u5224\u65ad\u5b8c\u6700\u53f3\u4f4d\u6570\u5b57\u5c31\u5c06n\u53f3\u79fb\u4e00\u4f4d n >>>= 1 ; } return num ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#3-2-nn1","text":"","title":"3. \u89e3\u6cd5\u2461 - \u4f7f\u7528n&amp;(n\u22121)"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#31-java","text":"public class Solution { // you need to treat n as an unsigned value public int hammingWeight ( int n ) { // \u5229\u7528 n&(n\u22121) // n = 100100100000 // n-1 = 100100011111 // n&(n-1) = 100100000000 // \u6240\u4ee5n\u548cn-1\u7684&\u64cd\u4f5c\u4f1a\u6d88\u53bbn\u6700\u53f3\u8fb9\u76841 // \u53ea\u8981\u7b97\u51fan\u53d8\u4e3a0\u603b\u5171\u505a\u4e86\u51e0\u6b21&\u64cd\u4f5c\u5373\u53ef\u6c42\u89e31\u7684\u4e2a\u6570 int num = 0 ; while ( n != 0 ) { n = n & ( n - 1 ); num ++ ; } return num ; } }","title":"3.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#32","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(M) - n&(n\u22121)\u64cd\u4f5c\u53ea\u6709\u3010\u51cf\u6cd5\u3011\u548c\u3010\u4e0e\u3011\u8fd0\u7b97\uff0c\u5360\u7528O(1)\uff1b\u8bbeM\u4e3a\u4e8c\u8fdb\u5236\u6570\u5b57n\u4e2d1\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u9700\u8981\u5faa\u73afM\u6b21\uff08\u6bcf\u6b21\u6d88\u53bb\u4e00\u4e2a1\uff09\uff0c\u6240\u4ee5\u662fO(M)\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) - \u53d8\u91cfans\u5360\u7528\u5e38\u6570\u7a7a\u95f4\u3002","title":"3.2 \u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-15/#4","text":"https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/ https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/solution/mian-shi-ti-15-er-jin-zhi-zhong-1de-ge-shu-wei-yun/","title":"4. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/","text":"1. \u95ee\u9898 \u00b6 \u5b9e\u73b0\u51fd\u6570double Power(double base, int exponent)\uff0c\u6c42base\u7684exponent\u6b21\u65b9\u3002\u4e0d\u5f97\u4f7f\u7528\u5e93\u51fd\u6570\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2-2 = 1/22 = 1/4 = 0.25 \u8bf4\u660e: - -100.0 < x < 100.0 - n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1]\u3002 2. \u89e3\u6cd5 - \u5206\u6cbb \u9012\u5f52 \u00b6 n \u7684\u8303\u56f4\u662f[\u22122^31, 2^31 \u2212 1]\uff0c\u5f53 n = -2^31 \u65f6\uff0c\u6267\u884c -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97\u3002 \u53ef\u4ee5\u7528\u53f3\u79fb\u8fd0\u7b97\u7b26\u4ee3\u66ff\u9664\u4ee52\uff0c\u7528\u4f4d\u4e0e\u8fd0\u7b97\u7b26\u4ee3\u66ff\u6c42\u4f59\u7b26\u53f7\uff08%\uff09\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u6bd4\u4e58\u9664\u6cd5\u53ca\u6c42\u4f59\u8fd0\u7b97\u7684\u6548\u7387\u8981\u9ad8\u5f88\u591a\u3002 2.1 Java \u00b6 // \u5206\u6cbb\u7b97\u6cd5 \u9012\u5f52 class Solution { public double myPow ( double x , int n ) { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ long N = n ; // \u4e0b\u97623\u4e2aN\u522b\u4e0d\u5c0f\u5fc3\u5199\u6210n\u5566 if ( N < 0 ) { return 1 / myPow ( x , - N ); } return myPow ( x , N ); } public double myPow ( double x , long n ) { // \u8fb9\u754c\u5904\u7406 if ( n == 0 ) return 1 ; if ( x == 1 ) return 1 ; // \u5947\u5076\u6b21\u5e42\u5206\u522b\u5904\u7406 // \u5076\u6b21\u5e42 if ( n % 2 == 0 ) { // \u5206\u6cbb - \u5206 double square = myPow ( x , n / 2 ); // \u5206\u6cbb - \u5408 return square * square ; } else { // \u5947\u6b21\u5e42 // \u5206\u6cbb - \u5206 double square = myPow ( x , ( n - 1 ) / 2 ); // \u5206\u6cbb - \u5408 return square * square * x ; } } } 2.2 Kotlin \u00b6 // \u5206\u6cbb\u7b97\u6cd5 \u9012\u5f52 class Solution { fun myPow ( x : Double , n : Int ): Double { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ val N = n . toLong () // \u4e0b\u97623\u4e2aN\u522b\u4e0d\u5c0f\u5fc3\u5199\u6210n\u5566 return if ( N < 0 ) { 1 / myPow ( x , - N ) } else myPow ( x , N ) } fun myPow ( x : Double , n : Long ): Double { // \u8fb9\u754c\u5904\u7406 if ( n == 0L ) return 1.0 if ( x == 1.0 ) return 1.0 // \u5947\u5076\u6b21\u5e42\u5206\u522b\u5904\u7406 // \u5076\u6b21\u5e42 if ( n % 2 == 0L ) { // \u5206\u6cbb - \u5206 val square = myPow ( x , n / 2 ) // \u5206\u6cbb - \u5408 return square * square } else { // \u5947\u6b21\u5e42 // \u5206\u6cbb - \u5206 val square = myPow ( x , ( n - 1 ) / 2 ) // \u5206\u6cbb - \u5408 return square * square * x } } } 3. \u89e3\u6cd5 - \u5feb\u901f\u5e42 \u00b6 n \u7684\u8303\u56f4\u662f[\u22122^31, 2^31 \u2212 1]\uff0c\u5f53 n = -2^31 \u65f6\uff0c\u6267\u884c -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06n\u8f6c\u6362\u6210long\u7c7b\u578b\u6765\u8ba1\u7b97\u3002 3.1 Java \u00b6 class Solution { public double myPow ( double x , int n ) { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ long N = n ; if ( N < 0 ) { x = 1 / x ; N = - N ; } /** * \u628a\u6307\u6570 n \u770b\u6210\u4e8c\u8fdb\u5236\u6570\uff0c\u6bd4\u5982 11 \u7684\u4e8c\u8fdb\u5236\u4e3a 1011 * 11 = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 * x^11 = x^(2^3) * x^(2^1) * x^(2^0) */ double ans = 1 ; // \u6307\u6570\u4e0d\u4e3a0 while ( N > 0 ) { // \u5c06N\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb // \u5982\u679c\u5f53\u524d\u4f4d\u7684\u4e8c\u8fdb\u5236\u4e3a1\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7ed9 ans \u4e58\u4e0a\u5f53\u524d\u7684 x if ( N % 2 == 1 ) { ans *= x ; } // x\u6bcf\u4e00\u8f6e\u5faa\u73af\u90fd\u8981\u901a\u8fc7\u7d2f\u4e58\u6765\u589e\u52a0 x *= x ; // \u5047\u8bbe x \u7684\u521d\u59cb\u503c\u4e3a3\uff0c\u90a3\u4e48x\u7684\u503c\u4e3a\uff1a3^(2^0), 3^(2^1), 3^(2^2) ... // \u89e3\u51b3\u5b8c\u5f53\u524d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5c06 N/2 \u7ee7\u7eed\u6c42\u4e0b\u4e00\u4f4d N /= 2 ; // \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u53f3\u79fb\u6765\u4ee3\u66ff\uff1aN >>= 1; } return ans ; } } 3.2 Kotlin \u00b6 class Solution { fun myPow ( x : Double , n : Int ): Double { var x = x /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ var N = n . toLong () if ( N < 0 ) { x = 1 / x N = - N } /** * \u628a\u6307\u6570 n \u770b\u6210\u4e8c\u8fdb\u5236\u6570\uff0c\u6bd4\u5982 11 \u7684\u4e8c\u8fdb\u5236\u4e3a 1011 * 11 = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 * x^11 = x^(2^3) * x^(2^1) * x^(2^0) */ var ans = 1.0 // \u6307\u6570\u4e0d\u4e3a0 while ( N > 0 ) { // \u5c06N\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb // \u5982\u679c\u5f53\u524d\u4f4d\u7684\u4e8c\u8fdb\u5236\u4e3a1\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7ed9 ans \u4e58\u4e0a\u5f53\u524d\u7684 x if ( N % 2 == 1L ) { ans *= x } // x\u6bcf\u4e00\u8f6e\u5faa\u73af\u90fd\u8981\u901a\u8fc7\u7d2f\u4e58\u6765\u589e\u52a0 x *= x // \u5047\u8bbe x \u7684\u521d\u59cb\u503c\u4e3a3\uff0c\u90a3\u4e48x\u7684\u503c\u4e3a\uff1a3^(2^0), 3^(2^1), 3^(2^2) ... // \u89e3\u51b3\u5b8c\u5f53\u524d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5c06 N/2 \u7ee7\u7eed\u6c42\u4e0b\u4e00\u4f4d N /= 2 // \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u53f3\u79fb\u6765\u4ee3\u66ff\uff1aN >>= 1 } return ans } } 4. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/solution/di-gui-xie-fa-fen-zhi-si-xiang-yu-fei-di-gui-xie-f/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"LCOF 16. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#1","text":"\u5b9e\u73b0\u51fd\u6570double Power(double base, int exponent)\uff0c\u6c42base\u7684exponent\u6b21\u65b9\u3002\u4e0d\u5f97\u4f7f\u7528\u5e93\u51fd\u6570\uff0c\u540c\u65f6\u4e0d\u9700\u8981\u8003\u8651\u5927\u6570\u95ee\u9898\u3002 \u793a\u4f8b 1: \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2: \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3: \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2-2 = 1/22 = 1/4 = 0.25 \u8bf4\u660e: - -100.0 < x < 100.0 - n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1]\u3002","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#2-","text":"n \u7684\u8303\u56f4\u662f[\u22122^31, 2^31 \u2212 1]\uff0c\u5f53 n = -2^31 \u65f6\uff0c\u6267\u884c -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97\u3002 \u53ef\u4ee5\u7528\u53f3\u79fb\u8fd0\u7b97\u7b26\u4ee3\u66ff\u9664\u4ee52\uff0c\u7528\u4f4d\u4e0e\u8fd0\u7b97\u7b26\u4ee3\u66ff\u6c42\u4f59\u7b26\u53f7\uff08%\uff09\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\uff0c\u4f4d\u8fd0\u7b97\u7684\u6548\u7387\u6bd4\u4e58\u9664\u6cd5\u53ca\u6c42\u4f59\u8fd0\u7b97\u7684\u6548\u7387\u8981\u9ad8\u5f88\u591a\u3002","title":"2. \u89e3\u6cd5 - \u5206\u6cbb \u9012\u5f52"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#21-java","text":"// \u5206\u6cbb\u7b97\u6cd5 \u9012\u5f52 class Solution { public double myPow ( double x , int n ) { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ long N = n ; // \u4e0b\u97623\u4e2aN\u522b\u4e0d\u5c0f\u5fc3\u5199\u6210n\u5566 if ( N < 0 ) { return 1 / myPow ( x , - N ); } return myPow ( x , N ); } public double myPow ( double x , long n ) { // \u8fb9\u754c\u5904\u7406 if ( n == 0 ) return 1 ; if ( x == 1 ) return 1 ; // \u5947\u5076\u6b21\u5e42\u5206\u522b\u5904\u7406 // \u5076\u6b21\u5e42 if ( n % 2 == 0 ) { // \u5206\u6cbb - \u5206 double square = myPow ( x , n / 2 ); // \u5206\u6cbb - \u5408 return square * square ; } else { // \u5947\u6b21\u5e42 // \u5206\u6cbb - \u5206 double square = myPow ( x , ( n - 1 ) / 2 ); // \u5206\u6cbb - \u5408 return square * square * x ; } } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#22-kotlin","text":"// \u5206\u6cbb\u7b97\u6cd5 \u9012\u5f52 class Solution { fun myPow ( x : Double , n : Int ): Double { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ val N = n . toLong () // \u4e0b\u97623\u4e2aN\u522b\u4e0d\u5c0f\u5fc3\u5199\u6210n\u5566 return if ( N < 0 ) { 1 / myPow ( x , - N ) } else myPow ( x , N ) } fun myPow ( x : Double , n : Long ): Double { // \u8fb9\u754c\u5904\u7406 if ( n == 0L ) return 1.0 if ( x == 1.0 ) return 1.0 // \u5947\u5076\u6b21\u5e42\u5206\u522b\u5904\u7406 // \u5076\u6b21\u5e42 if ( n % 2 == 0L ) { // \u5206\u6cbb - \u5206 val square = myPow ( x , n / 2 ) // \u5206\u6cbb - \u5408 return square * square } else { // \u5947\u6b21\u5e42 // \u5206\u6cbb - \u5206 val square = myPow ( x , ( n - 1 ) / 2 ) // \u5206\u6cbb - \u5408 return square * square * x } } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#3-","text":"n \u7684\u8303\u56f4\u662f[\u22122^31, 2^31 \u2212 1]\uff0c\u5f53 n = -2^31 \u65f6\uff0c\u6267\u884c -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06n\u8f6c\u6362\u6210long\u7c7b\u578b\u6765\u8ba1\u7b97\u3002","title":"3. \u89e3\u6cd5 - \u5feb\u901f\u5e42"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#31-java","text":"class Solution { public double myPow ( double x , int n ) { /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ long N = n ; if ( N < 0 ) { x = 1 / x ; N = - N ; } /** * \u628a\u6307\u6570 n \u770b\u6210\u4e8c\u8fdb\u5236\u6570\uff0c\u6bd4\u5982 11 \u7684\u4e8c\u8fdb\u5236\u4e3a 1011 * 11 = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 * x^11 = x^(2^3) * x^(2^1) * x^(2^0) */ double ans = 1 ; // \u6307\u6570\u4e0d\u4e3a0 while ( N > 0 ) { // \u5c06N\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb // \u5982\u679c\u5f53\u524d\u4f4d\u7684\u4e8c\u8fdb\u5236\u4e3a1\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7ed9 ans \u4e58\u4e0a\u5f53\u524d\u7684 x if ( N % 2 == 1 ) { ans *= x ; } // x\u6bcf\u4e00\u8f6e\u5faa\u73af\u90fd\u8981\u901a\u8fc7\u7d2f\u4e58\u6765\u589e\u52a0 x *= x ; // \u5047\u8bbe x \u7684\u521d\u59cb\u503c\u4e3a3\uff0c\u90a3\u4e48x\u7684\u503c\u4e3a\uff1a3^(2^0), 3^(2^1), 3^(2^2) ... // \u89e3\u51b3\u5b8c\u5f53\u524d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5c06 N/2 \u7ee7\u7eed\u6c42\u4e0b\u4e00\u4f4d N /= 2 ; // \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u53f3\u79fb\u6765\u4ee3\u66ff\uff1aN >>= 1; } return ans ; } }","title":"3.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#32-kotlin","text":"class Solution { fun myPow ( x : Double , n : Int ): Double { var x = x /** * \u6c42 x ^ n * n \u7684\u8303\u56f4\u662f [\u22122^31, 2^31 \u2212 1] \u5373 int \u7684\u8303\u56f4 * \u4f46\u662f -n \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8d8a\u754c\uff0c\u6240\u4ee5\u9700\u8981\u5c06 n \u8f6c\u6362\u6210 long \u7c7b\u578b\u6765\u8ba1\u7b97 */ var N = n . toLong () if ( N < 0 ) { x = 1 / x N = - N } /** * \u628a\u6307\u6570 n \u770b\u6210\u4e8c\u8fdb\u5236\u6570\uff0c\u6bd4\u5982 11 \u7684\u4e8c\u8fdb\u5236\u4e3a 1011 * 11 = 1*2^3 + 0*2^2 + 1*2^1 + 1*2^0 * x^11 = x^(2^3) * x^(2^1) * x^(2^0) */ var ans = 1.0 // \u6307\u6570\u4e0d\u4e3a0 while ( N > 0 ) { // \u5c06N\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u6570\uff0c\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb // \u5982\u679c\u5f53\u524d\u4f4d\u7684\u4e8c\u8fdb\u5236\u4e3a1\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7ed9 ans \u4e58\u4e0a\u5f53\u524d\u7684 x if ( N % 2 == 1L ) { ans *= x } // x\u6bcf\u4e00\u8f6e\u5faa\u73af\u90fd\u8981\u901a\u8fc7\u7d2f\u4e58\u6765\u589e\u52a0 x *= x // \u5047\u8bbe x \u7684\u521d\u59cb\u503c\u4e3a3\uff0c\u90a3\u4e48x\u7684\u503c\u4e3a\uff1a3^(2^0), 3^(2^1), 3^(2^2) ... // \u89e3\u51b3\u5b8c\u5f53\u524d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5c06 N/2 \u7ee7\u7eed\u6c42\u4e0b\u4e00\u4f4d N /= 2 // \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528\u53f3\u79fb\u6765\u4ee3\u66ff\uff1aN >>= 1 } return ans } }","title":"3.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-16/#4","text":"https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/solution/di-gui-xie-fa-fen-zhi-si-xiang-yu-fei-di-gui-xie-f/ \u300a\u5251\u6307Offer\uff08\u7b2c2\u7248\uff09\u300b","title":"4. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-17/","text":"1. \u95ee\u9898 \u00b6 \u8f93\u5165\u6570\u5b57 n\uff0c\u6309\u987a\u5e8f\u6253\u5370\u51fa\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u5341\u8fdb\u5236\u6570\u3002\u6bd4\u5982\u8f93\u5165 3\uff0c\u5219\u6253\u5370\u51fa 1\u30012\u30013 \u4e00\u76f4\u5230\u6700\u5927\u7684 3 \u4f4d\u6570 999\u3002 \u793a\u4f8b 1: \u8f93\u5165: n = 1 \u8f93\u51fa: [1,2,3,4,5,6,7,8,9] \u8bf4\u660e\uff1a - \u7528\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u5217\u8868\u6765\u4ee3\u66ff\u6253\u5370 - n \u4e3a\u6b63\u6574\u6570 2. \u89e3\u6cd5 - \u65e0\u8111\u6cd5 \u00b6 \u8003\u8651\u5927\u6570\u597d\u590d\u6742\u54e6\u73b0\u5728\u4e0d\u60f3\u770b\uff0c\u5148\u6401\u7f6e\uff1a \u5206\u6cbb\u89e3\u6cd5/\u5168\u6392\u5217 \u6e05\u6670\u56fe\u89e3 2.1 Java \u00b6 class Solution { public int [] printNumbers ( int n ) { int max = 0 ; while ( n != 0 ) { max = max * 10 + 9 ; n -- ; } int [] ans = new int [ max ] ; for ( int i = 1 ; i <= max ; i ++ ) { ans [ i - 1 ] = i ; } return ans ; } } 2.2 Kotlin \u00b6 class Solution { fun printNumbers ( n : Int ): IntArray { var n = n var max = 0 while ( n != 0 ) { max = max * 10 + 9 n -- } val ans = IntArray ( max ) for ( i in 1. . max ) { ans [ i - 1 ] = i } return ans } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/","title":"LCOF 17. \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-17/#1","text":"\u8f93\u5165\u6570\u5b57 n\uff0c\u6309\u987a\u5e8f\u6253\u5370\u51fa\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u5341\u8fdb\u5236\u6570\u3002\u6bd4\u5982\u8f93\u5165 3\uff0c\u5219\u6253\u5370\u51fa 1\u30012\u30013 \u4e00\u76f4\u5230\u6700\u5927\u7684 3 \u4f4d\u6570 999\u3002 \u793a\u4f8b 1: \u8f93\u5165: n = 1 \u8f93\u51fa: [1,2,3,4,5,6,7,8,9] \u8bf4\u660e\uff1a - \u7528\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\u5217\u8868\u6765\u4ee3\u66ff\u6253\u5370 - n \u4e3a\u6b63\u6574\u6570","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-17/#2-","text":"\u8003\u8651\u5927\u6570\u597d\u590d\u6742\u54e6\u73b0\u5728\u4e0d\u60f3\u770b\uff0c\u5148\u6401\u7f6e\uff1a \u5206\u6cbb\u89e3\u6cd5/\u5168\u6392\u5217 \u6e05\u6670\u56fe\u89e3","title":"2. \u89e3\u6cd5 - \u65e0\u8111\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-17/#21-java","text":"class Solution { public int [] printNumbers ( int n ) { int max = 0 ; while ( n != 0 ) { max = max * 10 + 9 ; n -- ; } int [] ans = new int [ max ] ; for ( int i = 1 ; i <= max ; i ++ ) { ans [ i - 1 ] = i ; } return ans ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-17/#22-kotlin","text":"class Solution { fun printNumbers ( n : Int ): IntArray { var n = n var max = 0 while ( n != 0 ) { max = max * 10 + 9 n -- } val ans = IntArray ( max ) for ( i in 1. . max ) { ans [ i - 1 ] = i } return ans } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-17/#3","text":"https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-18/","text":"1. \u95ee\u9898 \u00b6 \u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u5934\u6307\u9488\u548c\u4e00\u4e2a\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u503c\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5220\u9664\u8be5\u8282\u70b9\u3002 \u8fd4\u56de\u5220\u9664\u540e\u7684\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002 \u6ce8\u610f\uff1a\u6b64\u9898\u5bf9\u6bd4\u539f\u9898\u6709\u6539\u52a8 \u793a\u4f8b 1: \u8f93\u5165: head = [4,5,1,9], val = 5 \u8f93\u51fa: [4,1,9] \u89e3\u91ca: \u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 5 \u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 1 -> 9. \u793a\u4f8b 2: \u8f93\u5165: head = [4,5,1,9], val = 1 \u8f93\u51fa: [4,5,9] \u89e3\u91ca: \u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 1 \u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 5 -> 9. \u8bf4\u660e\uff1a - \u9898\u76ee\u4fdd\u8bc1\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u503c\u4e92\u4e0d\u76f8\u540c - \u82e5\u4f7f\u7528 C \u6216 C++ \u8bed\u8a00\uff0c\u4f60\u4e0d\u9700\u8981 free \u6216 delete \u88ab\u5220\u9664\u7684\u8282\u70b9 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode deleteNode ( ListNode head , int val ) { // \u5982\u679c\u8981\u5220\u9664\u5934\u7ed3\u70b9\uff0c\u76f4\u63a5\u8fd4\u56denext\u5373\u53ef if ( head . val == val ) return head . next ; // \u5f53\u524d\u7ed3\u70b9cur\uff0c\u4ecehead\u5f00\u59cb\u904d\u5386 ListNode cur = head ; // cur\u7684\u4e0a\u4e00\u4e2a\u7ed3\u70b9 ListNode pre = null ; // \u5f53\u524d\u7ed3\u70b9\u503c\u4e0d\u7b49\u4e8e\u8981\u5220\u9664\u7684\u7ed3\u70b9\u503c\uff0c\u5c31\u4e00\u76f4\u5f80\u4e0b\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8 while ( cur . val != val ) { pre = cur ; cur = cur . next ; } // \u9000\u51fa\u5faa\u73af\u7684\u65f6\u5019\uff0ccur\u5c31\u662f\u8981\u5220\u9664\u7684\u7ed3\u70b9\uff0c\u628apre\u7684next\u6307\u5411cur\u7684next\u5c31\u597d\u5566 pre . next = cur . next ; // \u8fd4\u56de\u5934\u7ed3\u70b9 return head ; } } 2.2 Kotlin \u00b6 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ internal class Solution { fun deleteNode ( head : ListNode , `val` : Int ): ListNode { // \u5982\u679c\u8981\u5220\u9664\u5934\u7ed3\u70b9\uff0c\u76f4\u63a5\u8fd4\u56denext\u5373\u53ef if ( head . `val` === `val` ) return head . next // \u5f53\u524d\u7ed3\u70b9cur\uff0c\u4ecehead\u5f00\u59cb\u904d\u5386 var cur = head // cur\u7684\u4e0a\u4e00\u4e2a\u7ed3\u70b9 var pre : ListNode ? = null // \u5f53\u524d\u7ed3\u70b9\u503c\u4e0d\u7b49\u4e8e\u8981\u5220\u9664\u7684\u7ed3\u70b9\u503c\uff0c\u5c31\u4e00\u76f4\u5f80\u4e0b\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8 while ( cur . `val` !== `val` ) { pre = cur cur = cur . next } // \u9000\u51fa\u5faa\u73af\u7684\u65f6\u5019\uff0ccur\u5c31\u662f\u8981\u5220\u9664\u7684\u7ed3\u70b9\uff0c\u628apre\u7684next\u6307\u5411cur\u7684next\u5c31\u597d\u5566 pre !! . next = cur . next // \u8fd4\u56de\u5934\u7ed3\u70b9 return head } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof","title":"LCOF 18. \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-18/#1","text":"\u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u5934\u6307\u9488\u548c\u4e00\u4e2a\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u503c\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5220\u9664\u8be5\u8282\u70b9\u3002 \u8fd4\u56de\u5220\u9664\u540e\u7684\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002 \u6ce8\u610f\uff1a\u6b64\u9898\u5bf9\u6bd4\u539f\u9898\u6709\u6539\u52a8 \u793a\u4f8b 1: \u8f93\u5165: head = [4,5,1,9], val = 5 \u8f93\u51fa: [4,1,9] \u89e3\u91ca: \u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 5 \u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 1 -> 9. \u793a\u4f8b 2: \u8f93\u5165: head = [4,5,1,9], val = 1 \u8f93\u51fa: [4,5,9] \u89e3\u91ca: \u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 1 \u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 5 -> 9. \u8bf4\u660e\uff1a - \u9898\u76ee\u4fdd\u8bc1\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u503c\u4e92\u4e0d\u76f8\u540c - \u82e5\u4f7f\u7528 C \u6216 C++ \u8bed\u8a00\uff0c\u4f60\u4e0d\u9700\u8981 free \u6216 delete \u88ab\u5220\u9664\u7684\u8282\u70b9","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-18/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-18/#21-java","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode deleteNode ( ListNode head , int val ) { // \u5982\u679c\u8981\u5220\u9664\u5934\u7ed3\u70b9\uff0c\u76f4\u63a5\u8fd4\u56denext\u5373\u53ef if ( head . val == val ) return head . next ; // \u5f53\u524d\u7ed3\u70b9cur\uff0c\u4ecehead\u5f00\u59cb\u904d\u5386 ListNode cur = head ; // cur\u7684\u4e0a\u4e00\u4e2a\u7ed3\u70b9 ListNode pre = null ; // \u5f53\u524d\u7ed3\u70b9\u503c\u4e0d\u7b49\u4e8e\u8981\u5220\u9664\u7684\u7ed3\u70b9\u503c\uff0c\u5c31\u4e00\u76f4\u5f80\u4e0b\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8 while ( cur . val != val ) { pre = cur ; cur = cur . next ; } // \u9000\u51fa\u5faa\u73af\u7684\u65f6\u5019\uff0ccur\u5c31\u662f\u8981\u5220\u9664\u7684\u7ed3\u70b9\uff0c\u628apre\u7684next\u6307\u5411cur\u7684next\u5c31\u597d\u5566 pre . next = cur . next ; // \u8fd4\u56de\u5934\u7ed3\u70b9 return head ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-18/#22-kotlin","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ internal class Solution { fun deleteNode ( head : ListNode , `val` : Int ): ListNode { // \u5982\u679c\u8981\u5220\u9664\u5934\u7ed3\u70b9\uff0c\u76f4\u63a5\u8fd4\u56denext\u5373\u53ef if ( head . `val` === `val` ) return head . next // \u5f53\u524d\u7ed3\u70b9cur\uff0c\u4ecehead\u5f00\u59cb\u904d\u5386 var cur = head // cur\u7684\u4e0a\u4e00\u4e2a\u7ed3\u70b9 var pre : ListNode ? = null // \u5f53\u524d\u7ed3\u70b9\u503c\u4e0d\u7b49\u4e8e\u8981\u5220\u9664\u7684\u7ed3\u70b9\u503c\uff0c\u5c31\u4e00\u76f4\u5f80\u4e0b\u4e00\u4e2a\u8282\u70b9\u79fb\u52a8 while ( cur . `val` !== `val` ) { pre = cur cur = cur . next } // \u9000\u51fa\u5faa\u73af\u7684\u65f6\u5019\uff0ccur\u5c31\u662f\u8981\u5220\u9664\u7684\u7ed3\u70b9\uff0c\u628apre\u7684next\u6307\u5411cur\u7684next\u5c31\u597d\u5566 pre !! . next = cur . next // \u8fd4\u56de\u5934\u7ed3\u70b9 return head } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-18/#3","text":"https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-19/","text":"1. \u95ee\u9898 \u00b6 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u542b '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c '*' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u542b0\u6b21\uff09\u3002\u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab*ac*a\" \u5339\u914d\uff0c\u4f46\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"aa\" p = \"a\" \u8f93\u51fa: false \u89e3\u91ca: \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"aa\" p = \"a*\" \u8f93\u51fa: true \u89e3\u91ca: \u56e0\u4e3a '*' \u4ee3\u8868\u53ef\u4ee5\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20, \u5728\u8fd9\u91cc\u524d\u9762\u7684\u5143\u7d20\u5c31\u662f 'a'\u3002\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32 \"aa\" \u53ef\u88ab\u89c6\u4e3a 'a' \u91cd\u590d\u4e86\u4e00\u6b21\u3002 \u793a\u4f8b 3: \u8f93\u5165: s = \"ab\" p = \".*\" \u8f93\u51fa: true \u89e3\u91ca: \".*\" \u8868\u793a\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\uff08'*'\uff09\u4efb\u610f\u5b57\u7b26\uff08'.'\uff09\u3002 \u793a\u4f8b 4: \u8f93\u5165: s = \"aab\" p = \"c*a*b\" \u8f93\u51fa: true \u89e3\u91ca: \u56e0\u4e3a '*' \u8868\u793a\u96f6\u4e2a\u6216\u591a\u4e2a\uff0c\u8fd9\u91cc 'c' \u4e3a 0 \u4e2a, 'a' \u88ab\u91cd\u590d\u4e00\u6b21\u3002\u56e0\u6b64\u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"aab\"\u3002 \u793a\u4f8b 5: \u8f93\u5165: s = \"mississippi\" p = \"mis*is*p*.\" \u8f93\u51fa: false s \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u3002 p \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u4ee5\u53ca\u5b57\u7b26 . \u548c *\uff0c\u65e0\u8fde\u7eed\u7684 '*'\u3002 2. \u89e3\u6cd5 - \u52a8\u6001\u89c4\u5212 \u00b6 \u8fd8\u6709\u4e00\u79cd\u9012\u5f52\u89e3\u6cd5\uff0c\u6682\u65f6\u6401\u7f6e\u3002 2.1 Java \u00b6 class Solution { public boolean isMatch ( String A , String B ) { /** * \u89e3\u9898\u601d\u8def * * \u5047\u8bbe\u5b57\u7b26\u4e32\u4e3aA\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3aB\uff0c\u5047\u8bbeA\u7684\u957f\u5ea6\u4e3an\uff0cB\u7684\u957f\u5ea6\u4e3am \u8981\u5224\u65adA\u548cB\u662f\u5426\u53ef\u4ee5\u5339\u914d\uff0c\u53ef\u4ee5\u6839\u636eB\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u6765\u5206\u7c7b\u8ba8\u8bba\uff1a 1. * B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u666e\u901a\u5b57\u7b26\uff0c\u5c31\u53ea\u8981\u770bA[n-1]\u548cB[m-1]\u662f\u5426\u76f8\u7b49 a. * \u82e5A[n-1]=B[m-1]\uff0c\u90a3\u4e48\u5c31\u770bA[0,n-2]\u548cB[0,m-2]\u662f\u5426\u5339\u914d b. \u82e5A[n-1]!=B[m-1]\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u51fa\uff0cA\u548cB\u65e0\u6cd5\u5339\u914d 2. * \u82e5B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u300c.\u300d\uff0c\u7531\u4e8e\u5b83\u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u5b57\u7b26\uff0c\u6240\u4ee5\u76f4\u63a5\u770bA[0,n-2]\u548cB[0,m-2]\u662f\u5426\u5339\u914d 3. * \u82e5B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u300c*\u300d\uff0c\u5047\u8bbeB[m-2]=c\uff0c\u90a3\u4e48c\u53ef\u4ee5\u91cd\u590d0\u6b21\u6216\u8005\u591a\u6b21\uff0c\u8fd9\u4e9b\u8fde\u7eed\u7684c\u7ec4\u5408\u6210\u4e3ac* a. * \u5982\u679cA[n-1]\u4e0d\u662fc\uff0c\u90a3\u4e48B\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u5c31\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u4e86\uff0cA\u548cB\u80fd\u5426\u5339\u914d\u53d6\u51b3\u4e8eA[0,n-1]\u548cB[0,m-3]\u662f\u5426\u80fd\u5339\u914d b. * \u5982\u679cA[n-1]\u662f\u591a\u4e2ac\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0bA[n-1]\u4e3ac\u6216\u8005\u300c.\u300d\uff0c\u56e0\u4e3a\u6709\u591a\u4e2ac\uff0c\u6240\u4ee5A[n-1]\u5339\u914d\u6210\u529f\u4e4b\u540e\u5f80\u524d\u632a\u4e00\u4e2a\u5b57\u7b26\uff0c\u7ee7\u7eed\u770bA[0,n-2]\u548cB[0,m-1]\u662f\u5426\u5339\u914d */ int n = A . length (); int m = B . length (); /** * \u72b6\u6001\u6570\u7ec4 dp[i][j]\u8868\u793aA\u7684\u524di\u4e2a\u5b57\u7b26\u548cB\u7684\u524dj\u4e2a\u5b57\u7b26\u80fd\u5426\u5339\u914d\u6210\u529f * \u6570\u7ec4\u957f\u5ea6\u5f00[n+1][m+1]\uff0c\u8fd9\u6837\u65b9\u4fbf\u5904\u7406\u7a7a\u4e32\uff0c\u9898\u76ee\u6240\u6c42\u7ed3\u679c\u5c31\u662fdp[n][m] */ boolean [][] dp = new boolean [ n + 1 ][ m + 1 ] ; /** * \u8fb9\u754c\u6761\u4ef6 1. \u7a7a\u5b57\u7b26\u4e32\u548c\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53ef\u5339\u914d\uff0cdp[0][0]=true 2. \u7a7a\u5b57\u7b26\u4e32\u548c\u975e\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4e0d\u4e00\u5b9a\u662ffalse\uff0c\u9700\u8981\u63a8\u7b97\uff0c\u6bd4\u5982A=\"\" * B=\"a*b*c*\"\u65f6\u5c31\u662f\u5339\u914d\u7684 3. \u975e\u7a7a\u5b57\u7b26\u4e32\u548c\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4e00\u5b9a\u4e0d\u5339\u914d\uff0cdp[1][0]=dp[2][0]=...=dp[n][0]=false * 4. \u975e\u7a7a\u5b57\u7b26\u4e32\u548c\u975e\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u9700\u8981\u63a8\u7b97\u3002 */ dp [ 0 ][ 0 ] = true ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ][ 0 ] = false ; } // \u72b6\u6001\u8f6c\u79fb for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { // \u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662fj\u4e3a0\u7684\u8fb9\u754c\u60c5\u51b5\u90fd\u5df2\u7ecf\u5728\u4e0a\u9762\u8d4b\u503c\u8fc7\u4e86 // \u6b63\u5219\u8868\u8fbe\u5f0f\u975e\u7a7a\uff0cj\u4e0d\u4e3a0 if ( j != 0 ) { // \u6b63\u5219\u8868\u8fbe\u5f0f\u975e\u7a7a\u65f6\uff0c\u8981\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0c\u770bB\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u4e0d\u662f\u300c*\u300d // \u82e5B\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u300c*\u300d if ( B . charAt ( j - 1 ) != '*' ) { if ( i >= 1 && ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) || B . charAt ( j - 1 ) == '.' )) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] ; } else { // \u82e5B\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e3a\u300c*\u300d\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u89e3\u9898\u601d\u8def\u4e2d\u76843.a\u548c3.b // \u78b0\u5230c*\uff0c\u5982\u679c\u4e0d\u770b*\u7684\u8bdd\uff0c\u90a3\u4e48\u6b63\u5219\u8868\u8fbe\u5f0fB\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u6ca1\u6709\u8d77\u4f5c\u7528\uff0c\u780d\u6389\u8fd9\u4e24\u4e2a\u5b57\u7b26 if ( j >= 2 ) dp [ i ][ j ] = dp [ i ][ j - 2 ] ; // \u78b0\u5230c*\uff0c\u5982\u679c\u8981\u770b*\u7684\u8bdd\uff0c\u4e0d\u7ba1\u6b63\u5219\u8868\u8fbe\u5f0fB\uff0c\u5b57\u7b26\u4e32A\u5f80\u524d\u79fb\u4e00\u4e2a\u5b57\u7b26dp[i][j] = dp[i-1][j] if ( i >= 1 && j >= 2 && ( A . charAt ( i - 1 ) == B . charAt ( j - 2 ) || B . charAt ( j - 2 ) == '.' )) dp [ i ][ j ] |= dp [ i - 1 ][ j ] ; // \u4f7f\u7528\u300c | \u300d\u662f\u56e0\u4e3a\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u53ea\u8981\u6709\u4e00\u79cd\u60c5\u51b5\u5339\u914d\u5c31\u7b97\u662f\u5339\u914d } } } } return dp [ n ][ m ] ; } } 2.2 Kotlin \u00b6 class Solution { fun isMatch ( A : String , B : String ): Boolean { /** * \u89e3\u9898\u601d\u8def * * \u5047\u8bbe\u5b57\u7b26\u4e32\u4e3aA\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3aB\uff0c\u5047\u8bbeA\u7684\u957f\u5ea6\u4e3an\uff0cB\u7684\u957f\u5ea6\u4e3am \u8981\u5224\u65adA\u548cB\u662f\u5426\u53ef\u4ee5\u5339\u914d\uff0c\u53ef\u4ee5\u6839\u636eB\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u6765\u5206\u7c7b\u8ba8\u8bba\uff1a 1. * B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u666e\u901a\u5b57\u7b26\uff0c\u5c31\u53ea\u8981\u770bA[n-1]\u548cB[m-1]\u662f\u5426\u76f8\u7b49 a. * \u82e5A[n-1]=B[m-1]\uff0c\u90a3\u4e48\u5c31\u770bA[0,n-2]\u548cB[0,m-2]\u662f\u5426\u5339\u914d b. \u82e5A[n-1]!=B[m-1]\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u51fa\uff0cA\u548cB\u65e0\u6cd5\u5339\u914d 2. * \u82e5B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u300c.\u300d\uff0c\u7531\u4e8e\u5b83\u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u5b57\u7b26\uff0c\u6240\u4ee5\u76f4\u63a5\u770bA[0,n-2]\u548cB[0,m-2]\u662f\u5426\u5339\u914d 3. * \u82e5B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u300c*\u300d\uff0c\u5047\u8bbeB[m-2]=c\uff0c\u90a3\u4e48c\u53ef\u4ee5\u91cd\u590d0\u6b21\u6216\u8005\u591a\u6b21\uff0c\u8fd9\u4e9b\u8fde\u7eed\u7684c\u7ec4\u5408\u6210\u4e3ac* a. * \u5982\u679cA[n-1]\u4e0d\u662fc\uff0c\u90a3\u4e48B\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u5c31\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u4e86\uff0cA\u548cB\u80fd\u5426\u5339\u914d\u53d6\u51b3\u4e8eA[0,n-1]\u548cB[0,m-3]\u662f\u5426\u80fd\u5339\u914d b. * \u5982\u679cA[n-1]\u662f\u591a\u4e2ac\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0bA[n-1]\u4e3ac\u6216\u8005\u300c.\u300d\uff0c\u56e0\u4e3a\u6709\u591a\u4e2ac\uff0c\u6240\u4ee5A[n-1]\u5339\u914d\u6210\u529f\u4e4b\u540e\u5f80\u524d\u632a\u4e00\u4e2a\u5b57\u7b26\uff0c\u7ee7\u7eed\u770bA[0,n-2]\u548cB[0,m-1]\u662f\u5426\u5339\u914d */ val n = A . length val m = B . length /** * \u72b6\u6001\u6570\u7ec4 dp[i][j]\u8868\u793aA\u7684\u524di\u4e2a\u5b57\u7b26\u548cB\u7684\u524dj\u4e2a\u5b57\u7b26\u80fd\u5426\u5339\u914d\u6210\u529f * \u6570\u7ec4\u957f\u5ea6\u5f00[n+1][m+1]\uff0c\u8fd9\u6837\u65b9\u4fbf\u5904\u7406\u7a7a\u4e32\uff0c\u9898\u76ee\u6240\u6c42\u7ed3\u679c\u5c31\u662fdp[n][m] */ val dp = Array ( n + 1 ) { BooleanArray ( m + 1 ) } /** * \u8fb9\u754c\u6761\u4ef6 1. \u7a7a\u5b57\u7b26\u4e32\u548c\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53ef\u5339\u914d\uff0cdp[0][0]=true 2. \u7a7a\u5b57\u7b26\u4e32\u548c\u975e\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4e0d\u4e00\u5b9a\u662ffalse\uff0c\u9700\u8981\u63a8\u7b97\uff0c\u6bd4\u5982A=\"\" * B=\"a*b*c*\"\u65f6\u5c31\u662f\u5339\u914d\u7684 3. \u975e\u7a7a\u5b57\u7b26\u4e32\u548c\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4e00\u5b9a\u4e0d\u5339\u914d\uff0cdp[1][0]=dp[2][0]=...=dp[n][0]=false * 4. \u975e\u7a7a\u5b57\u7b26\u4e32\u548c\u975e\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u9700\u8981\u63a8\u7b97\u3002 */ dp [ 0 ][ 0 ] = true for ( i in 1. . n ) { dp [ i ][ 0 ] = false } // \u72b6\u6001\u8f6c\u79fb for ( i in 0. . n ) { for ( j in 0. . m ) { // \u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662fj\u4e3a0\u7684\u8fb9\u754c\u60c5\u51b5\u90fd\u5df2\u7ecf\u5728\u4e0a\u9762\u8d4b\u503c\u8fc7\u4e86 // \u6b63\u5219\u8868\u8fbe\u5f0f\u975e\u7a7a\uff0cj\u4e0d\u4e3a0 if ( j != 0 ) { // \u6b63\u5219\u8868\u8fbe\u5f0f\u975e\u7a7a\u65f6\uff0c\u8981\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0c\u770bB\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u4e0d\u662f\u300c*\u300d // \u82e5B\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u300c*\u300d if ( B [ j - 1 ] != '*' ) { if ( i >= 1 && ( A [ i - 1 ] == B [ j - 1 ] || B [ j - 1 ] == '.' )) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] } else { // \u82e5B\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e3a\u300c*\u300d\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u89e3\u9898\u601d\u8def\u4e2d\u76843.a\u548c3.b // \u78b0\u5230c*\uff0c\u5982\u679c\u4e0d\u770b*\u7684\u8bdd\uff0c\u90a3\u4e48\u6b63\u5219\u8868\u8fbe\u5f0fB\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u6ca1\u6709\u8d77\u4f5c\u7528\uff0c\u780d\u6389\u8fd9\u4e24\u4e2a\u5b57\u7b26 if ( j >= 2 ) dp [ i ][ j ] = dp [ i ][ j - 2 ] // \u78b0\u5230c*\uff0c\u5982\u679c\u8981\u770b*\u7684\u8bdd\uff0c\u4e0d\u7ba1\u6b63\u5219\u8868\u8fbe\u5f0fB\uff0c\u5b57\u7b26\u4e32A\u5f80\u524d\u79fb\u4e00\u4e2a\u5b57\u7b26dp[i][j] = dp[i-1][j] if ( i >= 1 && j >= 2 && ( A [ i - 1 ] == B [ j - 2 ] || B [ j - 2 ] == '.' )) dp [ i ][ j ] = dp [ i ][ j ] or dp [ i - 1 ][ j ] // \u4f7f\u7528\u300c | \u300d\u662f\u56e0\u4e3a\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u53ea\u8981\u6709\u4e00\u79cd\u60c5\u51b5\u5339\u914d\u5c31\u7b97\u662f\u5339\u914d } } } } return dp [ n ][ m ] } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof/ https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof/solution/zhu-xing-xiang-xi-jiang-jie-you-qian-ru-shen-by-je/","title":"LCOF 19. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-19/#1","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u542b '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c '*' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u542b0\u6b21\uff09\u3002\u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab*ac*a\" \u5339\u914d\uff0c\u4f46\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002 \u793a\u4f8b 1: \u8f93\u5165: s = \"aa\" p = \"a\" \u8f93\u51fa: false \u89e3\u91ca: \"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002 \u793a\u4f8b 2: \u8f93\u5165: s = \"aa\" p = \"a*\" \u8f93\u51fa: true \u89e3\u91ca: \u56e0\u4e3a '*' \u4ee3\u8868\u53ef\u4ee5\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20, \u5728\u8fd9\u91cc\u524d\u9762\u7684\u5143\u7d20\u5c31\u662f 'a'\u3002\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32 \"aa\" \u53ef\u88ab\u89c6\u4e3a 'a' \u91cd\u590d\u4e86\u4e00\u6b21\u3002 \u793a\u4f8b 3: \u8f93\u5165: s = \"ab\" p = \".*\" \u8f93\u51fa: true \u89e3\u91ca: \".*\" \u8868\u793a\u53ef\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\uff08'*'\uff09\u4efb\u610f\u5b57\u7b26\uff08'.'\uff09\u3002 \u793a\u4f8b 4: \u8f93\u5165: s = \"aab\" p = \"c*a*b\" \u8f93\u51fa: true \u89e3\u91ca: \u56e0\u4e3a '*' \u8868\u793a\u96f6\u4e2a\u6216\u591a\u4e2a\uff0c\u8fd9\u91cc 'c' \u4e3a 0 \u4e2a, 'a' \u88ab\u91cd\u590d\u4e00\u6b21\u3002\u56e0\u6b64\u53ef\u4ee5\u5339\u914d\u5b57\u7b26\u4e32 \"aab\"\u3002 \u793a\u4f8b 5: \u8f93\u5165: s = \"mississippi\" p = \"mis*is*p*.\" \u8f93\u51fa: false s \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u3002 p \u53ef\u80fd\u4e3a\u7a7a\uff0c\u4e14\u53ea\u5305\u542b\u4ece a-z \u7684\u5c0f\u5199\u5b57\u6bcd\u4ee5\u53ca\u5b57\u7b26 . \u548c *\uff0c\u65e0\u8fde\u7eed\u7684 '*'\u3002","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-19/#2-","text":"\u8fd8\u6709\u4e00\u79cd\u9012\u5f52\u89e3\u6cd5\uff0c\u6682\u65f6\u6401\u7f6e\u3002","title":"2. \u89e3\u6cd5 - \u52a8\u6001\u89c4\u5212"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-19/#21-java","text":"class Solution { public boolean isMatch ( String A , String B ) { /** * \u89e3\u9898\u601d\u8def * * \u5047\u8bbe\u5b57\u7b26\u4e32\u4e3aA\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3aB\uff0c\u5047\u8bbeA\u7684\u957f\u5ea6\u4e3an\uff0cB\u7684\u957f\u5ea6\u4e3am \u8981\u5224\u65adA\u548cB\u662f\u5426\u53ef\u4ee5\u5339\u914d\uff0c\u53ef\u4ee5\u6839\u636eB\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u6765\u5206\u7c7b\u8ba8\u8bba\uff1a 1. * B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u666e\u901a\u5b57\u7b26\uff0c\u5c31\u53ea\u8981\u770bA[n-1]\u548cB[m-1]\u662f\u5426\u76f8\u7b49 a. * \u82e5A[n-1]=B[m-1]\uff0c\u90a3\u4e48\u5c31\u770bA[0,n-2]\u548cB[0,m-2]\u662f\u5426\u5339\u914d b. \u82e5A[n-1]!=B[m-1]\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u51fa\uff0cA\u548cB\u65e0\u6cd5\u5339\u914d 2. * \u82e5B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u300c.\u300d\uff0c\u7531\u4e8e\u5b83\u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u5b57\u7b26\uff0c\u6240\u4ee5\u76f4\u63a5\u770bA[0,n-2]\u548cB[0,m-2]\u662f\u5426\u5339\u914d 3. * \u82e5B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u300c*\u300d\uff0c\u5047\u8bbeB[m-2]=c\uff0c\u90a3\u4e48c\u53ef\u4ee5\u91cd\u590d0\u6b21\u6216\u8005\u591a\u6b21\uff0c\u8fd9\u4e9b\u8fde\u7eed\u7684c\u7ec4\u5408\u6210\u4e3ac* a. * \u5982\u679cA[n-1]\u4e0d\u662fc\uff0c\u90a3\u4e48B\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u5c31\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u4e86\uff0cA\u548cB\u80fd\u5426\u5339\u914d\u53d6\u51b3\u4e8eA[0,n-1]\u548cB[0,m-3]\u662f\u5426\u80fd\u5339\u914d b. * \u5982\u679cA[n-1]\u662f\u591a\u4e2ac\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0bA[n-1]\u4e3ac\u6216\u8005\u300c.\u300d\uff0c\u56e0\u4e3a\u6709\u591a\u4e2ac\uff0c\u6240\u4ee5A[n-1]\u5339\u914d\u6210\u529f\u4e4b\u540e\u5f80\u524d\u632a\u4e00\u4e2a\u5b57\u7b26\uff0c\u7ee7\u7eed\u770bA[0,n-2]\u548cB[0,m-1]\u662f\u5426\u5339\u914d */ int n = A . length (); int m = B . length (); /** * \u72b6\u6001\u6570\u7ec4 dp[i][j]\u8868\u793aA\u7684\u524di\u4e2a\u5b57\u7b26\u548cB\u7684\u524dj\u4e2a\u5b57\u7b26\u80fd\u5426\u5339\u914d\u6210\u529f * \u6570\u7ec4\u957f\u5ea6\u5f00[n+1][m+1]\uff0c\u8fd9\u6837\u65b9\u4fbf\u5904\u7406\u7a7a\u4e32\uff0c\u9898\u76ee\u6240\u6c42\u7ed3\u679c\u5c31\u662fdp[n][m] */ boolean [][] dp = new boolean [ n + 1 ][ m + 1 ] ; /** * \u8fb9\u754c\u6761\u4ef6 1. \u7a7a\u5b57\u7b26\u4e32\u548c\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53ef\u5339\u914d\uff0cdp[0][0]=true 2. \u7a7a\u5b57\u7b26\u4e32\u548c\u975e\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4e0d\u4e00\u5b9a\u662ffalse\uff0c\u9700\u8981\u63a8\u7b97\uff0c\u6bd4\u5982A=\"\" * B=\"a*b*c*\"\u65f6\u5c31\u662f\u5339\u914d\u7684 3. \u975e\u7a7a\u5b57\u7b26\u4e32\u548c\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4e00\u5b9a\u4e0d\u5339\u914d\uff0cdp[1][0]=dp[2][0]=...=dp[n][0]=false * 4. \u975e\u7a7a\u5b57\u7b26\u4e32\u548c\u975e\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u9700\u8981\u63a8\u7b97\u3002 */ dp [ 0 ][ 0 ] = true ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ][ 0 ] = false ; } // \u72b6\u6001\u8f6c\u79fb for ( int i = 0 ; i <= n ; i ++ ) { for ( int j = 0 ; j <= m ; j ++ ) { // \u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662fj\u4e3a0\u7684\u8fb9\u754c\u60c5\u51b5\u90fd\u5df2\u7ecf\u5728\u4e0a\u9762\u8d4b\u503c\u8fc7\u4e86 // \u6b63\u5219\u8868\u8fbe\u5f0f\u975e\u7a7a\uff0cj\u4e0d\u4e3a0 if ( j != 0 ) { // \u6b63\u5219\u8868\u8fbe\u5f0f\u975e\u7a7a\u65f6\uff0c\u8981\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0c\u770bB\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u4e0d\u662f\u300c*\u300d // \u82e5B\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u300c*\u300d if ( B . charAt ( j - 1 ) != '*' ) { if ( i >= 1 && ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) || B . charAt ( j - 1 ) == '.' )) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] ; } else { // \u82e5B\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e3a\u300c*\u300d\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u89e3\u9898\u601d\u8def\u4e2d\u76843.a\u548c3.b // \u78b0\u5230c*\uff0c\u5982\u679c\u4e0d\u770b*\u7684\u8bdd\uff0c\u90a3\u4e48\u6b63\u5219\u8868\u8fbe\u5f0fB\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u6ca1\u6709\u8d77\u4f5c\u7528\uff0c\u780d\u6389\u8fd9\u4e24\u4e2a\u5b57\u7b26 if ( j >= 2 ) dp [ i ][ j ] = dp [ i ][ j - 2 ] ; // \u78b0\u5230c*\uff0c\u5982\u679c\u8981\u770b*\u7684\u8bdd\uff0c\u4e0d\u7ba1\u6b63\u5219\u8868\u8fbe\u5f0fB\uff0c\u5b57\u7b26\u4e32A\u5f80\u524d\u79fb\u4e00\u4e2a\u5b57\u7b26dp[i][j] = dp[i-1][j] if ( i >= 1 && j >= 2 && ( A . charAt ( i - 1 ) == B . charAt ( j - 2 ) || B . charAt ( j - 2 ) == '.' )) dp [ i ][ j ] |= dp [ i - 1 ][ j ] ; // \u4f7f\u7528\u300c | \u300d\u662f\u56e0\u4e3a\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u53ea\u8981\u6709\u4e00\u79cd\u60c5\u51b5\u5339\u914d\u5c31\u7b97\u662f\u5339\u914d } } } } return dp [ n ][ m ] ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-19/#22-kotlin","text":"class Solution { fun isMatch ( A : String , B : String ): Boolean { /** * \u89e3\u9898\u601d\u8def * * \u5047\u8bbe\u5b57\u7b26\u4e32\u4e3aA\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u4e3aB\uff0c\u5047\u8bbeA\u7684\u957f\u5ea6\u4e3an\uff0cB\u7684\u957f\u5ea6\u4e3am \u8981\u5224\u65adA\u548cB\u662f\u5426\u53ef\u4ee5\u5339\u914d\uff0c\u53ef\u4ee5\u6839\u636eB\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u6765\u5206\u7c7b\u8ba8\u8bba\uff1a 1. * B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u666e\u901a\u5b57\u7b26\uff0c\u5c31\u53ea\u8981\u770bA[n-1]\u548cB[m-1]\u662f\u5426\u76f8\u7b49 a. * \u82e5A[n-1]=B[m-1]\uff0c\u90a3\u4e48\u5c31\u770bA[0,n-2]\u548cB[0,m-2]\u662f\u5426\u5339\u914d b. \u82e5A[n-1]!=B[m-1]\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f97\u51fa\uff0cA\u548cB\u65e0\u6cd5\u5339\u914d 2. * \u82e5B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u300c.\u300d\uff0c\u7531\u4e8e\u5b83\u53ef\u4ee5\u5339\u914d\u4efb\u4f55\u5b57\u7b26\uff0c\u6240\u4ee5\u76f4\u63a5\u770bA[0,n-2]\u548cB[0,m-2]\u662f\u5426\u5339\u914d 3. * \u82e5B\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u300c*\u300d\uff0c\u5047\u8bbeB[m-2]=c\uff0c\u90a3\u4e48c\u53ef\u4ee5\u91cd\u590d0\u6b21\u6216\u8005\u591a\u6b21\uff0c\u8fd9\u4e9b\u8fde\u7eed\u7684c\u7ec4\u5408\u6210\u4e3ac* a. * \u5982\u679cA[n-1]\u4e0d\u662fc\uff0c\u90a3\u4e48B\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u5c31\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u4e86\uff0cA\u548cB\u80fd\u5426\u5339\u914d\u53d6\u51b3\u4e8eA[0,n-1]\u548cB[0,m-3]\u662f\u5426\u80fd\u5339\u914d b. * \u5982\u679cA[n-1]\u662f\u591a\u4e2ac\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0bA[n-1]\u4e3ac\u6216\u8005\u300c.\u300d\uff0c\u56e0\u4e3a\u6709\u591a\u4e2ac\uff0c\u6240\u4ee5A[n-1]\u5339\u914d\u6210\u529f\u4e4b\u540e\u5f80\u524d\u632a\u4e00\u4e2a\u5b57\u7b26\uff0c\u7ee7\u7eed\u770bA[0,n-2]\u548cB[0,m-1]\u662f\u5426\u5339\u914d */ val n = A . length val m = B . length /** * \u72b6\u6001\u6570\u7ec4 dp[i][j]\u8868\u793aA\u7684\u524di\u4e2a\u5b57\u7b26\u548cB\u7684\u524dj\u4e2a\u5b57\u7b26\u80fd\u5426\u5339\u914d\u6210\u529f * \u6570\u7ec4\u957f\u5ea6\u5f00[n+1][m+1]\uff0c\u8fd9\u6837\u65b9\u4fbf\u5904\u7406\u7a7a\u4e32\uff0c\u9898\u76ee\u6240\u6c42\u7ed3\u679c\u5c31\u662fdp[n][m] */ val dp = Array ( n + 1 ) { BooleanArray ( m + 1 ) } /** * \u8fb9\u754c\u6761\u4ef6 1. \u7a7a\u5b57\u7b26\u4e32\u548c\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u53ef\u5339\u914d\uff0cdp[0][0]=true 2. \u7a7a\u5b57\u7b26\u4e32\u548c\u975e\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4e0d\u4e00\u5b9a\u662ffalse\uff0c\u9700\u8981\u63a8\u7b97\uff0c\u6bd4\u5982A=\"\" * B=\"a*b*c*\"\u65f6\u5c31\u662f\u5339\u914d\u7684 3. \u975e\u7a7a\u5b57\u7b26\u4e32\u548c\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4e00\u5b9a\u4e0d\u5339\u914d\uff0cdp[1][0]=dp[2][0]=...=dp[n][0]=false * 4. \u975e\u7a7a\u5b57\u7b26\u4e32\u548c\u975e\u7a7a\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u9700\u8981\u63a8\u7b97\u3002 */ dp [ 0 ][ 0 ] = true for ( i in 1. . n ) { dp [ i ][ 0 ] = false } // \u72b6\u6001\u8f6c\u79fb for ( i in 0. . n ) { for ( j in 0. . m ) { // \u6b63\u5219\u8868\u8fbe\u5f0f\u4e3a\u7a7a\uff0c\u4e5f\u5c31\u662fj\u4e3a0\u7684\u8fb9\u754c\u60c5\u51b5\u90fd\u5df2\u7ecf\u5728\u4e0a\u9762\u8d4b\u503c\u8fc7\u4e86 // \u6b63\u5219\u8868\u8fbe\u5f0f\u975e\u7a7a\uff0cj\u4e0d\u4e3a0 if ( j != 0 ) { // \u6b63\u5219\u8868\u8fbe\u5f0f\u975e\u7a7a\u65f6\uff0c\u8981\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0c\u770bB\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u662f\u4e0d\u662f\u300c*\u300d // \u82e5B\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u300c*\u300d if ( B [ j - 1 ] != '*' ) { if ( i >= 1 && ( A [ i - 1 ] == B [ j - 1 ] || B [ j - 1 ] == '.' )) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] } else { // \u82e5B\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e3a\u300c*\u300d\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u4e5f\u5c31\u662f\u89e3\u9898\u601d\u8def\u4e2d\u76843.a\u548c3.b // \u78b0\u5230c*\uff0c\u5982\u679c\u4e0d\u770b*\u7684\u8bdd\uff0c\u90a3\u4e48\u6b63\u5219\u8868\u8fbe\u5f0fB\u7684\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u6ca1\u6709\u8d77\u4f5c\u7528\uff0c\u780d\u6389\u8fd9\u4e24\u4e2a\u5b57\u7b26 if ( j >= 2 ) dp [ i ][ j ] = dp [ i ][ j - 2 ] // \u78b0\u5230c*\uff0c\u5982\u679c\u8981\u770b*\u7684\u8bdd\uff0c\u4e0d\u7ba1\u6b63\u5219\u8868\u8fbe\u5f0fB\uff0c\u5b57\u7b26\u4e32A\u5f80\u524d\u79fb\u4e00\u4e2a\u5b57\u7b26dp[i][j] = dp[i-1][j] if ( i >= 1 && j >= 2 && ( A [ i - 1 ] == B [ j - 2 ] || B [ j - 2 ] == '.' )) dp [ i ][ j ] = dp [ i ][ j ] or dp [ i - 1 ][ j ] // \u4f7f\u7528\u300c | \u300d\u662f\u56e0\u4e3a\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\u53ea\u8981\u6709\u4e00\u79cd\u60c5\u51b5\u5339\u914d\u5c31\u7b97\u662f\u5339\u914d } } } } return dp [ n ][ m ] } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-19/#3","text":"https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof/ https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof/solution/zhu-xing-xiang-xi-jiang-jie-you-qian-ru-shen-by-je/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-20/","text":"1. \u95ee\u9898 \u00b6 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\"+100\"\u3001\"5e2\"\u3001\"-123\"\u3001\"3.1416\"\u3001\"-1E-16\"\u3001\"0123\"\u90fd\u8868\u793a\u6570\u503c\uff0c\u4f46\"12e\"\u3001\"1a3.14\"\u3001\"1.2.3\"\u3001\"+-5\"\u53ca\"12e+5.4\"\u90fd\u4e0d\u662f\u3002 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 class Solution { // \u5168\u5c40\u7d22\u5f15 public int index = 0 ; public boolean isNumber ( String s ) { // \u5047\u8bbe\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4e3aA.BeC\u6216\u8005A.BEC // A\u4e3a\u6574\u6570\u90e8\u5206\uff0cB\u4e3a\u5c0f\u6570\u90e8\u5206\uff0cC\u4e3a\u6307\u6570\u90e8\u5206\uff0c\u6309\u987a\u5e8f\u5224\u65ad\u662f\u5426\u5305\u542b\u8fd9\u4e09\u4e2a\u90e8\u5206 // 1. \u5728\u5b57\u7b26\u4e32\u6700\u540e\u6dfb\u52a0\u7ed3\u675f\u6807\u8bb0 // 2. \u4f7f\u7528\u5168\u5c40\u7d22\u5f15index\u904d\u5386\u5b57\u7b26\u4e32 // 3. scanInteger\u626b\u63cf\u6709\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dA\u548cC // 4. scanUnsignedInteger\u626b\u63cf\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dB // \u53e6\u5916\u9700\u8981\u6ce8\u610f\u5b57\u7b26\u4e32\u9996\u5c3e\u82e5\u6709\u7a7a\u683c\u662f\u5408\u6cd5\u7684 // \u7279\u5224 if ( s == null || s . length () == 0 ) return false ; // \u5b57\u7b26\u4e32s\u662f\u5426\u662f\u4e00\u4e2a\u6570\u5b57 boolean isNum = false ; // Step1: \u6dfb\u52a0\u7ed3\u675f\u6807\u5fd7 s += '*' ; // Step2: \u8df3\u8fc7\u5b57\u7b26\u4e32\u9996\u90e8\u7684\u6240\u6709\u7a7a\u683c\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09 while ( s . charAt ( index ) == ' ' ) index ++ ; // Step3: \u6574\u6570\u90e8\u5206 isNum = scanInteger ( s ); // Step4. \u5c0f\u6570\u90e8\u5206\uff08\u5982\u679c\u5b58\u5728\u5c0f\u6570\u70b9\u7684\u8bdd\uff09 if ( s . charAt ( index ) == '.' ) { // \u8df3\u8fc7\u5c0f\u6570\u70b9 index ++ ; // \u5904\u7406\u5c0f\u6570\u90e8\u5206\uff0c\u5c0f\u6570\u70b9\u5de6\u53f3\u4e24\u8fb9\u53ea\u8981\u6709\u4e00\u8fb9\u6709\u6570\u5b57\u5c31\u5408\u6cd5\uff0c\u6240\u4ee5\u4f7f\u7528\u300c || \u300d isNum = scanUnsignedInteger ( s ) || isNum ; } // Step5. \u6307\u6570\u90e8\u5206\uff08\u5982\u679c\u5b58\u5728e\u6216E\u7684\u8bdd\uff09 if ( s . charAt ( index ) == 'E' || s . charAt ( index ) == 'e' ) { // \u8df3\u8fc7E\u6216e index ++ ; // \u5904\u7406\u6307\u6570\u90e8\u5206\uff0ce\u6216E\u7684\u4e24\u8fb9\u90fd\u5fc5\u987b\u6709\u6570\u5b57\uff0c\u6240\u4ee5\u4f7f\u7528\u300c && \u300d isNum = scanInteger ( s ) && isNum ; } // Step6. \u8df3\u8fc7\u5b57\u7b26\u4e32\u5c3e\u90e8\u7684\u6240\u6709\u7a7a\u683c\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09 while ( s . charAt ( index ) == ' ' ) index ++ ; // Step7. \u770b\u662f\u5426\u904d\u5386\u5230\u4e86\u5b57\u7b26\u4e32\u6700\u540e\uff0c\u5982\u679c\u6ca1\u6709\u5230\u6700\u540e\u7684\u8bdd\uff0c\u4e00\u5b9a\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57 // \u5982\u679c\u904d\u5386\u5230\u4e86\u6700\u540e\u4e14isNum\u4e3atrue\uff0c\u90a3\u4e48s\u5c31\u662f\u4e00\u4e2a\u6570\u5b57 isNum = isNum && s . charAt ( index ) == '*' ; return isNum ; } // \u626b\u63cf\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dB\uff08\u5c0f\u6570\u90e8\u5206\uff09 // \u5224\u65ad\u5b57\u7b26\u4e32\u5185\u662f\u5426\u5305\u542b\u65e0\u7b26\u53f7\u6570 public boolean scanUnsignedInteger ( String str ) { // \u8bb0\u4e0b\u6700\u5f00\u59cb\u7684\u4f4d\u7f6e int start = index ; // \u662f\u6570\u5b57\u5c31\u4e00\u76f4\u904d\u5386\u4e0b\u53bb while ( str . charAt ( index ) >= '0' && str . charAt ( index ) <= '9' ) index ++ ; // \u82e5index>start\u8bf4\u660e\u53d1\u73b0\u4e86\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5426\u5219\u8bf4\u660e\u4e0d\u5305\u542b\u65e0\u7b26\u53f7\u6574\u6570 return index > start ; } // \u626b\u63cf\u6709\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dA\uff08\u6574\u6570\u90e8\u5206\uff09\u548cC\uff08\u6307\u6570\u90e8\u5206\uff09 // \u5224\u65ad\u5b57\u7b26\u4e32\u5185\u662f\u5426\u5305\u542b\u6709\u7b26\u53f7\u6574\u6570 public boolean scanInteger ( String str ) { // \u5982\u679c\u662f\u6709\u7b26\u53f7\u7684\uff0c\u8df3\u8fc7\u8fd9\u4e2a\u7b26\u53f7\uff0c\u7136\u540e\u628a\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4ea4\u7ed9scanUnsignedInteger\u5904\u7406 if ( str . charAt ( index ) == '+' || str . charAt ( index ) == '-' ) index ++ ; return scanUnsignedInteger ( str ); } } 2.2 Kotlin \u00b6 class Solution { // \u5168\u5c40\u7d22\u5f15 var index = 0 fun isNumber ( s : String ?): Boolean { var s = s // \u5047\u8bbe\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4e3aA.BeC\u6216\u8005A.BEC // A\u4e3a\u6574\u6570\u90e8\u5206\uff0cB\u4e3a\u5c0f\u6570\u90e8\u5206\uff0cC\u4e3a\u6307\u6570\u90e8\u5206\uff0c\u6309\u987a\u5e8f\u5224\u65ad\u662f\u5426\u5305\u542b\u8fd9\u4e09\u4e2a\u90e8\u5206 // 1. \u5728\u5b57\u7b26\u4e32\u6700\u540e\u6dfb\u52a0\u7ed3\u675f\u6807\u8bb0 // 2. \u4f7f\u7528\u5168\u5c40\u7d22\u5f15index\u904d\u5386\u5b57\u7b26\u4e32 // 3. scanInteger\u626b\u63cf\u6709\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dA\u548cC // 4. scanUnsignedInteger\u626b\u63cf\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dB // \u53e6\u5916\u9700\u8981\u6ce8\u610f\u5b57\u7b26\u4e32\u9996\u5c3e\u82e5\u6709\u7a7a\u683c\u662f\u5408\u6cd5\u7684 // \u7279\u5224 if ( s == null || s . length == 0 ) return false // \u5b57\u7b26\u4e32s\u662f\u5426\u662f\u4e00\u4e2a\u6570\u5b57 var isNum = false // Step1: \u6dfb\u52a0\u7ed3\u675f\u6807\u5fd7 s += '*' . toString () // Step2: \u8df3\u8fc7\u5b57\u7b26\u4e32\u9996\u90e8\u7684\u6240\u6709\u7a7a\u683c\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09 while ( s [ index ] == ' ' ) index ++ // Step3: \u6574\u6570\u90e8\u5206 isNum = scanInteger ( s ) // Step4. \u5c0f\u6570\u90e8\u5206\uff08\u5982\u679c\u5b58\u5728\u5c0f\u6570\u70b9\u7684\u8bdd\uff09 if ( s [ index ] == '.' ) { // \u8df3\u8fc7\u5c0f\u6570\u70b9 index ++ // \u5904\u7406\u5c0f\u6570\u90e8\u5206\uff0c\u5c0f\u6570\u70b9\u5de6\u53f3\u4e24\u8fb9\u53ea\u8981\u6709\u4e00\u8fb9\u6709\u6570\u5b57\u5c31\u5408\u6cd5\uff0c\u6240\u4ee5\u4f7f\u7528\u300c || \u300d isNum = scanUnsignedInteger ( s ) || isNum } // Step5. \u6307\u6570\u90e8\u5206\uff08\u5982\u679c\u5b58\u5728e\u6216E\u7684\u8bdd\uff09 if ( s [ index ] == 'E' || s [ index ] == 'e' ) { // \u8df3\u8fc7E\u6216e index ++ // \u5904\u7406\u6307\u6570\u90e8\u5206\uff0ce\u6216E\u7684\u4e24\u8fb9\u90fd\u5fc5\u987b\u6709\u6570\u5b57\uff0c\u6240\u4ee5\u4f7f\u7528\u300c && \u300d isNum = scanInteger ( s ) && isNum } // Step6. \u8df3\u8fc7\u5b57\u7b26\u4e32\u5c3e\u90e8\u7684\u6240\u6709\u7a7a\u683c\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09 while ( s [ index ] == ' ' ) index ++ // Step7. \u770b\u662f\u5426\u904d\u5386\u5230\u4e86\u5b57\u7b26\u4e32\u6700\u540e\uff0c\u5982\u679c\u6ca1\u6709\u5230\u6700\u540e\u7684\u8bdd\uff0c\u4e00\u5b9a\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57 // \u5982\u679c\u904d\u5386\u5230\u4e86\u6700\u540e\u4e14isNum\u4e3atrue\uff0c\u90a3\u4e48s\u5c31\u662f\u4e00\u4e2a\u6570\u5b57 isNum = isNum && s [ index ] == '*' return isNum } // \u626b\u63cf\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dB\uff08\u5c0f\u6570\u90e8\u5206\uff09 // \u5224\u65ad\u5b57\u7b26\u4e32\u5185\u662f\u5426\u5305\u542b\u65e0\u7b26\u53f7\u6570 fun scanUnsignedInteger ( str : String ): Boolean { // \u8bb0\u4e0b\u6700\u5f00\u59cb\u7684\u4f4d\u7f6e val start = index // \u662f\u6570\u5b57\u5c31\u4e00\u76f4\u904d\u5386\u4e0b\u53bb while ( str [ index ] >= '0' && str [ index ] <= '9' ) index ++ // \u82e5index>start\u8bf4\u660e\u53d1\u73b0\u4e86\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5426\u5219\u8bf4\u660e\u4e0d\u5305\u542b\u65e0\u7b26\u53f7\u6574\u6570 return index > start } // \u626b\u63cf\u6709\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dA\uff08\u6574\u6570\u90e8\u5206\uff09\u548cC\uff08\u6307\u6570\u90e8\u5206\uff09 // \u5224\u65ad\u5b57\u7b26\u4e32\u5185\u662f\u5426\u5305\u542b\u6709\u7b26\u53f7\u6574\u6570 fun scanInteger ( str : String ): Boolean { // \u5982\u679c\u662f\u6709\u7b26\u53f7\u7684\uff0c\u8df3\u8fc7\u8fd9\u4e2a\u7b26\u53f7\uff0c\u7136\u540e\u628a\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4ea4\u7ed9scanUnsignedInteger\u5904\u7406 if ( str [ index ] == '+' || str [ index ] == '-' ) index ++ return scanUnsignedInteger ( str ) } } \u8fd8\u6709\u4e2a\u89e3\u6cd5\u662f\u7528\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u6765\u505a\u7684\uff0c\u76f4\u63a5\u770b K\u4f6c\u7684\u9898\u89e3 \u5427\uff0c\u6211\u770b\u7740\u5c31\u4e0d\u60f3\u505aOTZ\u3002#TODO 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/ https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/solution/mian-shi-ti-20-biao-shi-shu-zhi-de-zi-fu-chuan-y-2/ // \u8fd8\u6ca1\u770b https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/solution/zui-jian-dan-si-lu-xiang-xi-zhu-shi-zheng-shu-xiao/","title":"LCOF 20. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-20/#1","text":"\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\"+100\"\u3001\"5e2\"\u3001\"-123\"\u3001\"3.1416\"\u3001\"-1E-16\"\u3001\"0123\"\u90fd\u8868\u793a\u6570\u503c\uff0c\u4f46\"12e\"\u3001\"1a3.14\"\u3001\"1.2.3\"\u3001\"+-5\"\u53ca\"12e+5.4\"\u90fd\u4e0d\u662f\u3002","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-20/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-20/#21-java","text":"class Solution { // \u5168\u5c40\u7d22\u5f15 public int index = 0 ; public boolean isNumber ( String s ) { // \u5047\u8bbe\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4e3aA.BeC\u6216\u8005A.BEC // A\u4e3a\u6574\u6570\u90e8\u5206\uff0cB\u4e3a\u5c0f\u6570\u90e8\u5206\uff0cC\u4e3a\u6307\u6570\u90e8\u5206\uff0c\u6309\u987a\u5e8f\u5224\u65ad\u662f\u5426\u5305\u542b\u8fd9\u4e09\u4e2a\u90e8\u5206 // 1. \u5728\u5b57\u7b26\u4e32\u6700\u540e\u6dfb\u52a0\u7ed3\u675f\u6807\u8bb0 // 2. \u4f7f\u7528\u5168\u5c40\u7d22\u5f15index\u904d\u5386\u5b57\u7b26\u4e32 // 3. scanInteger\u626b\u63cf\u6709\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dA\u548cC // 4. scanUnsignedInteger\u626b\u63cf\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dB // \u53e6\u5916\u9700\u8981\u6ce8\u610f\u5b57\u7b26\u4e32\u9996\u5c3e\u82e5\u6709\u7a7a\u683c\u662f\u5408\u6cd5\u7684 // \u7279\u5224 if ( s == null || s . length () == 0 ) return false ; // \u5b57\u7b26\u4e32s\u662f\u5426\u662f\u4e00\u4e2a\u6570\u5b57 boolean isNum = false ; // Step1: \u6dfb\u52a0\u7ed3\u675f\u6807\u5fd7 s += '*' ; // Step2: \u8df3\u8fc7\u5b57\u7b26\u4e32\u9996\u90e8\u7684\u6240\u6709\u7a7a\u683c\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09 while ( s . charAt ( index ) == ' ' ) index ++ ; // Step3: \u6574\u6570\u90e8\u5206 isNum = scanInteger ( s ); // Step4. \u5c0f\u6570\u90e8\u5206\uff08\u5982\u679c\u5b58\u5728\u5c0f\u6570\u70b9\u7684\u8bdd\uff09 if ( s . charAt ( index ) == '.' ) { // \u8df3\u8fc7\u5c0f\u6570\u70b9 index ++ ; // \u5904\u7406\u5c0f\u6570\u90e8\u5206\uff0c\u5c0f\u6570\u70b9\u5de6\u53f3\u4e24\u8fb9\u53ea\u8981\u6709\u4e00\u8fb9\u6709\u6570\u5b57\u5c31\u5408\u6cd5\uff0c\u6240\u4ee5\u4f7f\u7528\u300c || \u300d isNum = scanUnsignedInteger ( s ) || isNum ; } // Step5. \u6307\u6570\u90e8\u5206\uff08\u5982\u679c\u5b58\u5728e\u6216E\u7684\u8bdd\uff09 if ( s . charAt ( index ) == 'E' || s . charAt ( index ) == 'e' ) { // \u8df3\u8fc7E\u6216e index ++ ; // \u5904\u7406\u6307\u6570\u90e8\u5206\uff0ce\u6216E\u7684\u4e24\u8fb9\u90fd\u5fc5\u987b\u6709\u6570\u5b57\uff0c\u6240\u4ee5\u4f7f\u7528\u300c && \u300d isNum = scanInteger ( s ) && isNum ; } // Step6. \u8df3\u8fc7\u5b57\u7b26\u4e32\u5c3e\u90e8\u7684\u6240\u6709\u7a7a\u683c\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09 while ( s . charAt ( index ) == ' ' ) index ++ ; // Step7. \u770b\u662f\u5426\u904d\u5386\u5230\u4e86\u5b57\u7b26\u4e32\u6700\u540e\uff0c\u5982\u679c\u6ca1\u6709\u5230\u6700\u540e\u7684\u8bdd\uff0c\u4e00\u5b9a\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57 // \u5982\u679c\u904d\u5386\u5230\u4e86\u6700\u540e\u4e14isNum\u4e3atrue\uff0c\u90a3\u4e48s\u5c31\u662f\u4e00\u4e2a\u6570\u5b57 isNum = isNum && s . charAt ( index ) == '*' ; return isNum ; } // \u626b\u63cf\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dB\uff08\u5c0f\u6570\u90e8\u5206\uff09 // \u5224\u65ad\u5b57\u7b26\u4e32\u5185\u662f\u5426\u5305\u542b\u65e0\u7b26\u53f7\u6570 public boolean scanUnsignedInteger ( String str ) { // \u8bb0\u4e0b\u6700\u5f00\u59cb\u7684\u4f4d\u7f6e int start = index ; // \u662f\u6570\u5b57\u5c31\u4e00\u76f4\u904d\u5386\u4e0b\u53bb while ( str . charAt ( index ) >= '0' && str . charAt ( index ) <= '9' ) index ++ ; // \u82e5index>start\u8bf4\u660e\u53d1\u73b0\u4e86\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5426\u5219\u8bf4\u660e\u4e0d\u5305\u542b\u65e0\u7b26\u53f7\u6574\u6570 return index > start ; } // \u626b\u63cf\u6709\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dA\uff08\u6574\u6570\u90e8\u5206\uff09\u548cC\uff08\u6307\u6570\u90e8\u5206\uff09 // \u5224\u65ad\u5b57\u7b26\u4e32\u5185\u662f\u5426\u5305\u542b\u6709\u7b26\u53f7\u6574\u6570 public boolean scanInteger ( String str ) { // \u5982\u679c\u662f\u6709\u7b26\u53f7\u7684\uff0c\u8df3\u8fc7\u8fd9\u4e2a\u7b26\u53f7\uff0c\u7136\u540e\u628a\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4ea4\u7ed9scanUnsignedInteger\u5904\u7406 if ( str . charAt ( index ) == '+' || str . charAt ( index ) == '-' ) index ++ ; return scanUnsignedInteger ( str ); } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-20/#22-kotlin","text":"class Solution { // \u5168\u5c40\u7d22\u5f15 var index = 0 fun isNumber ( s : String ?): Boolean { var s = s // \u5047\u8bbe\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u4e3aA.BeC\u6216\u8005A.BEC // A\u4e3a\u6574\u6570\u90e8\u5206\uff0cB\u4e3a\u5c0f\u6570\u90e8\u5206\uff0cC\u4e3a\u6307\u6570\u90e8\u5206\uff0c\u6309\u987a\u5e8f\u5224\u65ad\u662f\u5426\u5305\u542b\u8fd9\u4e09\u4e2a\u90e8\u5206 // 1. \u5728\u5b57\u7b26\u4e32\u6700\u540e\u6dfb\u52a0\u7ed3\u675f\u6807\u8bb0 // 2. \u4f7f\u7528\u5168\u5c40\u7d22\u5f15index\u904d\u5386\u5b57\u7b26\u4e32 // 3. scanInteger\u626b\u63cf\u6709\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dA\u548cC // 4. scanUnsignedInteger\u626b\u63cf\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dB // \u53e6\u5916\u9700\u8981\u6ce8\u610f\u5b57\u7b26\u4e32\u9996\u5c3e\u82e5\u6709\u7a7a\u683c\u662f\u5408\u6cd5\u7684 // \u7279\u5224 if ( s == null || s . length == 0 ) return false // \u5b57\u7b26\u4e32s\u662f\u5426\u662f\u4e00\u4e2a\u6570\u5b57 var isNum = false // Step1: \u6dfb\u52a0\u7ed3\u675f\u6807\u5fd7 s += '*' . toString () // Step2: \u8df3\u8fc7\u5b57\u7b26\u4e32\u9996\u90e8\u7684\u6240\u6709\u7a7a\u683c\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09 while ( s [ index ] == ' ' ) index ++ // Step3: \u6574\u6570\u90e8\u5206 isNum = scanInteger ( s ) // Step4. \u5c0f\u6570\u90e8\u5206\uff08\u5982\u679c\u5b58\u5728\u5c0f\u6570\u70b9\u7684\u8bdd\uff09 if ( s [ index ] == '.' ) { // \u8df3\u8fc7\u5c0f\u6570\u70b9 index ++ // \u5904\u7406\u5c0f\u6570\u90e8\u5206\uff0c\u5c0f\u6570\u70b9\u5de6\u53f3\u4e24\u8fb9\u53ea\u8981\u6709\u4e00\u8fb9\u6709\u6570\u5b57\u5c31\u5408\u6cd5\uff0c\u6240\u4ee5\u4f7f\u7528\u300c || \u300d isNum = scanUnsignedInteger ( s ) || isNum } // Step5. \u6307\u6570\u90e8\u5206\uff08\u5982\u679c\u5b58\u5728e\u6216E\u7684\u8bdd\uff09 if ( s [ index ] == 'E' || s [ index ] == 'e' ) { // \u8df3\u8fc7E\u6216e index ++ // \u5904\u7406\u6307\u6570\u90e8\u5206\uff0ce\u6216E\u7684\u4e24\u8fb9\u90fd\u5fc5\u987b\u6709\u6570\u5b57\uff0c\u6240\u4ee5\u4f7f\u7528\u300c && \u300d isNum = scanInteger ( s ) && isNum } // Step6. \u8df3\u8fc7\u5b57\u7b26\u4e32\u5c3e\u90e8\u7684\u6240\u6709\u7a7a\u683c\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09 while ( s [ index ] == ' ' ) index ++ // Step7. \u770b\u662f\u5426\u904d\u5386\u5230\u4e86\u5b57\u7b26\u4e32\u6700\u540e\uff0c\u5982\u679c\u6ca1\u6709\u5230\u6700\u540e\u7684\u8bdd\uff0c\u4e00\u5b9a\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57 // \u5982\u679c\u904d\u5386\u5230\u4e86\u6700\u540e\u4e14isNum\u4e3atrue\uff0c\u90a3\u4e48s\u5c31\u662f\u4e00\u4e2a\u6570\u5b57 isNum = isNum && s [ index ] == '*' return isNum } // \u626b\u63cf\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dB\uff08\u5c0f\u6570\u90e8\u5206\uff09 // \u5224\u65ad\u5b57\u7b26\u4e32\u5185\u662f\u5426\u5305\u542b\u65e0\u7b26\u53f7\u6570 fun scanUnsignedInteger ( str : String ): Boolean { // \u8bb0\u4e0b\u6700\u5f00\u59cb\u7684\u4f4d\u7f6e val start = index // \u662f\u6570\u5b57\u5c31\u4e00\u76f4\u904d\u5386\u4e0b\u53bb while ( str [ index ] >= '0' && str [ index ] <= '9' ) index ++ // \u82e5index>start\u8bf4\u660e\u53d1\u73b0\u4e86\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5426\u5219\u8bf4\u660e\u4e0d\u5305\u542b\u65e0\u7b26\u53f7\u6574\u6570 return index > start } // \u626b\u63cf\u6709\u7b26\u53f7\u6574\u6570\uff0c\u7528\u4e8e\u5339\u914dA\uff08\u6574\u6570\u90e8\u5206\uff09\u548cC\uff08\u6307\u6570\u90e8\u5206\uff09 // \u5224\u65ad\u5b57\u7b26\u4e32\u5185\u662f\u5426\u5305\u542b\u6709\u7b26\u53f7\u6574\u6570 fun scanInteger ( str : String ): Boolean { // \u5982\u679c\u662f\u6709\u7b26\u53f7\u7684\uff0c\u8df3\u8fc7\u8fd9\u4e2a\u7b26\u53f7\uff0c\u7136\u540e\u628a\u540e\u9762\u7684\u5b57\u7b26\u4e32\u4ea4\u7ed9scanUnsignedInteger\u5904\u7406 if ( str [ index ] == '+' || str [ index ] == '-' ) index ++ return scanUnsignedInteger ( str ) } } \u8fd8\u6709\u4e2a\u89e3\u6cd5\u662f\u7528\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u6765\u505a\u7684\uff0c\u76f4\u63a5\u770b K\u4f6c\u7684\u9898\u89e3 \u5427\uff0c\u6211\u770b\u7740\u5c31\u4e0d\u60f3\u505aOTZ\u3002#TODO","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-20/#3","text":"https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/ https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/solution/mian-shi-ti-20-biao-shi-shu-zhi-de-zi-fu-chuan-y-2/ // \u8fd8\u6ca1\u770b https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/solution/zui-jian-dan-si-lu-xiang-xi-zhu-shi-zheng-shu-xiao/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-21/","text":"1. \u95ee\u9898 \u00b6 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1anums = [1,2,3,4] \u8f93\u51fa\uff1a[1,3,2,4] \u6ce8\uff1a[3,1,2,4] \u4e5f\u662f\u6b63\u786e\u7684\u7b54\u6848\u4e4b\u4e00\u3002 \u63d0\u793a\uff1a - 1 <= nums.length <= 50000 - 1 <= nums[i] <= 10000 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 class Solution { public int [] exchange ( int [] nums ) { // \u4f7f\u7528\u53cc\u6307\u9488i\u548cj\uff0ci\u4ece\u5de6\u5411\u53f3\u79fb\u52a8\uff0cj\u4ece\u53f3\u5411\u5de6\u79fb\u52a8 int i = 0 ; int j = nums . length - 1 ; // \u5de5\u5177\u4ebatmp int tmp ; // i\u548cj\u6ca1\u6709\u76f8\u9047\u5c31\u4e00\u76f4\u5faa\u73af\u4e0b\u53bb while ( i < j ) { /** * \u9664\u4e86\u4f7f\u7528 n%2 \u662f\u5426\u7b49\u4e8e 0 \u6765\u5224\u65adn\u7684\u5947\u5076\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 n&1 \u662f\u5426\u7b49\u4e8e 0 \u6765\u5224\u65ad n \u7684\u5947\u5076 * \u5982\u679c n&1 == 0 \u8bf4\u660e n \u662f\u5076\u6570\uff0c\u5982\u679c n&1 == 1 \u8bf4\u660e n \u662f\u5947\u6570\u3002 * * i \u4ece\u5de6\u5f80\u53f3\u5bfb\u627e\u5076\u6570\uff0cj \u4ece\u53f3\u5f80\u5de6\u5bfb\u627e\u5947\u6570\uff0c\u627e\u5230\u4e86\u5c31\u5c06\u4e8c\u8005\u6307\u5411\u7684\u6570\u5b57\u4ea4\u6362\u4e00\u4e0b */ // \u5982\u679c i \u6307\u5411\u7684\u6570\u5b57\u662f\u5947\u6570\u5c31\u4e0d\u505c\u7684\u5f80\u53f3\u79fb\u52a8 while ( i < j && ( nums [ i ] & 1 ) == 1 ) i ++ ; // \u5982\u679c j \u6307\u5411\u7684\u6570\u5b57\u662f\u5076\u6570\u5c31\u4e0d\u505c\u7684\u5f80\u5de6\u79fb\u52a8 while ( i < j && ( nums [ j ] & 1 ) == 0 ) j -- ; // \u5f53 i \u6307\u5411\u4e86\u5076\u6570\uff0cj \u6307\u5411\u4e86\u5947\u6570\uff0c\u5c31\u4ea4\u6362\u4e8c\u8005\u6307\u5411\u7684\u6570\u5b57\uff0c\u6d3e\u51fa\u5de5\u5177\u4eba tmp tmp = nums [ i ] ; nums [ i ] = nums [ j ] ; nums [ j ] = tmp ; } return nums ; } } 2.2 Kotlin \u00b6 class Solution { fun exchange ( nums : IntArray ): IntArray { // \u4f7f\u7528\u53cc\u6307\u9488i\u548cj\uff0ci\u4ece\u5de6\u5411\u53f3\u79fb\u52a8\uff0cj\u4ece\u53f3\u5411\u5de6\u79fb\u52a8 var i = 0 var j = nums . size - 1 // \u5de5\u5177\u4ebatmp var tmp : Int // i\u548cj\u6ca1\u6709\u76f8\u9047\u5c31\u4e00\u76f4\u5faa\u73af\u4e0b\u53bb while ( i < j ) { /** * \u9664\u4e86\u4f7f\u7528 n%2 \u662f\u5426\u7b49\u4e8e 0 \u6765\u5224\u65adn\u7684\u5947\u5076\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 n&1 \u662f\u5426\u7b49\u4e8e 0 \u6765\u5224\u65ad n \u7684\u5947\u5076 * \u5982\u679c n&1 == 0 \u8bf4\u660e n \u662f\u5076\u6570\uff0c\u5982\u679c n&1 == 1 \u8bf4\u660e n \u662f\u5947\u6570\u3002 * * i \u4ece\u5de6\u5f80\u53f3\u5bfb\u627e\u5076\u6570\uff0cj \u4ece\u53f3\u5f80\u5de6\u5bfb\u627e\u5947\u6570\uff0c\u627e\u5230\u4e86\u5c31\u5c06\u4e8c\u8005\u6307\u5411\u7684\u6570\u5b57\u4ea4\u6362\u4e00\u4e0b */ // \u5982\u679c i \u6307\u5411\u7684\u6570\u5b57\u662f\u5947\u6570\u5c31\u4e0d\u505c\u7684\u5f80\u53f3\u79fb\u52a8 while ( i < j && nums [ i ] and 1 == 1 ) i ++ // \u5982\u679c j \u6307\u5411\u7684\u6570\u5b57\u662f\u5076\u6570\u5c31\u4e0d\u505c\u7684\u5f80\u5de6\u79fb\u52a8 while ( i < j && nums [ j ] and 1 == 0 ) j -- // \u5f53 i \u6307\u5411\u4e86\u5076\u6570\uff0cj \u6307\u5411\u4e86\u5947\u6570\uff0c\u5c31\u4ea4\u6362\u4e8c\u8005\u6307\u5411\u7684\u6570\u5b57\uff0c\u6d3e\u51fa\u5de5\u5177\u4eba tmp tmp = nums [ i ] nums [ i ] = nums [ j ] nums [ j ] = tmp } return nums } } 2.3 \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 O(N)\uff1aN\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u4e24\u4e2a\u6307\u9488\u4f1a\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\uff1a\u4e24\u4e2a\u53cc\u6307\u9488\u4f7f\u7528\u7684\u662f\u5e38\u6570\u5927\u5c0f\u7684\u989d\u5916\u7a7a\u95f4\u3002 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/ https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/solution/mian-shi-ti-21-diao-zheng-shu-zu-shun-xu-shi-qi-4/","title":"LCOF 21. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-21/#1","text":"\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u5947\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u5076\u6570\u4f4d\u4e8e\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1anums = [1,2,3,4] \u8f93\u51fa\uff1a[1,3,2,4] \u6ce8\uff1a[3,1,2,4] \u4e5f\u662f\u6b63\u786e\u7684\u7b54\u6848\u4e4b\u4e00\u3002 \u63d0\u793a\uff1a - 1 <= nums.length <= 50000 - 1 <= nums[i] <= 10000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-21/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-21/#21-java","text":"class Solution { public int [] exchange ( int [] nums ) { // \u4f7f\u7528\u53cc\u6307\u9488i\u548cj\uff0ci\u4ece\u5de6\u5411\u53f3\u79fb\u52a8\uff0cj\u4ece\u53f3\u5411\u5de6\u79fb\u52a8 int i = 0 ; int j = nums . length - 1 ; // \u5de5\u5177\u4ebatmp int tmp ; // i\u548cj\u6ca1\u6709\u76f8\u9047\u5c31\u4e00\u76f4\u5faa\u73af\u4e0b\u53bb while ( i < j ) { /** * \u9664\u4e86\u4f7f\u7528 n%2 \u662f\u5426\u7b49\u4e8e 0 \u6765\u5224\u65adn\u7684\u5947\u5076\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 n&1 \u662f\u5426\u7b49\u4e8e 0 \u6765\u5224\u65ad n \u7684\u5947\u5076 * \u5982\u679c n&1 == 0 \u8bf4\u660e n \u662f\u5076\u6570\uff0c\u5982\u679c n&1 == 1 \u8bf4\u660e n \u662f\u5947\u6570\u3002 * * i \u4ece\u5de6\u5f80\u53f3\u5bfb\u627e\u5076\u6570\uff0cj \u4ece\u53f3\u5f80\u5de6\u5bfb\u627e\u5947\u6570\uff0c\u627e\u5230\u4e86\u5c31\u5c06\u4e8c\u8005\u6307\u5411\u7684\u6570\u5b57\u4ea4\u6362\u4e00\u4e0b */ // \u5982\u679c i \u6307\u5411\u7684\u6570\u5b57\u662f\u5947\u6570\u5c31\u4e0d\u505c\u7684\u5f80\u53f3\u79fb\u52a8 while ( i < j && ( nums [ i ] & 1 ) == 1 ) i ++ ; // \u5982\u679c j \u6307\u5411\u7684\u6570\u5b57\u662f\u5076\u6570\u5c31\u4e0d\u505c\u7684\u5f80\u5de6\u79fb\u52a8 while ( i < j && ( nums [ j ] & 1 ) == 0 ) j -- ; // \u5f53 i \u6307\u5411\u4e86\u5076\u6570\uff0cj \u6307\u5411\u4e86\u5947\u6570\uff0c\u5c31\u4ea4\u6362\u4e8c\u8005\u6307\u5411\u7684\u6570\u5b57\uff0c\u6d3e\u51fa\u5de5\u5177\u4eba tmp tmp = nums [ i ] ; nums [ i ] = nums [ j ] ; nums [ j ] = tmp ; } return nums ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-21/#22-kotlin","text":"class Solution { fun exchange ( nums : IntArray ): IntArray { // \u4f7f\u7528\u53cc\u6307\u9488i\u548cj\uff0ci\u4ece\u5de6\u5411\u53f3\u79fb\u52a8\uff0cj\u4ece\u53f3\u5411\u5de6\u79fb\u52a8 var i = 0 var j = nums . size - 1 // \u5de5\u5177\u4ebatmp var tmp : Int // i\u548cj\u6ca1\u6709\u76f8\u9047\u5c31\u4e00\u76f4\u5faa\u73af\u4e0b\u53bb while ( i < j ) { /** * \u9664\u4e86\u4f7f\u7528 n%2 \u662f\u5426\u7b49\u4e8e 0 \u6765\u5224\u65adn\u7684\u5947\u5076\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 n&1 \u662f\u5426\u7b49\u4e8e 0 \u6765\u5224\u65ad n \u7684\u5947\u5076 * \u5982\u679c n&1 == 0 \u8bf4\u660e n \u662f\u5076\u6570\uff0c\u5982\u679c n&1 == 1 \u8bf4\u660e n \u662f\u5947\u6570\u3002 * * i \u4ece\u5de6\u5f80\u53f3\u5bfb\u627e\u5076\u6570\uff0cj \u4ece\u53f3\u5f80\u5de6\u5bfb\u627e\u5947\u6570\uff0c\u627e\u5230\u4e86\u5c31\u5c06\u4e8c\u8005\u6307\u5411\u7684\u6570\u5b57\u4ea4\u6362\u4e00\u4e0b */ // \u5982\u679c i \u6307\u5411\u7684\u6570\u5b57\u662f\u5947\u6570\u5c31\u4e0d\u505c\u7684\u5f80\u53f3\u79fb\u52a8 while ( i < j && nums [ i ] and 1 == 1 ) i ++ // \u5982\u679c j \u6307\u5411\u7684\u6570\u5b57\u662f\u5076\u6570\u5c31\u4e0d\u505c\u7684\u5f80\u5de6\u79fb\u52a8 while ( i < j && nums [ j ] and 1 == 0 ) j -- // \u5f53 i \u6307\u5411\u4e86\u5076\u6570\uff0cj \u6307\u5411\u4e86\u5947\u6570\uff0c\u5c31\u4ea4\u6362\u4e8c\u8005\u6307\u5411\u7684\u6570\u5b57\uff0c\u6d3e\u51fa\u5de5\u5177\u4eba tmp tmp = nums [ i ] nums [ i ] = nums [ j ] nums [ j ] = tmp } return nums } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-21/#23","text":"\u65f6\u95f4\u590d\u6742\u5ea6 O(N)\uff1aN\u662f\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u4e24\u4e2a\u6307\u9488\u4f1a\u904d\u5386\u5b8c\u6574\u4e2a\u6570\u7ec4\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\uff1a\u4e24\u4e2a\u53cc\u6307\u9488\u4f7f\u7528\u7684\u662f\u5e38\u6570\u5927\u5c0f\u7684\u989d\u5916\u7a7a\u95f4\u3002","title":"2.3 \u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-21/#3","text":"https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/ https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/solution/mian-shi-ti-21-diao-zheng-shu-zu-shun-xu-shi-qi-4/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-22/","text":"1. \u95ee\u9898 \u00b6 \u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9\u3002\u4e3a\u4e86\u7b26\u5408\u5927\u591a\u6570\u4eba\u7684\u4e60\u60ef\uff0c\u672c\u9898\u4ece1\u5f00\u59cb\u8ba1\u6570\uff0c\u5373\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u662f\u5012\u6570\u7b2c1\u4e2a\u8282\u70b9\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u94fe\u8868\u67096\u4e2a\u8282\u70b9\uff0c\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u5b83\u4eec\u7684\u503c\u4f9d\u6b21\u662f1\u30012\u30013\u30014\u30015\u30016\u3002\u8fd9\u4e2a\u94fe\u8868\u7684\u5012\u6570\u7b2c3\u4e2a\u8282\u70b9\u662f\u503c\u4e3a4\u7684\u8282\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c k = 2. \u8fd4\u56de\u94fe\u8868 4->5. 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode getKthFromEnd ( ListNode head , int k ) { // \u53cc\u6307\u9488 ListNode pre = head ; ListNode aft = head ; // \u5148\u5c06pre\u79fb\u52a8\u5230\u7b2ck\u4e2a\u7ed3\u70b9\u7684\u4f4d\u7f6e for ( int i = 0 ; i < k ; i ++ ) { pre = pre . next ; } // \u7136\u540e\u540c\u65f6\u79fb\u52a8\u4e24\u4e2a\u6307\u9488pre\u548caft\uff0c\u76f4\u5230pre\u4e3a\u7a7a\uff0c\u6b64\u65f6aft\u6307\u5411\u7684\u5c31\u662f\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9 while ( pre != null ) { pre = pre . next ; aft = aft . next ; } // \u8fd4\u56deaft\u5373\u53ef return aft ; } } 2.2 Kotlin \u00b6 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { fun getKthFromEnd ( head : ListNode , k : Int ): ListNode { // \u53cc\u6307\u9488 var pre : ListNode ? = head var aft = head // \u5148\u5c06pre\u79fb\u52a8\u5230\u7b2ck\u4e2a\u7ed3\u70b9\u7684\u4f4d\u7f6e for ( i in 0 until k ) { pre = pre !! . next } // \u7136\u540e\u540c\u65f6\u79fb\u52a8\u4e24\u4e2a\u6307\u9488pre\u548caft\uff0c\u76f4\u5230pre\u4e3a\u7a7a\uff0c\u6b64\u65f6aft\u6307\u5411\u7684\u5c31\u662f\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9 while ( pre != null ) { pre = pre !! . next aft = aft . next } // \u8fd4\u56deaft\u5373\u53ef return aft } } 2.3 \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 O(N)\uff1aN\u662f\u94fe\u8868\u7684\u7ed3\u70b9\u6570\u91cf\u3002\u603b\u4f53\u6765\u770b\uff0cpre\u8d70\u4e86N\u6b65\uff0caft\u8d70\u4e86N-k\u6b65\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\uff1a\u53cc\u6307\u9488pre\u548caft\u4f7f\u7528\u4e86\u5e38\u6570\u5927\u5c0f\u7684\u989d\u5916\u7a7a\u95f4\u3002 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/ https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/solution/mian-shi-ti-22-lian-biao-zhong-dao-shu-di-kge-j-11/","title":"LCOF 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-22/#1","text":"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9\u3002\u4e3a\u4e86\u7b26\u5408\u5927\u591a\u6570\u4eba\u7684\u4e60\u60ef\uff0c\u672c\u9898\u4ece1\u5f00\u59cb\u8ba1\u6570\uff0c\u5373\u94fe\u8868\u7684\u5c3e\u8282\u70b9\u662f\u5012\u6570\u7b2c1\u4e2a\u8282\u70b9\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u94fe\u8868\u67096\u4e2a\u8282\u70b9\uff0c\u4ece\u5934\u8282\u70b9\u5f00\u59cb\uff0c\u5b83\u4eec\u7684\u503c\u4f9d\u6b21\u662f1\u30012\u30013\u30014\u30015\u30016\u3002\u8fd9\u4e2a\u94fe\u8868\u7684\u5012\u6570\u7b2c3\u4e2a\u8282\u70b9\u662f\u503c\u4e3a4\u7684\u8282\u70b9\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c k = 2. \u8fd4\u56de\u94fe\u8868 4->5.","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-22/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-22/#21-java","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode getKthFromEnd ( ListNode head , int k ) { // \u53cc\u6307\u9488 ListNode pre = head ; ListNode aft = head ; // \u5148\u5c06pre\u79fb\u52a8\u5230\u7b2ck\u4e2a\u7ed3\u70b9\u7684\u4f4d\u7f6e for ( int i = 0 ; i < k ; i ++ ) { pre = pre . next ; } // \u7136\u540e\u540c\u65f6\u79fb\u52a8\u4e24\u4e2a\u6307\u9488pre\u548caft\uff0c\u76f4\u5230pre\u4e3a\u7a7a\uff0c\u6b64\u65f6aft\u6307\u5411\u7684\u5c31\u662f\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9 while ( pre != null ) { pre = pre . next ; aft = aft . next ; } // \u8fd4\u56deaft\u5373\u53ef return aft ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-22/#22-kotlin","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { fun getKthFromEnd ( head : ListNode , k : Int ): ListNode { // \u53cc\u6307\u9488 var pre : ListNode ? = head var aft = head // \u5148\u5c06pre\u79fb\u52a8\u5230\u7b2ck\u4e2a\u7ed3\u70b9\u7684\u4f4d\u7f6e for ( i in 0 until k ) { pre = pre !! . next } // \u7136\u540e\u540c\u65f6\u79fb\u52a8\u4e24\u4e2a\u6307\u9488pre\u548caft\uff0c\u76f4\u5230pre\u4e3a\u7a7a\uff0c\u6b64\u65f6aft\u6307\u5411\u7684\u5c31\u662f\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9 while ( pre != null ) { pre = pre !! . next aft = aft . next } // \u8fd4\u56deaft\u5373\u53ef return aft } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-22/#23","text":"\u65f6\u95f4\u590d\u6742\u5ea6 O(N)\uff1aN\u662f\u94fe\u8868\u7684\u7ed3\u70b9\u6570\u91cf\u3002\u603b\u4f53\u6765\u770b\uff0cpre\u8d70\u4e86N\u6b65\uff0caft\u8d70\u4e86N-k\u6b65\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6 O(1)\uff1a\u53cc\u6307\u9488pre\u548caft\u4f7f\u7528\u4e86\u5e38\u6570\u5927\u5c0f\u7684\u989d\u5916\u7a7a\u95f4\u3002","title":"2.3 \u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-22/#3","text":"https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/ https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/solution/mian-shi-ti-22-lian-biao-zhong-dao-shu-di-kge-j-11/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-24/","text":"1. \u95ee\u9898 \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u53cd\u8f6c\u8be5\u94fe\u8868\u5e76\u8f93\u51fa\u53cd\u8f6c\u540e\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL \u9650\u5236\uff1a - 0 <= \u8282\u70b9\u4e2a\u6570 <= 5000 2. \u89e3\u6cd5 - \u9012\u5f52 \u00b6 2.1 Java \u00b6 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList ( ListNode head ) { // \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if ( head == null || head . next == null ) return head ; /** * \u5047\u8bbe\u94fe\u8868\u4e3a1->2->3->4->5 * \u6700\u540e\u4e00\u5c42\u9012\u5f52\u8fd4\u56de\u7684cur\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b95 */ ListNode cur = reverseList ( head . next ); // \u6b64\u65f6\u7684head\u662f4\uff0c\u4e0b\u9762\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u662f\u8ba95\u6307\u54114\uff0c\u5b8c\u6210\u4e00\u6b21\u53cd\u8f6c head . next . next = head ; // 4\u7684next\u672c\u6765\u662f5\uff0c\u73b0\u5728\u7f6e\u4e3a\u7a7a\uff0c\u9632\u6b62\u4ea7\u751f\u5faa\u73af head . next = null ; // \u8fd4\u56decur\u5373\u53ef return cur ; } } 2.2 Kotlin \u00b6 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { fun reverseList ( head : ListNode ?): ListNode ? { // \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if ( head == null || head !! . next == null ) return head /** * \u5047\u8bbe\u94fe\u8868\u4e3a1->2->3->4->5 * \u6700\u540e\u4e00\u5c42\u9012\u5f52\u8fd4\u56de\u7684cur\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b95 */ val cur = reverseList ( head !! . next ) // \u6b64\u65f6\u7684head\u662f4\uff0c\u4e0b\u9762\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u662f\u8ba95\u6307\u54114\uff0c\u5b8c\u6210\u4e00\u6b21\u53cd\u8f6c head !! . next . next = head // 4\u7684next\u672c\u6765\u662f5\uff0c\u73b0\u5728\u7f6e\u4e3a\u7a7a\uff0c\u9632\u6b62\u4ea7\u751f\u5faa\u73af head !! . next = null // \u8fd4\u56decur\u5373\u53ef return cur } } 2.3 \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0cn\u662f\u94fe\u8868\u7684\u957f\u5ea6\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7531\u4e8e\u4f7f\u7528\u9012\u5f52\uff0c\u5c06\u4f1a\u4f7f\u7528\u9690\u5f0f\u6808\u7a7a\u95f4\uff0c\u9012\u5f52\u6df1\u5ea6\u53ef\u80fd\u4f1a\u8fbe\u5230 n \u5c42\u3002 3. \u89e3\u6cd5 - \u53cc\u6307\u9488\u8fed\u4ee3 \u00b6 3.1 Java \u00b6 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList ( ListNode head ) { // \u6307\u5411cur\u7684\u524d\u4e00\u4e2a\u7ed3\u70b9 ListNode pre = null ; // cur\u6700\u5148\u6307\u5411head ListNode cur = head ; // tmp\u5de5\u5177\u4eba\u7528\u6765\u4fdd\u5b58cur\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 ListNode tmp = null ; // cur\u904d\u5386\u6574\u4e2a\u94fe\u8868\uff0c\u5f53cur\u6307\u5411\u7a7a\uff0c\u904d\u5386\u5c31\u7ed3\u675f\u4e86 while ( cur != null ) { tmp = cur . next ; cur . next = pre ; pre = cur ; cur = tmp ; } // \u522b\u5199\u6210cur\u4e86\uff0c\u9000\u51fa\u4e0a\u9762\u7684\u5faa\u73af\u4e4b\u540ecur\u5c31\u4e3a\u7a7a\u4e86 return pre ; } } 3.2 Kotlin \u00b6 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { fun reverseList ( head : ListNode ): ListNode ? { // \u6307\u5411cur\u7684\u524d\u4e00\u4e2a\u7ed3\u70b9 var pre : ListNode ? = null // cur\u6700\u5148\u6307\u5411head var cur : ListNode ? = head // tmp\u5de5\u5177\u4eba\u7528\u6765\u4fdd\u5b58cur\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 var tmp : ListNode ? = null // cur\u904d\u5386\u6574\u4e2a\u94fe\u8868\uff0c\u5f53cur\u6307\u5411\u7a7a\uff0c\u904d\u5386\u5c31\u7ed3\u675f\u4e86 while ( cur != null ) { tmp = cur !! . next cur !! . next = pre pre = cur cur = tmp } // \u522b\u5199\u6210cur\u4e86\uff0c\u9000\u51fa\u4e0a\u9762\u7684\u5faa\u73af\u4e4b\u540ecur\u5c31\u4e3a\u7a7a\u4e86 return pre } } // \u6d4b\u8bd5\u6837\u4f8b\u4e3a[]\u65f6\u62a5\u9519 Exception in thread \"main\" java.lang.IllegalStateException: param_1 must not be null \u5e94\u8be5\u662fkotlin\u4e0d\u5141\u8bb8\u53c2\u6570\u4e3a\u7a7a 3.3 \u590d\u6742\u5ea6\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0cn\u662f\u94fe\u8868\u7684\u957f\u5ea6\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002 4. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/solution/dong-hua-yan-shi-duo-chong-jie-fa-206-fan-zhuan-li/ https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-by-leetcode/","title":"LCOF 24. \u53cd\u8f6c\u94fe\u8868"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-24/#1","text":"\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u53cd\u8f6c\u8be5\u94fe\u8868\u5e76\u8f93\u51fa\u53cd\u8f6c\u540e\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002 \u793a\u4f8b: \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL \u9650\u5236\uff1a - 0 <= \u8282\u70b9\u4e2a\u6570 <= 5000","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-24/#2-","text":"","title":"2. \u89e3\u6cd5 - \u9012\u5f52"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-24/#21-java","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList ( ListNode head ) { // \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if ( head == null || head . next == null ) return head ; /** * \u5047\u8bbe\u94fe\u8868\u4e3a1->2->3->4->5 * \u6700\u540e\u4e00\u5c42\u9012\u5f52\u8fd4\u56de\u7684cur\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b95 */ ListNode cur = reverseList ( head . next ); // \u6b64\u65f6\u7684head\u662f4\uff0c\u4e0b\u9762\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u662f\u8ba95\u6307\u54114\uff0c\u5b8c\u6210\u4e00\u6b21\u53cd\u8f6c head . next . next = head ; // 4\u7684next\u672c\u6765\u662f5\uff0c\u73b0\u5728\u7f6e\u4e3a\u7a7a\uff0c\u9632\u6b62\u4ea7\u751f\u5faa\u73af head . next = null ; // \u8fd4\u56decur\u5373\u53ef return cur ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-24/#22-kotlin","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { fun reverseList ( head : ListNode ?): ListNode ? { // \u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 if ( head == null || head !! . next == null ) return head /** * \u5047\u8bbe\u94fe\u8868\u4e3a1->2->3->4->5 * \u6700\u540e\u4e00\u5c42\u9012\u5f52\u8fd4\u56de\u7684cur\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u8282\u70b95 */ val cur = reverseList ( head !! . next ) // \u6b64\u65f6\u7684head\u662f4\uff0c\u4e0b\u9762\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u662f\u8ba95\u6307\u54114\uff0c\u5b8c\u6210\u4e00\u6b21\u53cd\u8f6c head !! . next . next = head // 4\u7684next\u672c\u6765\u662f5\uff0c\u73b0\u5728\u7f6e\u4e3a\u7a7a\uff0c\u9632\u6b62\u4ea7\u751f\u5faa\u73af head !! . next = null // \u8fd4\u56decur\u5373\u53ef return cur } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-24/#23","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0cn\u662f\u94fe\u8868\u7684\u957f\u5ea6\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7531\u4e8e\u4f7f\u7528\u9012\u5f52\uff0c\u5c06\u4f1a\u4f7f\u7528\u9690\u5f0f\u6808\u7a7a\u95f4\uff0c\u9012\u5f52\u6df1\u5ea6\u53ef\u80fd\u4f1a\u8fbe\u5230 n \u5c42\u3002","title":"2.3 \u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-24/#3-","text":"","title":"3. \u89e3\u6cd5 - \u53cc\u6307\u9488\u8fed\u4ee3"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-24/#31-java","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList ( ListNode head ) { // \u6307\u5411cur\u7684\u524d\u4e00\u4e2a\u7ed3\u70b9 ListNode pre = null ; // cur\u6700\u5148\u6307\u5411head ListNode cur = head ; // tmp\u5de5\u5177\u4eba\u7528\u6765\u4fdd\u5b58cur\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 ListNode tmp = null ; // cur\u904d\u5386\u6574\u4e2a\u94fe\u8868\uff0c\u5f53cur\u6307\u5411\u7a7a\uff0c\u904d\u5386\u5c31\u7ed3\u675f\u4e86 while ( cur != null ) { tmp = cur . next ; cur . next = pre ; pre = cur ; cur = tmp ; } // \u522b\u5199\u6210cur\u4e86\uff0c\u9000\u51fa\u4e0a\u9762\u7684\u5faa\u73af\u4e4b\u540ecur\u5c31\u4e3a\u7a7a\u4e86 return pre ; } }","title":"3.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-24/#32-kotlin","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { fun reverseList ( head : ListNode ): ListNode ? { // \u6307\u5411cur\u7684\u524d\u4e00\u4e2a\u7ed3\u70b9 var pre : ListNode ? = null // cur\u6700\u5148\u6307\u5411head var cur : ListNode ? = head // tmp\u5de5\u5177\u4eba\u7528\u6765\u4fdd\u5b58cur\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 var tmp : ListNode ? = null // cur\u904d\u5386\u6574\u4e2a\u94fe\u8868\uff0c\u5f53cur\u6307\u5411\u7a7a\uff0c\u904d\u5386\u5c31\u7ed3\u675f\u4e86 while ( cur != null ) { tmp = cur !! . next cur !! . next = pre pre = cur cur = tmp } // \u522b\u5199\u6210cur\u4e86\uff0c\u9000\u51fa\u4e0a\u9762\u7684\u5faa\u73af\u4e4b\u540ecur\u5c31\u4e3a\u7a7a\u4e86 return pre } } // \u6d4b\u8bd5\u6837\u4f8b\u4e3a[]\u65f6\u62a5\u9519 Exception in thread \"main\" java.lang.IllegalStateException: param_1 must not be null \u5e94\u8be5\u662fkotlin\u4e0d\u5141\u8bb8\u53c2\u6570\u4e3a\u7a7a","title":"3.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-24/#33","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0cn\u662f\u94fe\u8868\u7684\u957f\u5ea6\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002","title":"3.3 \u590d\u6742\u5ea6\u5206\u6790"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-24/#4","text":"https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/solution/dong-hua-yan-shi-duo-chong-jie-fa-206-fan-zhuan-li/ https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-by-leetcode/","title":"4. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/","text":"1. \u95ee\u9898 \u00b6 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1amatrix = [[1,2,3],[4,5,6],[7,8,9]] \u8f93\u51fa\uff1a[1,2,3,6,9,8,7,4,5] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1amatrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] \u8f93\u51fa\uff1a[1,2,3,4,8,12,11,10,9,5,6,7] \u9650\u5236\uff1a - 0 <= matrix.length <= 100 - 0 <= matrix[i].length <= 100 2. \u89e3\u6cd5 \u00b6 2.1 Java \u00b6 class Solution { public int [] spiralOrder ( int [][] matrix ) { // \u7a7a\u503c\u5904\u7406 if ( matrix . length == 0 ) return new int [ 0 ] ; // \u521d\u59cb\u5316\u8fb9\u754c\u548c\u7ed3\u679c\u6570\u7ec4 int left = 0 , right = matrix [ 0 ] . length - 1 ; int top = 0 , bottom = matrix . length - 1 ; int [] res = new int [ matrix [ 0 ] . length * matrix . length ] ; // \u7ed3\u679c\u6570\u7ec4\u4e0b\u6807 int index = 0 ; // \u6309\u7167\u65b9\u5411\u8fdb\u884c\u6253\u5370 while ( true ) { // \u4ece\u5de6\u5230\u53f3 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( int i = left ; i <= right ; i ++ ) res [ index ++] = matrix [ top ][ i ] ; // 2. \u4e0a\u8fb9\u754c\u6536\u7f29\uff08\u4e0b\u79fb\uff09 top ++ ; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( top > bottom ) break ; // \u4ece\u4e0a\u5230\u4e0b // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( int i = top ; i <= bottom ; i ++ ) res [ index ++] = matrix [ i ][ right ] ; // 2. \u53f3\u8fb9\u754c\u6536\u7f29\uff08\u5de6\u79fb\uff09 right -- ; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u53f3\u8fb9\u754c\u548c\u5de6\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( left > right ) break ; // \u4ece\u53f3\u5230\u5de6 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( int i = right ; i >= left ; i -- ) res [ index ++] = matrix [ bottom ][ i ] ; // 2. \u4e0b\u8fb9\u754c\u6536\u7f29\uff08\u4e0a\u79fb) bottom -- ; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0b\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( top > bottom ) break ; // \u4ece\u4e0b\u5230\u4e0a // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( int i = bottom ; i >= top ; i -- ) res [ index ++] = matrix [ i ][ left ] ; // 2. \u5de6\u8fb9\u754c\u6536\u7f29\uff08\u53f3\u79fb\uff09 left ++ ; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( left > right ) break ; } return res ; } } 2.2 Kotlin \u00b6 class Solution { fun spiralOrder ( matrix : Array < IntArray >): IntArray { // \u7a7a\u503c\u5904\u7406 if ( matrix . size == 0 ) return IntArray ( 0 ) // \u521d\u59cb\u5316\u8fb9\u754c\u548c\u7ed3\u679c\u6570\u7ec4 var left = 0 var right = matrix [ 0 ]. size - 1 var top = 0 var bottom = matrix . size - 1 var res = IntArray ( matrix [ 0 ]. size * matrix . size ) // \u7ed3\u679c\u6570\u7ec4\u4e0b\u6807 var index = 0 while ( true ) { // \u4ece\u5de6\u5230\u53f3 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( i in left .. right ) res [ index ++] = matrix [ top ][ i ] // 2. \u4e0a\u8fb9\u754c\u6536\u7f29\uff08\u4e0b\u79fb\uff09 top ++ // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( top > bottom ) break // \u4ece\u4e0a\u5230\u4e0b // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( i in top .. bottom ) res [ index ++] = matrix [ i ][ right ]; // 2. \u53f3\u8fb9\u754c\u6536\u7f29\uff08\u5de6\u79fb\uff09 right -- // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u53f3\u8fb9\u754c\u548c\u5de6\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( left > right ) break // \u4ece\u53f3\u5230\u5de6 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( i in right downTo left ) res [ index ++] = matrix [ bottom ][ i ] // 2. \u4e0b\u8fb9\u754c\u6536\u7f29\uff08\u4e0a\u79fb) bottom -- // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0b\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( top > bottom ) break // \u4ece\u4e0b\u5230\u4e0a // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( i in bottom downTo top ) res [ index ++] = matrix [ i ][ left ] // 2. \u5de6\u8fb9\u754c\u6536\u7f29\uff08\u53f3\u79fb\uff09 left ++ // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( left > right ) break } return res } } 3. \u53c2\u8003 \u00b6 \u300a\u5251\u6307 Offer\uff08\u7b2c 2 \u7248\uff09\u300b\uff1a\u9762\u8bd5\u989829. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 Krahets\uff1a\u9762\u8bd5\u989829. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635\uff08\u6a21\u62df\u3001\u8bbe\u5b9a\u8fb9\u754c\uff0c\u6e05\u6670\u56fe\u89e3\uff09 4. \u5b66\u4e60\u8349\u7a3f \u00b6","title":"LCOF 29. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#1","text":"\u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1amatrix = [[1,2,3],[4,5,6],[7,8,9]] \u8f93\u51fa\uff1a[1,2,3,6,9,8,7,4,5] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1amatrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] \u8f93\u51fa\uff1a[1,2,3,4,8,12,11,10,9,5,6,7] \u9650\u5236\uff1a - 0 <= matrix.length <= 100 - 0 <= matrix[i].length <= 100","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#2","text":"","title":"2. \u89e3\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#21-java","text":"class Solution { public int [] spiralOrder ( int [][] matrix ) { // \u7a7a\u503c\u5904\u7406 if ( matrix . length == 0 ) return new int [ 0 ] ; // \u521d\u59cb\u5316\u8fb9\u754c\u548c\u7ed3\u679c\u6570\u7ec4 int left = 0 , right = matrix [ 0 ] . length - 1 ; int top = 0 , bottom = matrix . length - 1 ; int [] res = new int [ matrix [ 0 ] . length * matrix . length ] ; // \u7ed3\u679c\u6570\u7ec4\u4e0b\u6807 int index = 0 ; // \u6309\u7167\u65b9\u5411\u8fdb\u884c\u6253\u5370 while ( true ) { // \u4ece\u5de6\u5230\u53f3 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( int i = left ; i <= right ; i ++ ) res [ index ++] = matrix [ top ][ i ] ; // 2. \u4e0a\u8fb9\u754c\u6536\u7f29\uff08\u4e0b\u79fb\uff09 top ++ ; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( top > bottom ) break ; // \u4ece\u4e0a\u5230\u4e0b // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( int i = top ; i <= bottom ; i ++ ) res [ index ++] = matrix [ i ][ right ] ; // 2. \u53f3\u8fb9\u754c\u6536\u7f29\uff08\u5de6\u79fb\uff09 right -- ; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u53f3\u8fb9\u754c\u548c\u5de6\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( left > right ) break ; // \u4ece\u53f3\u5230\u5de6 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( int i = right ; i >= left ; i -- ) res [ index ++] = matrix [ bottom ][ i ] ; // 2. \u4e0b\u8fb9\u754c\u6536\u7f29\uff08\u4e0a\u79fb) bottom -- ; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0b\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( top > bottom ) break ; // \u4ece\u4e0b\u5230\u4e0a // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( int i = bottom ; i >= top ; i -- ) res [ index ++] = matrix [ i ][ left ] ; // 2. \u5de6\u8fb9\u754c\u6536\u7f29\uff08\u53f3\u79fb\uff09 left ++ ; // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( left > right ) break ; } return res ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#22-kotlin","text":"class Solution { fun spiralOrder ( matrix : Array < IntArray >): IntArray { // \u7a7a\u503c\u5904\u7406 if ( matrix . size == 0 ) return IntArray ( 0 ) // \u521d\u59cb\u5316\u8fb9\u754c\u548c\u7ed3\u679c\u6570\u7ec4 var left = 0 var right = matrix [ 0 ]. size - 1 var top = 0 var bottom = matrix . size - 1 var res = IntArray ( matrix [ 0 ]. size * matrix . size ) // \u7ed3\u679c\u6570\u7ec4\u4e0b\u6807 var index = 0 while ( true ) { // \u4ece\u5de6\u5230\u53f3 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( i in left .. right ) res [ index ++] = matrix [ top ][ i ] // 2. \u4e0a\u8fb9\u754c\u6536\u7f29\uff08\u4e0b\u79fb\uff09 top ++ // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( top > bottom ) break // \u4ece\u4e0a\u5230\u4e0b // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( i in top .. bottom ) res [ index ++] = matrix [ i ][ right ]; // 2. \u53f3\u8fb9\u754c\u6536\u7f29\uff08\u5de6\u79fb\uff09 right -- // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u53f3\u8fb9\u754c\u548c\u5de6\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( left > right ) break // \u4ece\u53f3\u5230\u5de6 // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( i in right downTo left ) res [ index ++] = matrix [ bottom ][ i ] // 2. \u4e0b\u8fb9\u754c\u6536\u7f29\uff08\u4e0a\u79fb) bottom -- // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u4e0b\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( top > bottom ) break // \u4ece\u4e0b\u5230\u4e0a // 1. \u6309\u7167\u8fb9\u754c\u6253\u5370 for ( i in bottom downTo top ) res [ index ++] = matrix [ i ][ left ] // 2. \u5de6\u8fb9\u754c\u6536\u7f29\uff08\u53f3\u79fb\uff09 left ++ // 3. \u5224\u65ad\u6536\u7f29\u540e\u7684\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u662f\u5426\u76f8\u9047 if ( left > right ) break } return res } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#3","text":"\u300a\u5251\u6307 Offer\uff08\u7b2c 2 \u7248\uff09\u300b\uff1a\u9762\u8bd5\u989829. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 Krahets\uff1a\u9762\u8bd5\u989829. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635\uff08\u6a21\u62df\u3001\u8bbe\u5b9a\u8fb9\u754c\uff0c\u6e05\u6670\u56fe\u89e3\uff09","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-29/#4","text":"","title":"4. \u5b66\u4e60\u8349\u7a3f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/","text":"1. \u95ee\u9898 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u89c4\u5219\u628a\u5b83\u7ffb\u8bd1\u4e3a\u5b57\u7b26\u4e32\uff1a0 \u7ffb\u8bd1\u6210 \u201ca\u201d \uff0c1 \u7ffb\u8bd1\u6210 \u201cb\u201d\uff0c\u2026\u2026\uff0c11 \u7ffb\u8bd1\u6210 \u201cl\u201d\uff0c\u2026\u2026\uff0c25 \u7ffb\u8bd1\u6210 \u201cz\u201d\u3002\u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002\u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002 \u793a\u4f8b 1: \u8f93\u5165: 12258 \u8f93\u51fa: 5 \u89e3\u91ca: 12258\u67095\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\uff0c\u5206\u522b\u662f\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"\u548c\"mzi\" \u63d0\u793a\uff1a - 0 \u2264 num < 2^{31} 2^{31} 2. \u89e3\u6cd5 - \u52a8\u6001\u89c4\u5212 \u00b6 2.1 Java \u00b6 class Solution { public int translateNum ( int num ) { // \u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c06\u6574\u4e2a\u6570\u5b57\u5b58\u4e0b\u6765 String str = String . valueOf ( num ); int n = str . length (); // \u72b6\u6001\u6570\u7ec4 // dp[i]\u8868\u793a\u4ee5\u7b2ci\u4e2a\u6570\u5b57\u7ed3\u5c3e\u7684\u6570\u5b57\u7684\u7ffb\u8bd1\u65b9\u6848\u7684\u6570\u91cf int [] dp = new int [ n + 1 ] ; // \u8fb9\u754c\u503c dp [ 1 ] = 1 ; //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u65f6\uff0c\u7ffb\u8bd1\u65b9\u6848\u663e\u7136\u4e3a1 dp [ 0 ] = 1 ; //\u82e5\u524d\u4e24\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\uff0c\u90a3\u4e48dp[2]=dp[0]+dp[1], \u7531\u4e8edp[1]=1\u6240\u4ee5dp[0]=0 // \u904d\u5386\u5b57\u7b26\u4e32 for ( int i = 2 ; i <= n ; i ++ ) { // \u53d6\u51fa\u7b2ci-1\u4e2a\u6570\u5b57\u548c\u7b2ci\u4e2a\u6570\u5b57 // substring: [i, j) \u5de6\u95ed\u53f3\u5f00 // dp\u6570\u7ec4\u4e2d\uff0c\u6570\u5b57\u7684\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684 // \u4f46\u662f\u5b57\u7b26\u4e32\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5e94\u8be5\u662f(i-2, i) String curNum = str . substring ( i - 2 , i ); // \u8ba1\u7b97dp[i]\uff0c\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a if ( curNum . compareTo ( \"10\" ) >= 0 && curNum . compareTo ( \"25\" ) <= 0 ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ; } else { //\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u4e0d\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp [ i ] = dp [ i - 1 ] ; } } return dp [ n ] ; } } 2.2 Kotlin \u00b6 class Solution { fun translateNum ( num : Int ): Int { // \u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c06\u6574\u4e2a\u6570\u5b57\u5b58\u4e0b\u6765 var str = num . toString () var n = str . length // \u72b6\u6001\u6570\u7ec4 // dp[i]\u8868\u793a\u4ee5\u7b2ci\u4e2a\u6570\u5b57\u7ed3\u5c3e\u7684\u6570\u5b57\u7684\u7ffb\u8bd1\u65b9\u6848\u7684\u6570\u91cf var dp = IntArray ( n + 1 ) // \u8fb9\u754c\u503c dp [ 1 ] = 1 //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u65f6\uff0c\u7ffb\u8bd1\u65b9\u6848\u663e\u7136\u4e3a1 dp [ 0 ] = 1 //\u82e5\u524d\u4e24\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\uff0c\u90a3\u4e48dp[2]=dp[0]+dp[1], \u7531\u4e8edp[1]=1\u6240\u4ee5dp[0]=0 // \u904d\u5386\u5b57\u7b26\u4e32 for ( i in 2. . n ) { // \u53d6\u51fa\u7b2ci-1\u4e2a\u6570\u5b57\u548c\u7b2ci\u4e2a\u6570\u5b57 // substring: [i, j) \u5de6\u95ed\u53f3\u5f00 // dp\u6570\u7ec4\u4e2d\uff0c\u6570\u5b57\u7684\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684 // \u4f46\u662f\u5b57\u7b26\u4e32\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5e94\u8be5\u662f(i-2, i) var curNum = str . substring ( i - 2 , i ) // \u8ba1\u7b97dp[i]\uff0c\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp [ i ] = if ( curNum . compareTo ( \"10\" )>= 0 && curNum . compareTo ( \"25\" )<= 0 ) { dp [ i - 1 ] + dp [ i - 2 ] } else { //\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u4e0d\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp [ i - 1 ] } } return dp [ n ] } } 3. \u53c2\u8003 \u00b6 \u300a\u5251\u6307 Offer\uff08\u7b2c 2 \u7248\uff09\u300b\uff1a\u9762\u8bd5\u989846. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 Krahets\uff1a\u9762\u8bd5\u989846. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32\uff08\u52a8\u6001\u89c4\u5212\uff0c\u6e05\u6670\u56fe\u89e3\uff09 4. \u5b66\u4e60\u8349\u7a3f \u00b6","title":"LCOF 46. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u89c4\u5219\u628a\u5b83\u7ffb\u8bd1\u4e3a\u5b57\u7b26\u4e32\uff1a0 \u7ffb\u8bd1\u6210 \u201ca\u201d \uff0c1 \u7ffb\u8bd1\u6210 \u201cb\u201d\uff0c\u2026\u2026\uff0c11 \u7ffb\u8bd1\u6210 \u201cl\u201d\uff0c\u2026\u2026\uff0c25 \u7ffb\u8bd1\u6210 \u201cz\u201d\u3002\u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002\u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002 \u793a\u4f8b 1: \u8f93\u5165: 12258 \u8f93\u51fa: 5 \u89e3\u91ca: 12258\u67095\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\uff0c\u5206\u522b\u662f\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"\u548c\"mzi\" \u63d0\u793a\uff1a - 0 \u2264 num < 2^{31} 2^{31}","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#2-","text":"","title":"2. \u89e3\u6cd5 - \u52a8\u6001\u89c4\u5212"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#21-java","text":"class Solution { public int translateNum ( int num ) { // \u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c06\u6574\u4e2a\u6570\u5b57\u5b58\u4e0b\u6765 String str = String . valueOf ( num ); int n = str . length (); // \u72b6\u6001\u6570\u7ec4 // dp[i]\u8868\u793a\u4ee5\u7b2ci\u4e2a\u6570\u5b57\u7ed3\u5c3e\u7684\u6570\u5b57\u7684\u7ffb\u8bd1\u65b9\u6848\u7684\u6570\u91cf int [] dp = new int [ n + 1 ] ; // \u8fb9\u754c\u503c dp [ 1 ] = 1 ; //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u65f6\uff0c\u7ffb\u8bd1\u65b9\u6848\u663e\u7136\u4e3a1 dp [ 0 ] = 1 ; //\u82e5\u524d\u4e24\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\uff0c\u90a3\u4e48dp[2]=dp[0]+dp[1], \u7531\u4e8edp[1]=1\u6240\u4ee5dp[0]=0 // \u904d\u5386\u5b57\u7b26\u4e32 for ( int i = 2 ; i <= n ; i ++ ) { // \u53d6\u51fa\u7b2ci-1\u4e2a\u6570\u5b57\u548c\u7b2ci\u4e2a\u6570\u5b57 // substring: [i, j) \u5de6\u95ed\u53f3\u5f00 // dp\u6570\u7ec4\u4e2d\uff0c\u6570\u5b57\u7684\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684 // \u4f46\u662f\u5b57\u7b26\u4e32\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5e94\u8be5\u662f(i-2, i) String curNum = str . substring ( i - 2 , i ); // \u8ba1\u7b97dp[i]\uff0c\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a if ( curNum . compareTo ( \"10\" ) >= 0 && curNum . compareTo ( \"25\" ) <= 0 ) { dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] ; } else { //\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u4e0d\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp [ i ] = dp [ i - 1 ] ; } } return dp [ n ] ; } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#22-kotlin","text":"class Solution { fun translateNum ( num : Int ): Int { // \u4f7f\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u5c06\u6574\u4e2a\u6570\u5b57\u5b58\u4e0b\u6765 var str = num . toString () var n = str . length // \u72b6\u6001\u6570\u7ec4 // dp[i]\u8868\u793a\u4ee5\u7b2ci\u4e2a\u6570\u5b57\u7ed3\u5c3e\u7684\u6570\u5b57\u7684\u7ffb\u8bd1\u65b9\u6848\u7684\u6570\u91cf var dp = IntArray ( n + 1 ) // \u8fb9\u754c\u503c dp [ 1 ] = 1 //\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u65f6\uff0c\u7ffb\u8bd1\u65b9\u6848\u663e\u7136\u4e3a1 dp [ 0 ] = 1 //\u82e5\u524d\u4e24\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\uff0c\u90a3\u4e48dp[2]=dp[0]+dp[1], \u7531\u4e8edp[1]=1\u6240\u4ee5dp[0]=0 // \u904d\u5386\u5b57\u7b26\u4e32 for ( i in 2. . n ) { // \u53d6\u51fa\u7b2ci-1\u4e2a\u6570\u5b57\u548c\u7b2ci\u4e2a\u6570\u5b57 // substring: [i, j) \u5de6\u95ed\u53f3\u5f00 // dp\u6570\u7ec4\u4e2d\uff0c\u6570\u5b57\u7684\u4e0b\u6807\u662f\u4ece1\u5f00\u59cb\u7684 // \u4f46\u662f\u5b57\u7b26\u4e32\u7684\u4e0b\u6807\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u5e94\u8be5\u662f(i-2, i) var curNum = str . substring ( i - 2 , i ) // \u8ba1\u7b97dp[i]\uff0c\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp [ i ] = if ( curNum . compareTo ( \"10\" )>= 0 && curNum . compareTo ( \"25\" )<= 0 ) { dp [ i - 1 ] + dp [ i - 2 ] } else { //\u5982\u679c\u7b2ci-1\u548c\u7b2ci\u4e2a\u6570\u5b57\u4e0d\u53ef\u4ee5\u5408\u5e76\u7ffb\u8bd1\u5c31\uff1a dp [ i - 1 ] } } return dp [ n ] } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#3","text":"\u300a\u5251\u6307 Offer\uff08\u7b2c 2 \u7248\uff09\u300b\uff1a\u9762\u8bd5\u989846. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 Krahets\uff1a\u9762\u8bd5\u989846. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32\uff08\u52a8\u6001\u89c4\u5212\uff0c\u6e05\u6670\u56fe\u89e3\uff09","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-46/#4","text":"","title":"4. \u5b66\u4e60\u8349\u7a3f"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/","text":"1. \u95ee\u9898 \u00b6 \u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7b2ck\u5927\u7684\u8282\u70b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: root = [3,1,4,null,2], k = 1 3 / \\ 1 4 \\ 2 \u8f93\u51fa: 4 \u793a\u4f8b 2: \u8f93\u5165: root = [5,3,6,2,4,null,null,1], k = 3 5 / \\ 3 6 / \\ 2 4 / 1 \u8f93\u51fa: 4 \u9650\u5236\uff1a 1 \u2264 k \u2264 \u4e8c\u53c9\u641c\u7d22\u6811\u5143\u7d20\u4e2a\u6570 2. \u89e3\u6cd5 - \u4e2d\u5e8f\u904d\u5386 \u00b6 2.1 Java \u00b6 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { int ans , kk ; public int kthLargest ( TreeNode root , int k ) { // kk\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u4f7f\u7528 kk = k ; // \u5bf9\u4e8c\u53c9\u641c\u7d22\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386 dfs ( root ); // \u8fd4\u56de\u7ed3\u679c return ans ; } // \u4e2d\u5e8f\u904d\u5386\u7684\u904d\u5386\uff1a\u53f3\u6839\u5de6 public void dfs ( TreeNode root ) { if ( root == null ) return ; // \u53f3 dfs ( root . right ); // \u627e\u5230\u4e86\u7b2ck\u5927\u7684\u5143\u7d20\uff0c\u8bb0\u5f55\u4e0b\u6765 if ( -- kk == 0 ) ans = root . val ; // kk\u5df2\u7ecf\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5373\u53ef if ( kk == 0 ) return ; // \u5de6 dfs ( root . left ); } } 2.2 Kotlin \u00b6 /** * Example: * var ti = TreeNode(5) * var v = ti.`val` * Definition for a binary tree node. * class TreeNode(var `val`: Int) { * var left: TreeNode? = null * var right: TreeNode? = null * } */ class Solution { var ans : Int = 0 var kk : Int = 0 fun kthLargest ( root : TreeNode , k : Int ): Int { // kk\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u4f7f\u7528 kk = k // \u5bf9\u4e8c\u53c9\u641c\u7d22\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386 dfs ( root ) // \u8fd4\u56de\u7ed3\u679c return ans } // \u4e2d\u5e8f\u904d\u5386\u7684\u904d\u5386\uff1a\u53f3\u6839\u5de6 fun dfs ( root : TreeNode ?) { if ( root == null ) return // \u53f3 dfs ( root . right ) // \u627e\u5230\u4e86\u7b2ck\u5927\u7684\u5143\u7d20\uff0c\u8bb0\u5f55\u4e0b\u6765 if (-- kk == 0 ) ans = root . `val` // kk\u5df2\u7ecf\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5373\u53ef if ( kk == 0 ) return // \u5de6 dfs ( root . left ) } } 3. \u53c2\u8003 \u00b6 https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/ https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/solution/mian-shi-ti-54-er-cha-sou-suo-shu-de-di-k-da-jie-d/ 4. \u7b14\u8bb0 \u00b6","title":"LCOF 54. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#1","text":"\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7b2ck\u5927\u7684\u8282\u70b9\u3002 \u793a\u4f8b 1: \u8f93\u5165: root = [3,1,4,null,2], k = 1 3 / \\ 1 4 \\ 2 \u8f93\u51fa: 4 \u793a\u4f8b 2: \u8f93\u5165: root = [5,3,6,2,4,null,null,1], k = 3 5 / \\ 3 6 / \\ 2 4 / 1 \u8f93\u51fa: 4 \u9650\u5236\uff1a 1 \u2264 k \u2264 \u4e8c\u53c9\u641c\u7d22\u6811\u5143\u7d20\u4e2a\u6570","title":"1. \u95ee\u9898"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#2-","text":"","title":"2. \u89e3\u6cd5 - \u4e2d\u5e8f\u904d\u5386"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#21-java","text":"/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { int ans , kk ; public int kthLargest ( TreeNode root , int k ) { // kk\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u4f7f\u7528 kk = k ; // \u5bf9\u4e8c\u53c9\u641c\u7d22\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386 dfs ( root ); // \u8fd4\u56de\u7ed3\u679c return ans ; } // \u4e2d\u5e8f\u904d\u5386\u7684\u904d\u5386\uff1a\u53f3\u6839\u5de6 public void dfs ( TreeNode root ) { if ( root == null ) return ; // \u53f3 dfs ( root . right ); // \u627e\u5230\u4e86\u7b2ck\u5927\u7684\u5143\u7d20\uff0c\u8bb0\u5f55\u4e0b\u6765 if ( -- kk == 0 ) ans = root . val ; // kk\u5df2\u7ecf\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5373\u53ef if ( kk == 0 ) return ; // \u5de6 dfs ( root . left ); } }","title":"2.1 Java"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#22-kotlin","text":"/** * Example: * var ti = TreeNode(5) * var v = ti.`val` * Definition for a binary tree node. * class TreeNode(var `val`: Int) { * var left: TreeNode? = null * var right: TreeNode? = null * } */ class Solution { var ans : Int = 0 var kk : Int = 0 fun kthLargest ( root : TreeNode , k : Int ): Int { // kk\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u4f7f\u7528 kk = k // \u5bf9\u4e8c\u53c9\u641c\u7d22\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386 dfs ( root ) // \u8fd4\u56de\u7ed3\u679c return ans } // \u4e2d\u5e8f\u904d\u5386\u7684\u904d\u5386\uff1a\u53f3\u6839\u5de6 fun dfs ( root : TreeNode ?) { if ( root == null ) return // \u53f3 dfs ( root . right ) // \u627e\u5230\u4e86\u7b2ck\u5927\u7684\u5143\u7d20\uff0c\u8bb0\u5f55\u4e0b\u6765 if (-- kk == 0 ) ans = root . `val` // kk\u5df2\u7ecf\u627e\u5230\u4e86\uff0c\u8fd4\u56de\u5373\u53ef if ( kk == 0 ) return // \u5de6 dfs ( root . left ) } }","title":"2.2 Kotlin"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#3","text":"https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/ https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/solution/mian-shi-ti-54-er-cha-sou-suo-shu-de-di-k-da-jie-d/","title":"3. \u53c2\u8003"},{"location":"%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87Offer/lcof-54/#4","text":"","title":"4. \u7b14\u8bb0"},{"location":"%E7%AE%80%E5%8E%86/","text":"README \u00b6 \u7b80\u5386\u4e0d\u8981\u627e\u4e71\u4e03\u516b\u7cdf\u82b1\u91cc\u80e1\u54e8\u7684\u6a21\u677f\uff0c\u53c8\u4e11\u53c8\u653e\u4e0d\u4e86\u591a\u5c11\u5b57\uff0c\u63a8\u8350\u4f7f\u7528 \u8d85\u7ea7\u7b80\u5386 \uff0c\u61d2\u4eba\u5fc5\u5907\u7b80\u5386\u751f\u6210\u795e\u5668\uff0c\u5927\u56db\u627e\u5b9e\u4e60\u7684\u65f6\u5019\u5c31\u7528\u7684\u8d85\u7ea7\u7b80\u5386\uff0c\u4ed6\u4f1a\u6839\u636e\u7b80\u5386\u5185\u5bb9\u7684\u591a\u5c11\u81ea\u52a8\u63a7\u5236\u5728\u4e00\u9875\u5185\uff0c\u8fd9\u4e2a\u529f\u80fd\u6211\u8fd8\u86ee\u559c\u6b22\u7684\u3002\u76ee\u524d\u662f\u514d\u8d39\u7528\u6237\u53ef\u4ee5\u65b0\u5efa\u4e00\u4efd\u7b80\u5386\uff0c\u518d\u6dfb\u52a0\u7b80\u5386\u5c31\u8981\u5145\u503c\u53d8\u5f3a\u4e86\uff0c\u4e0d\u8fc7\u5176\u5b9e\u4e00\u4efd\u8fd9\u4e2a\u989d\u5ea6\u5c31\u591f\u7528\u4e86\uff0c\u6709\u9700\u8981\u7b2c\u4e8c\u4efd\u7684\u8bdd\u5c31\u7ed9\u8d85\u7ea7\u7b80\u5386\u6253\u94b1\u5427\uff0c\u4ed6\u503c\u5f97\uff01 \u719f\u6089LaTex\u7684\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528LaTex\u5199\u7b80\u5386\uff0c\u7f51\u4e0a\u4e5f\u633a\u591a\u6a21\u677f\uff0c\u6211\u4e4b\u540e\u627e\u4e00\u627e\u5728\u8fd9\u6c47\u603b\u5b58\u4e2a\u6863\u3002 \u53c2\u8003 \u00b6 Resume - Blankj \u5b66\u4e60\u4f7f\u7528FAB\u63cf\u8ff0\u81ea\u5df1\u505a\u7684\u5de5\u4f5c\uff0c\u4e0d\u8fc7\u611f\u89c9B\u6211\u5199\u4e0d\u51fa\u4ec0\u4e48\u4e1c\u897f\u54e6\uff0c\u5199\u4e00\u4e2a \u300c\u5982\u679c\u96c7\u6211\u6211\u53ef\u4ee5\u7ed9\u4f60\u8868\u6f14\u5929\u5929\u6478\u9c7c\u300d Pin\u3001\u5c0f\u5386\u4f5c\u8005\u7684\u7b80\u5386\u5206\u4eab \u8fd9\u4e2a\u5206\u4eab\u4e0d\u9519\uff0c\u662f\u5e72\u8d27o(\uffe3\u25bd\uffe3)\uff44 \uff0c\u6574\u4e2a\u4e13\u680f\u662f\u4ed8\u8d39\u4e13\u680f\uff0c\u7b49\u6211\u4e4b\u540e\u4e70\u4e86\u8bfb\u4e86\u518d\u6765\u8bf4\u8bf4\u6709\u6ca1\u6709\u8d2d\u4e70\u7684\u5fc5\u8981\u3002","title":"README"},{"location":"%E7%AE%80%E5%8E%86/#readme","text":"\u7b80\u5386\u4e0d\u8981\u627e\u4e71\u4e03\u516b\u7cdf\u82b1\u91cc\u80e1\u54e8\u7684\u6a21\u677f\uff0c\u53c8\u4e11\u53c8\u653e\u4e0d\u4e86\u591a\u5c11\u5b57\uff0c\u63a8\u8350\u4f7f\u7528 \u8d85\u7ea7\u7b80\u5386 \uff0c\u61d2\u4eba\u5fc5\u5907\u7b80\u5386\u751f\u6210\u795e\u5668\uff0c\u5927\u56db\u627e\u5b9e\u4e60\u7684\u65f6\u5019\u5c31\u7528\u7684\u8d85\u7ea7\u7b80\u5386\uff0c\u4ed6\u4f1a\u6839\u636e\u7b80\u5386\u5185\u5bb9\u7684\u591a\u5c11\u81ea\u52a8\u63a7\u5236\u5728\u4e00\u9875\u5185\uff0c\u8fd9\u4e2a\u529f\u80fd\u6211\u8fd8\u86ee\u559c\u6b22\u7684\u3002\u76ee\u524d\u662f\u514d\u8d39\u7528\u6237\u53ef\u4ee5\u65b0\u5efa\u4e00\u4efd\u7b80\u5386\uff0c\u518d\u6dfb\u52a0\u7b80\u5386\u5c31\u8981\u5145\u503c\u53d8\u5f3a\u4e86\uff0c\u4e0d\u8fc7\u5176\u5b9e\u4e00\u4efd\u8fd9\u4e2a\u989d\u5ea6\u5c31\u591f\u7528\u4e86\uff0c\u6709\u9700\u8981\u7b2c\u4e8c\u4efd\u7684\u8bdd\u5c31\u7ed9\u8d85\u7ea7\u7b80\u5386\u6253\u94b1\u5427\uff0c\u4ed6\u503c\u5f97\uff01 \u719f\u6089LaTex\u7684\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528LaTex\u5199\u7b80\u5386\uff0c\u7f51\u4e0a\u4e5f\u633a\u591a\u6a21\u677f\uff0c\u6211\u4e4b\u540e\u627e\u4e00\u627e\u5728\u8fd9\u6c47\u603b\u5b58\u4e2a\u6863\u3002","title":"README"},{"location":"%E7%AE%80%E5%8E%86/#_1","text":"Resume - Blankj \u5b66\u4e60\u4f7f\u7528FAB\u63cf\u8ff0\u81ea\u5df1\u505a\u7684\u5de5\u4f5c\uff0c\u4e0d\u8fc7\u611f\u89c9B\u6211\u5199\u4e0d\u51fa\u4ec0\u4e48\u4e1c\u897f\u54e6\uff0c\u5199\u4e00\u4e2a \u300c\u5982\u679c\u96c7\u6211\u6211\u53ef\u4ee5\u7ed9\u4f60\u8868\u6f14\u5929\u5929\u6478\u9c7c\u300d Pin\u3001\u5c0f\u5386\u4f5c\u8005\u7684\u7b80\u5386\u5206\u4eab \u8fd9\u4e2a\u5206\u4eab\u4e0d\u9519\uff0c\u662f\u5e72\u8d27o(\uffe3\u25bd\uffe3)\uff44 \uff0c\u6574\u4e2a\u4e13\u680f\u662f\u4ed8\u8d39\u4e13\u680f\uff0c\u7b49\u6211\u4e4b\u540e\u4e70\u4e86\u8bfb\u4e86\u518d\u6765\u8bf4\u8bf4\u6709\u6ca1\u6709\u8d2d\u4e70\u7684\u5fc5\u8981\u3002","title":"\u53c2\u8003"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","text":"README \u00b6 \u53c2\u8003\u6559\u6750 \u00b6 \u300a\u8ba1\u7b97\u673a\u7f51\u7edc \u81ea\u9876\u5411\u4e0b\u65b9\u6cd5\u300b\u7b2c6\u7248 \u53c2\u8003\u4ed3\u5e93 \u00b6 CS-Notes \u8ba1\u7b97\u673a\u7f51\u7edc","title":"README"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#readme","text":"","title":"README"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_1","text":"\u300a\u8ba1\u7b97\u673a\u7f51\u7edc \u81ea\u9876\u5411\u4e0b\u65b9\u6cd5\u300b\u7b2c6\u7248","title":"\u53c2\u8003\u6559\u6750"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#_2","text":"CS-Notes \u8ba1\u7b97\u673a\u7f51\u7edc","title":"\u53c2\u8003\u4ed3\u5e93"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/","text":"1. \u7efc\u8ff0 \u00b6 \u56e0\u7279\u7f51 \u00b6 \u56e0\u7279\u7f51\u662f\u4e00\u4e2a\u4e16\u754c\u8303\u56f4\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\uff0c\u5373\u5b83\u662f\u4e00\u4e2a\u4e92\u8054\u4e86\u904d\u53ca\u5168\u4e16\u754c\u7684\u6570\u4ee5\u4ebf\u8ba1\u7684\u8ba1\u7b97\u8bbe\u5907\u7684\u7f51\u7edc\u3002\u5728\u4e0d\u4e45\u524d\uff0c\u8fd9\u4e9b\u8ba1\u7b97\u8bbe\u5907\u591a\u6570\u662f\u4f20\u7edf\u7684\u684c\u9762PC\u3001Linux\u5de5\u4f5c\u7ad9\u4ee5\u53ca\u6240\u8c13\u7684\u670d\u52a1\u5668(\u5b83\u4eec\u7528\u4e8e\u5b58\u50a8\u548c\u4f20\u8f93 Web \u9875\u9762\u548c\u7535\u5b50\u90ae\u4ef6\u62a5\u6587\u7b49\u4fe1\u606f) \u3002\u7136\u800c\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u975e\u4f20\u7edf\u7684\u56e0\u7279\u7f51\u7aef\u7cfb\u7edf(\u5982\u4fbf\u643a\u673a\u3001\u667a\u80fd\u624b\u673a\u3001\u5e73\u677f\u7535\u8111\u3001\u7535\u89c6\u3001\u6e38\u620f\u673a\u3001Web \u76f8\u673a\u3001\u6c7d\u8f66\u3001\u73af\u5883\u4f20\u611f\u8bbe\u5907\u3001\u6570\u5b57\u76f8\u6846\u3001\u5bb6\u7528\u7535\u5668)\u548c\u5b89\u5168\u7cfb\u7edf\uff0c\u6b63\u5728\u4e0e\u56e0\u7279\u7f51\u76f8\u8fde\u3002\u7684\u786e\uff0c\u5728\u8bb8\u591a\u975e\u4f20\u7edf\u8bbe\u5907\u8fde\u63a5\u5230\u56e0\u7279\u7f51\u7684\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u8fd9\u4e2a\u672f\u8bed\u5f00\u59cb\u542c\u8d77\u6765\u6709\u4e9b\u8fc7\u65f6\u4e86\u3002 \u7528\u56e0\u7279\u7f51\u672f\u8bed\u6765\u8bf4\uff0c\u6240\u6709\u8fd9\u4e9b\u8bbe\u5907\u90fd\u79f0\u4e3a \u4e3b\u673a(host) \u6216 \u7aef\u7cfb\u7edf(end system) \u3002\u7aef\u7cfb\u7edf\u901a\u8fc7 \u901a\u4fe1\u94fe\u8def(communication link) \u548c \u5206\u7ec4\u4ea4\u6362\u673a(packet switch) \u8fde\u63a5\u5230\u4e00\u8d77\u3002 \u901a\u4fe1\u94fe\u8def \u00b6 \u901a\u4fe1\u94fe\u8def\u7531\u4e0d\u540c\u7c7b\u578b\u7684\u7269\u7406\u5a92\u4f53\u7ec4\u6210\u3002\u8fd9\u4e9b\u7269\u7406\u5a92\u4f53\u5305\u62ec\u540c\u8f74\u7535\u7f06\u3001\u94dc\u7ebf\u3001\u5149\u7ea4\u548c\u65e0\u7ebf\u7535\u9891\u8c31\u3002\u4e0d\u540c\u7684\u94fe\u8def\u80fd\u591f\u4ee5\u4e0d\u540c\u7684\u901f\u7387\u4f20\u8f93\u6570\u636e\uff0c\u94fe\u8def\u7684\u4f20\u8f93\u901f\u7387\u4ee5\u6bd4\u7279/\u79d2\u5ea6\u91cf(bit/s\uff0c\u6216bps)\u3002 \u5206\u7ec4 \u00b6 \u5f53\u4e00\u53f0\u7aef\u7cfb\u7edf\u8981\u5411\u53e6\u4e00\u53f0\u7aef\u7cfb\u7edf\u53d1\u9001\u6570\u636e\u65f6\uff0c\u53d1\u9001\u7aef\u7cfb\u7edf\u5c06\u6570\u636e\u5206\u6bb5\uff0c\u5e76\u4e3a\u6bcf\u6bb5\u52a0\u4e0a\u9996\u90e8\u5b57\u8282\u3002\u7531\u6b64\u5f62\u6210\u7684\u4fe1\u606f\u5305\u7528\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u672f\u8bed\u6765\u8bf4\u79f0\u4e3a \u5206\u7ec4(packet) \u3002\u8fd9\u4e9b\u5206\u7ec4\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u5230\u76ee\u7684\u7aef\u7cfb\u7edf\uff0c\u5728\u90a3\u91cc\u88ab\u88c5\u914d\u6210\u521d\u59cb\u6570\u636e\u3002 \u4ea4\u6362\u673a \u00b6 \u5206\u7ec4\u4ea4\u6362\u673a\u4ece\u5b83\u7684\u4e00\u6761\u5165\u901a\u4fe1\u94fe\u8def\u63a5\u6536\u5230\u8fbe\u7684\u5206\u7ec4\uff0c\u5e76\u4ece\u5b83\u7684\u4e00\u6761\u51fa\u901a\u4fe1\u94fe\u8def\u8f6c\u53d1\u8be5\u5206\u7ec4\u3002\u5e02\u9762\u4e0a\u6d41\u884c\u7740\u5404\u79cd\u7c7b\u578b\u3001\u5404\u5177\u7279\u8272\u7684\u5206\u7ec4\u4ea4\u6362\u673a\uff0c\u4f46\u5728\u5f53\u4eca\u7684\u56e0\u7279\u7f51\u4e2d\uff0c\u4e24\u79cd\u6700\u8457\u540d\u7684\u7c7b\u578b\u662f \u8def\u7531\u5668(router) \u548c \u94fe\u8def\u5c42\u4ea4\u6362\u673a(link-layer switch) \u3002\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u4ea4\u6362\u673a\u671d\u7740\u6700\u7ec8\u76ee\u7684\u5730\u8f6c\u53d1\u5206\u7ec4\u3002\u94fe\u8def\u5c42\u4ea4\u6362\u673a\u901a\u5e38\u7528\u4e8e\u63a5\u5165\u7f51\u4e2d\uff0c\u800c\u8def\u7531\u5668\u901a\u5e38\u7528\u4e8e\u7f51\u7edc\u6838\u5fc3\u4e2d\u3002 \u8def\u5f84 \u00b6 \u4ece\u53d1\u9001\u7aef\u7cfb\u7edf\u5230\u63a5\u6536\u7aef\u7cfb\u7edf\uff0c\u4e00\u4e2a\u5206\u7ec4\u6240\u7ecf\u5386\u7684\u4e00\u7cfb\u5217\u901a\u4fe1\u94fe\u8def\u548c\u5206\u7ec4\u4ea4\u6362\u673a\u79f0\u4e3a\u901a\u8fc7\u8be5\u7f51\u7edc\u7684 \u8def\u5f84(route\u6216path) \u3002 \u5206\u7ec4\u4ea4\u6362\u7f51\u7edc \u00b6 \u7528\u4e8e\u4f20\u9001\u5206\u7ec4\u7684\u5206\u7ec4\u4ea4\u6362\u7f51\u7edc\u5728\u8bb8\u591a\u65b9\u9762\u7c7b\u4f3c\u4e8e\u627f\u8f7d\u8fd0\u8f93\u8f66\u8f86\u7684\u8fd0\u8f93\u7f51\u7edc\uff0c\u8be5\u7f51\u7edc\u5305\u62ec\u4e86\u9ad8\u901f\u516c\u8def\u3001\u516c\u8def\u548c\u7acb\u4ea4\u6865\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e0b\u5217\u60c5\u51b5\uff0c\u4e00\u4e2a\u5de5\u5382\u9700\u8981\u5c06\u5927\u91cf\u8d27\u7269\u642c\u8fd0\u5230\u6570\u5343\u516c\u91cc\u4ee5\u5916\u7684\u67d0\u4e2a\u76ee\u7684\u5730\u4ed3\u5e93\u3002\u5728\u5de5\u5382\u4e2d\uff0c\u8d27\u7269\u8981\u5206\u5f00\u5e76\u88c5\u4e0a\u5361\u8f66\u8f66\u961f\u3002\u7136\u540e\uff0c\u6bcf\u8f86\u5361\u8f66\u72ec\u7acb\u5730\u901a\u8fc7\u9ad8\u901f\u516c\u8def\u3001\u516c\u8def\u548c\u7acb\u4ea4\u6865\u7ec4\u6210\u7684\u7f51\u7edc\u5411\u8be5\u4ed3\u5e93\u8fd0\u9001\u8d27\u7269\u3002\u5728\u76ee\u7684\u5730\u4ed3\u5e93\uff0c\u5378\u4e0b\u8fd9\u4e9b\u8d27\u7269\uff0c\u5e76\u4e14\u4e0e\u4e00\u8d77\u88c5\u8f7d\u7684\u540c\u4e00\u6279\u8d27\u7269\u7684\u5176\u4f59\u90e8\u5206\u5806\u653e\u5728\u4e00\u8d77\u3002\u56e0\u6b64\uff0c\u5728\u8bb8\u591a\u65b9\u9762\uff0c\u5206\u7ec4\u7c7b\u4f3c\u4e8e\u5361\u8f66\uff0c\u901a\u4fe1\u94fe\u8def\u7c7b\u4f3c\u4e8e\u9ad8\u901f\u516c\u8def\u548c\u516c\u8def\uff0c\u5206\u7ec4\u4ea4\u6362\u673a\u7c7b\u4f3c\u4e8e\u7acb\u4ea4\u6865\uff0c\u800c\u7aef\u7cfb\u7edf\u7c7b\u4f3c\u4e8e\u5efa\u7b51\u7269\u3002\u5c31\u50cf\u5361\u8f66\u9009\u53d6\u8fd0\u8f93\u7f51\u7edc\u7684\u4e00\u6761\u8def\u5f84\u524d\u884c\u4e00\u6837\uff0c\u5206\u7ec4\u5219\u9009\u53d6\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u4e00\u6761\u8def\u5f84\u524d\u884c\u3002 ISP \u00b6 \u7aef\u7cfb\u7edf\u901a\u8fc7 \u56e0\u7279\u7f51\u670d\u52a1\u63d0\u4f9b\u5546(Internet Service Provider , ISP) \u63a5\u5165\u56e0\u7279\u7f51\uff0c\u5305\u62ec\u5982\u672c\u5730\u7535\u7f06\u6216\u7535\u8bdd\u516c\u53f8\u90a3\u6837\u7684\u4f4f\u5b85\u533aISP \u3001\u516c\u53f8ISP\u3001\u5927\u5b66ISP \uff0c\u4ee5\u53ca\u90a3\u4e9b\u5728\u673a\u573a\u3001\u65c5\u9986\u3001\u5496\u5561\u5e97\u548c\u5176\u4ed6\u516c\u5171\u573a\u6240\u63d0\u4f9bWiFi \u63a5\u5165\u7684ISP \u3002 \u6bcf\u4e2aISP \u662f\u4e00\u4e2a\u7531\u591a\u4e2a\u5206\u7ec4\u4ea4\u6362\u673a\u548c\u591a\u6bb5\u901a\u4fe1\u94fe\u8def\u7ec4\u6210\u7684\u7f51\u7edc\u3002\u5404ISP \u4e3a\u7aef\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5404\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u7f51\u7edc\u63a5\u5165\uff0c\u5305\u62ec\u5982\u7ebf\u7f06\u8c03\u5236\u89e3\u8c03\u5668\u6216DSL \u90a3\u6837\u7684\u4f4f\u5b85\u5bbd\u5e26\u63a5\u5165\u3001\u9ad8\u901f\u5c40\u57df\u7f51\u63a5\u5165\u3001\u65e0\u7ebf\u63a5\u5165\u548c56kbps \u62e8\u53f7\u8c03\u5236\u89e3\u8c03\u5668\u63a5\u5165\u3002ISP \u4e5f\u4e3a\u5185\u5bb9\u63d0\u4f9b\u8005\u63d0\u4f9b\u56e0\u7279\u7f51\u63a5\u5165\u670d\u52a1\uff0c\u5c06Web \u7ad9\u70b9\u76f4\u63a5\u63a5\u5165\u56e0\u7279\u7f51\u3002 \u56e0\u7279\u7f51\u5c31\u662f\u5c06\u7aef\u7cfb\u7edf\u5f7c\u6b64\u4e92\u8054\uff0c\u56e0\u6b64\u4e3a\u7aef\u7cfb\u7edf\u63d0\u4f9b\u63a5\u5165\u7684ISP \u4e5f\u5fc5\u987b\u4e92\u8054\u3002\u4f4e\u5c42\u7684ISP \u901a\u8fc7\u56fd\u5bb6\u7684\u3001\u56fd\u9645\u7684\u9ad8\u5c42ISP (\u5982Level 3 Communications \u3001AT&T \u3001Sprint \u548cNTI) \u4e92\u8054\u8d77\u6765\u3002\u9ad8\u5c42ISP\u662f\u7531\u901a\u8fc7\u9ad8\u901f\u5149\u7ea4\u94fe\u8def\u4e92\u8054\u7684\u9ad8\u901f\u8def\u7531\u5668\u7ec4\u6210\u7684\u3002 \u65e0\u8bba\u662f\u9ad8\u5c42\u8fd8\u662f\u4f4e\u5c42ISP \u7f51\u7edc\uff0c\u5b83\u4eec\u6bcf\u4e2a\u90fd\u662f\u72ec\u7acb\u7ba1\u7406\u7684\uff0c\u8fd0\u884c\u7740IP\u534f\u8bae\uff0c\u9075\u4ece\u4e00\u5b9a\u7684\u547d\u540d\u548c\u5730\u5740\u4e60\u60ef\u3002 \u534f\u8bae \u00b6 \u7aef\u7cfb\u7edf\u3001\u5206\u7ec4\u4ea4\u6362\u673a\u548c\u5176\u4ed6\u56e0\u7279\u7f51\u90e8\u4ef6\u90fd\u8981\u8fd0\u884c\u4e00\u7cfb\u5217\u534f\u8bae( protocol) \uff0c\u8fd9\u4e9b\u534f\u8bae\u63a7\u5236\u56e0\u7279\u7f51\u4e2d\u4fe1\u606f\u7684\u63a5\u6536\u548c\u53d1\u9001\u3002TCP (Transmission Control Protocol \uff0c\u4f20\u8f93\u63a7\u5236\u534f\u8bae)\u548cIP (Internet Protocol \uff0c\u7f51\u9645\u534f\u8bae)\u662f\u56e0\u7279\u7f51\u4e2d\u4e24\u4e2a\u6700\u4e3a\u91cd\u8981\u7684\u534f\u8bae\u3002IP \u534f\u8bae\u5b9a\u4e49\u4e86\u5728\u8def\u7531\u5668\u548c\u7aef\u7cfb\u7edf\u4e4b\u95f4\u53d1\u9001\u548c\u63a5\u6536\u7684\u5206\u7ec4\u683c\u5f0f\u3002\u56e0\u7279\u7f51\u7684\u4e3b\u8981\u534f\u8bae\u7edf\u79f0\u4e3aTCP/IP \u3002 \u7f51\u7edc\u534f\u8bae\u4ea4\u6362\u62a5\u6587\u548c\u91c7\u53d6\u52a8\u4f5c\u7684\u5b9e\u4f53\u662f\u67d0\u4e9b\u8bbe\u5907\u7684\u786c\u4ef6\u6216\u8f6f\u4ef6\u7ec4\u4ef6(\u8fd9\u4e9b\u8bbe\u5907\u53ef\u4ee5\u662f\u8ba1\u7b97\u673a\u3001\u667a\u80fd\u624b\u673a\u3001\u5e73\u677f\u7535\u8111\u3001\u8def\u7531\u5668\u6216\u5176\u4ed6\u5177\u6709\u7f51\u7edc\u80fd\u529b\u7684\u8bbe\u5907) \u3002\u5728\u56e0\u7279\u7f51\u4e2d\uff0c\u51e1\u662f\u6d89\u53ca\u4e24\u4e2a\u6216\u591a\u4e2a\u8fdc\u7a0b\u901a\u4fe1\u5b9e\u4f53\u7684\u6240\u6709\u6d3b\u52a8\u90fd\u53d7\u534f\u8bae\u7684\u5236\u7ea6\u3002\u4f8b\u5982\uff0c\u5728\u4e24\u53f0\u7269\u7406\u4e0a\u8fde\u63a5\u7684\u8ba1\u7b97\u673a\u4e2d\uff0c\u786c\u4ef6\u5b9e\u73b0\u7684\u534f\u8bae\u63a7\u5236\u4e86\u5728\u4e24\u5757\u7f51\u7edc\u63a5\u53e3\u5361\u95f4\u7684\"\u7ebf\u4e0a\"\u7684\u6bd4\u7279\u6d41\uff1b\u5728\u7aef\u7cfb\u7edf\u4e2d\uff0c\u62e5\u585e\u63a7\u5236\u534f\u8bae\u63a7\u5236\u4e86\u5728\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u4e4b\u95f4\u4f20\u8f93\u7684\u5206\u7ec4\u53d1\u9001\u7684\u901f\u7387\u3002\u663e\u7136\uff0c\u534f\u8bae\u5728\u56e0\u7279\u7f51\u4e2d\u65e0\u5904\u4e0d\u5728\u3002 \u4ee5\u5927\u5bb6\u53ef\u80fd\u719f\u6089\u7684\u4e00\u4e2a\u8ba1\u7b97\u673a\u7f51\u7edc\u534f\u8bae\u4e3a\u4f8b\uff0c\u8003\u8651\u5f53\u4f60\u5411\u4e00\u4e2aWeb \u670d\u52a1\u5668\u53d1\u51fa\u8bf7\u6c42(\u5373\u4f60\u5728Web \u6d4f\u89c8\u5668\u4e2d\u952e\u5165\u4e00\u4e2aWeb \u7f51\u9875\u7684URL) \u65f6\u6240\u53d1\u751f\u7684\u60c5\u51b5\u3002\u9996\u5148\uff0c\u4f60\u7684\u8ba1\u7b97\u673a\u5c06\u5411\u8be5Web \u670d\u52a1\u5668\u53d1\u9001\u4e00\u6761\u8fde\u63a5\u8bf7\u6c42\u62a5\u6587\uff0c\u5e76\u7b49\u5f85\u56de\u7b54\u3002\u8be5Web \u670d\u52a1\u5668\u5c06\u6700\u7ec8\u80fd\u63a5\u6536\u5230\u8fde\u63a5\u8bf7\u6c42\u62a5\u6587\uff0c\u5e76\u8fd4\u56de\u4e00\u6761\u8fde\u63a5\u54cd\u5e94\u62a5\u6587\u3002\u5f97\u77e5\u8bf7\u6c42\u8be5Web \u6587\u6863\u6b63\u5e38\u4ee5\u540e\uff0c\u8ba1\u7b97\u673a\u5219\u5728\u4e00\u6761 GET \u62a5\u6587\u4e2d\u53d1\u9001\u8981\u4ece\u8fd9\u53f0 Web \u670d\u52a1\u5668\u4e0a\u53d6\u56de\u7684\u7f51\u9875\u540d\u5b57\u3002\u6700\u540e\uff0c Web \u670d\u52a1\u5668\u5411\u8ba1\u7b97\u673a\u8fd4\u56de\u8be5Web \u7f51\u9875(\u6587\u4ef6) \u3002 \u4ece\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u53ef\u89c1\uff0c\u62a5\u6587\u7684\u4ea4\u6362\u4ee5\u53ca\u53d1\u9001\u548c\u63a5\u6536\u8fd9\u4e9b\u62a5\u6587\u65f6\u6240\u91c7\u53d6\u7684\u52a8\u4f5c\u662f\u5b9a\u4e49\u4e00\u4e2a\u534f\u8bae\u7684\u5173\u952e\u5143\u7d20\uff1a \u4e00\u4e2a\u534f\u8bae\u5b9a\u4e49\u4e86\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u901a\u4fe1\u5b9e\u4f53\u4e4b\u95f4\u4ea4\u6362\u7684\u62a5\u6587\u683c\u5f0f\u548c\u6b21\u5e8f\uff0c\u4ee5\u53ca\u62a5\u6587\u53d1\u9001\u548c/\u6216\u63a5\u6536\u4e00\u6761\u62a5\u6587\u6216\u5176\u4ed6\u4e8b\u4ef6\u6240\u91c7\u53d6\u7684\u52a8\u4f5c\u3002 \u56e0\u7279\u7f51(\u66f4\u4e00\u822c\u5730\u8bf4\u662f\u8ba1\u7b97\u673a\u7f51\u7edc)\u5e7f\u6cdb\u5730\u4f7f\u7528\u4e86\u534f\u8bae\u3002\u4e0d\u540c\u7684\u534f\u8bae\u7528\u4e8e\u5b8c\u6210\u4e0d\u540c\u7684\u901a\u4fe1\u4efb\u52a1\uff0c\u67d0\u4e9b\u534f\u8bae\u7b80\u5355\u800c\u76f4\u622a\u4e86\u5f53\uff0c\u800c\u53e6\u4e00\u4e9b\u534f\u8bae\u5219\u590d\u6742\u4e14\u6666\u6da9\u96be\u61c2\u3002\u638c\u63e1\u8ba1\u7b97\u673a\u7f51\u7edc\u9886\u57df\u77e5\u8bc6\u7684\u8fc7\u7a0b\u5c31\u662f\u7406\u89e3\u7f51\u7edc\u534f\u8bae\u7684\u6784\u6210\u3001\u539f\u7406\u548c\u5de5\u4f5c\u65b9\u5f0f\u7684\u8fc7\u7a0b\u3002 \u6807\u51c6 \u00b6 \u9274\u4e8e\u56e0\u7279\u7f51\u534f\u8bae\u7684\u91cd\u8981\u6027\uff0c\u6bcf\u4e2a\u4eba\u5c31\u5404\u4e2a\u534f\u8bae\u53ca\u5176\u4f5c\u7528\u53d6\u5f97\u4e00\u81f4\u8ba4\u8bc6\u662f\u5f88\u91cd\u8981\u7684\uff0c\u8fd9\u6837\u4eba\u4eec\u5c31\u80fd\u591f\u521b\u9020\u534f\u540c\u5de5\u4f5c\u7684\u7cfb\u7edf\u548c\u4ea7\u54c1\u3002\u8fd9\u6b63\u662f\u6807\u51c6\u53d1\u6325\u4f5c\u7528\u7684\u5730\u65b9\u3002 \u56e0\u7279\u7f51\u6807\u51c6( Internet standard) \u7531\u56e0\u7279\u7f51\u5de5\u7a0b\u4efb\u52a1\u7ec4(Internet Engineering Task Force , IETF) [ lETF 2012] \u7814\u53d1\u3002IETF \u7684\u6807\u51c6\u6587\u6863\u79f0\u4e3a\u8bf7\u6c42\u8bc4\u8bba(Request For Comment \uff0cRFC) \u3002RFC\u6700\u521d\u662f\u4f5c\u4e3a\u666e\u901a\u7684\u8bf7\u6c42\u8bc4\u8bba(\u56e0\u6b64\u800c\u5f97\u540d) \uff0c\u4ee5\u89e3\u51b3\u56e0\u7279\u7f51\u5148\u9a71\u8005\u4eec\u9762\u4e34\u7684\u7f51\u7edc\u548c\u534f\u8bae\u95ee\u9898\u3002 RFC\u6587\u6321\u5f80\u5f80\u662f\u6280\u672f\u6027\u5f88\u5f3a\u5e76\u76f8\u5f53\u8be6\u7ec6\u7684\u3002\u5b83\u4eec\u5b9a\u4e49\u4e86TCP \u3001IP \u3001HTTP(\u7528\u4e8eWeb) \u548cSMTP (\u7528\u4e8e\u7535\u5b50\u90ae\u4ef6)\u7b49\u534f\u8bae\u3002\u76ee\u524d\u5df2\u7ecf\u6709\u5c06\u8fd16000 \u4e2aRFC\u3002\u5176\u4ed6\u7ec4\u7ec7\u4e5f\u5728\u5236\u5b9a\u7528\u4e8e\u7f51\u7edc\u7ec4\u4ef6\u7684\u6807\u51c6\uff0c\u6700\u5f15\u4eba\u6ce8\u76ee\u7684\u662f\u9488\u5bf9\u7f51\u7edc\u94fe\u8def\u7684\u6807\u51c6\u3002\u4f8b\u5982\uff0cIEEE 802 LAN/MAN \u6807\u51c6\u5316\u59d4\u5458\u4f1a[IEEE 802 202] \u5236\u5b9a\u4e86\u4ee5\u592a\u7f51\u548c\u65e0\u7ebf WiFi \u7684\u6807\u51c6\u3002 \u7aef\u7cfb\u7edf \u00b6 \u901a\u5e38\u628a\u4e0e\u56e0\u7279\u7f51\u76f8\u8fde\u7684\u8ba1\u7b97\u673a\u548c\u5176\u4ed6\u8bbe\u5907\u79f0\u4e3a\u7aef\u7cfb\u7edf\u3002\u56e0\u4e3a\u5b83\u4eec\u4f4d\u4e8e\u56e0\u7279\u7f51\u7684\u8fb9\u7f18\uff0c\u6545\u800c\u88ab\u79f0\u4e3a\u7aef\u7cfb\u7edf\u3002\u56e0\u7279\u7f51\u7684\u7aef\u7cfb\u7edf\u5305\u62ec\u4e86\u684c\u9762\u8ba1\u7b97\u673a(\u4f8b\u5982\uff0c\u684c\u9762PC\u3001Mac \u548cLinux \u76d2)\u3001\u670d\u52a1\u5668(\u4f8b\u5982\uff0c Web \u548c\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u5668)\u548c\u79fb\u52a8\u8ba1\u7b97\u673a(\u4f8b\u5982\uff0c\u4fbf\u643a\u673a\u3001\u667a\u80fd\u624b\u673a\u548c\u5e73\u677f\u7535\u8111) \u3002\u6b64\u5916\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u975e\u4f20\u7edf\u8bbe\u5907\u6b63\u88ab\u4f5c\u4e3a\u7aef\u7cfb\u7edf\u4e0e\u56e0\u7279\u7f51\u76f8\u8fde\u3002 \u7aef\u7cfb\u7edf\u4e5f\u79f0\u4e3a\u4e3b\u673a\uff0c\u56e0\u4e3a\u5b83\u4eec\u5bb9\u7eb3(\u5373\u8fd0\u884c)\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982Web \u6d4f\u89c8\u5668\u7a0b\u5e8f\u3001Web\u670d\u52a1\u5668\u7a0b\u5e8f\u3001\u7535\u5b50\u90ae\u4ef6\u9605\u8bfb\u7a0b\u5e8f\u6216\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u5668\u7a0b\u5e8f\u7b49\u3002\u4e3b\u673a\u6709\u65f6\u53c8\u88ab\u8fdb\u4e00\u6b65\u5212\u5206\u4e3a\u4e24\u7c7b:\u5ba2\u6237( client) \u548c\u670d\u52a1\u5668(server) \u3002\u5ba2\u6237\u975e\u6b63\u5f0f\u5730\u7b49\u540c\u4e8e\u684c\u9762PC\u3001\u79fb\u52a8PC \u548c\u667a\u80fd\u624b\u673a\u7b49\uff0c\u800c\u670d\u52a1\u5668\u975e\u6b63\u5f0f\u5730\u7b49\u540c\u4e8e\u66f4\u4e3a\u5f3a\u5927\u7684\u673a\u5668\uff0c\u7528\u4e8e\u5b58\u50a8\u548c\u53d1\u5e03Web \u9875\u9762\u3001\u6d41\u89c6\u9891\u3001\u4e2d\u7ee7\u7535\u5b50\u90ae\u4ef6\u7b49\u3002 \u63a5\u5165\u7f51 \u00b6 \u8003\u8651\u4e86\u4f4d\u4e8e\"\u7f51\u7edc\u8fb9\u7f18\"\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u7aef\u7cfb\u7edf\u540e\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u518d\u8003\u8651\u63a5\u5165\u7f51(access network) \uff0c\u8fd9\u662f\u6307\u5c06\u7aef\u7cfb\u7edf\u8fde\u63a5\u5230\u5176\u8fb9\u7f18\u8def\u7531\u5668(edge router) \u7684\u7269\u7406\u94fe\u8def\u3002\u8fb9\u7f18\u8def\u7531\u5668\u662f\u7aef\u7cfb\u7edf\u5230\u4efb\u4f55\u5176\u4ed6\u8fdc\u7a0b\u7aef\u7cfb\u7edf\u7684\u8def\u5f84\u4e0a\u7684\u7b2c\u4e00\u53f0\u8def\u7531\u5668\u3002 \u5206\u7ec4\u4ea4\u6362 \u00b6 \u901a\u8fc7\u7f51\u7edc\u94fe\u8def\u548c\u4ea4\u6362\u673a\u79fb\u52a8\u6570\u636e\u6709\u4e24\u79cd\u57fa\u672c\u65b9\u6cd5\uff1a \u7535\u8def\u4ea4\u6362 (circuit sw\u5c71hing) \u548c \u5206\u7ec4\u4ea4\u6362 (packet switching) \u3002 \u5728\u5404\u79cd\u7f51\u7edc\u5e94\u7528\u4e2d\uff0c\u7aef\u7cfb\u7edf\u5f7c\u6b64\u4ea4\u6362\u62a5\u6587(message) \u3002\u62a5\u6587\u80fd\u591f\u5305\u542b\u534f\u8bae\u8bbe\u8ba1\u8005\u9700\u8981\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u62a5\u6587\u53ef\u4ee5\u6267\u884c\u4e00\u79cd\u63a7\u5236\u529f\u80fd\uff0c\u4e5f\u53ef\u4ee5\u5305\u542b\u6570\u636e\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u6570\u636e\u3001JPEG\u56fe\u50cf\u6216MP3\u97f3\u9891\u6587\u4ef6\u3002 \u4e3a\u4e86\u4ece\u6e90\u7aef\u7cfb\u7edf\u5411\u76ee\u7684\u7aef\u7cfb\u7edf\u53d1\u9001\u4e00\u4e2a\u62a5\u6587\uff0c\u6e90\u5c06\u957f\u62a5\u6587\u5212\u5206\u4e3a\u8f83\u5c0f\u7684\u6570\u636e\u5757\uff0c\u79f0\u4e4b\u4e3a\u5206\u7ec4(packet) \u3002\u5728\u6e90\u548c\u76ee\u7684\u5730\u4e4b\u95f4\uff0c\u6bcf\u4e2a\u5206\u7ec4\u90fd\u901a\u8fc7\u901a\u4fe1\u94fe\u8def\u548c\u5206\u7ec4\u4ea4\u6362\u673a(packet switch) (\u4ea4\u6362\u673a\u4e3b\u8981\u6709\u4e24\u7c7b\uff1a\u8def\u7531\u5668\u548c\u94fe\u8def\u5c42\u4ea4\u6362\u673a)\u4f20\u9001\u3002 \u5206\u7ec4\u4ee5\u7b49\u4e8e\u8be5\u94fe\u8def\u6700\u5927\u4f20\u8f93\u901f\u7387\u7684\u901f\u5ea6\u4f20\u8f93\u901a\u8fc7\u901a\u4fe1\u94fe\u8def\u3002\u56e0\u6b64\uff0c\u5982\u679c\u67d0\u6e90\u7aef\u7cfb\u7edf\u6216\u5206\u7ec4\u4ea4\u6362\u673a\u7ecf\u8fc7\u4e00\u6761\u94fe\u8def\u53d1\u9001\u4e00\u4e2a L \u6bd4\u7279\u7684\u5206\u7ec4\uff0c\u94fe\u8def\u7684\u4f20\u8f93\u901f\u7387\u4e3a R \u6bd4\u7279/\u79d2\uff0c\u5219\u4f20\u8f93\u8be5\u5206\u7ec4\u7684\u65f6\u95f4\u4e3a L/R \u79d2\u3002 \u7535\u8def\u4ea4\u6362 \u00b6 \u901a\u8fc7\u7f51\u7edc\u94fe\u8def\u548c\u4ea4\u6362\u673a\u79fb\u52a8\u6570\u636e\u6709\u4e24\u79cd\u57fa\u672c\u65b9\u6cd5\uff1a \u7535\u8def\u4ea4\u6362 (circuit sw\u5c71hing) \u548c \u5206\u7ec4\u4ea4\u6362 (packet switching) \u3002 \u5728\u7535\u8def\u4ea4\u6362\u7f51\u7edc\u4e2d\uff0c\u5728\u7aef\u7cfb\u7edf\u95f4\u901a\u4fe1\u4f1a\u8bdd\u671f\u95f4\uff0c\u9884\u7559\u4e86\u7aef\u7cfb\u7edf\u95f4\u901a\u4fe1\u6cbf\u8def\u5f84\u6240\u9700\u8981\u7684\u8d44\u6e90(\u7f13\u5b58\uff0c\u94fe\u8def\u4f20\u8f93\u901f\u7387) \u3002\uff08\u800c\u5728\u5206\u7ec4\u4ea4\u6362\u7f51\u7edc\u4e2d\uff0c\u8fd9\u4e9b\u8d44\u6e90\u5219\u4e0d\u662f\u9884\u7559\u7684\uff0c\u4f1a\u8bdd\u7684\u62a5\u6587\u6309\u9700\u4f7f\u7528\u8fd9\u4e9b\u8d44\u6e90\uff0c\u5176\u540e\u679c\u53ef\u80fd\u662f\u4e0d\u5f97\u4e0d\u6392\u961f\u7b49\u5f85\u63a5\u5165\u901a\u4fe1\u7ebf\u8def\u3002\uff09 \u4f20\u7edf\u7684\u7535\u8bdd\u7f51\u7edc\u662f\u7535\u8def\u4ea4\u6362\u7f51\u7edc\u7684\u4f8b\u5b50\u3002\u8003\u8651\u5f53\u4e00\u4e2a\u4eba\u901a\u8fc7\u7535\u8bdd\u7f51\u5411\u53e6\u4e00\u4e2a\u4eba\u53d1\u9001\u4fe1\u606f(\u8bed\u97f3\u6216\u4f20\u771f)\u65f6\u6240\u53d1\u751f\u7684\u60c5\u51b5\u3002\u5728\u53d1\u9001\u65b9\u80fd\u591f\u53d1\u9001\u4fe1\u606f\u4e4b\u524d\uff0c\u8be5\u7f51\u7edc\u5fc5\u987b\u5728\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u4e4b\u95f4\u5efa\u7acb\u4e00\u6761\u8fde\u63a5\u3002\u8fd9\u662f\u4e00\u4e2a\u540d\u526f\u5176\u5b9e\u7684\u8fde\u63a5\uff0c\u56e0\u4e3a\u6b64\u65f6\u6cbf\u7740\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u4e4b\u95f4\u8def\u5f84\u4e0a\u7684\u4ea4\u6362\u673a\u90fd\u5c06\u4e3a\u8be5\u8fde\u63a5\u7ef4\u62a4\u8fde\u63a5\u72b6\u6001\u3002\u7528\u7535\u8bdd\u7684\u672f\u8bed\u6765\u8bf4\uff0c\u8be5\u8fde\u63a5\u88ab\u79f0\u4e3a\u4e00\u6761\u7535\u8def(circuit) \u3002\u5f53\u7f51\u7edc\u521b\u5efa\u8fd9\u79cd\u7535\u8def\u65f6\uff0c\u5b83\u4e5f\u5728\u8fde\u63a5\u671f\u95f4\u5728\u8be5\u7f51\u7edc\u94fe\u8def\u4e0a\u9884\u7559\u4e86\u6052\u5b9a\u7684\u4f20\u8f93\u901f\u7387(\u8868\u793a\u4e3a\u6bcf\u6761\u94fe\u8def\u4f20\u8f93\u5bb9\u91cf\u7684\u4e00\u90e8\u5206) \u3002\u65e2\u7136\u5df2\u7ecf\u4e3a\u8be5\u53d1\u9001\u65b9-\u63a5\u6536\u65b9\u8fde\u63a5\u9884\u7559\u4e86\u5e26\u5bbd\uff0c\u5219\u53d1\u9001\u65b9\u80fd\u591f\u4ee5\u786e\u4fdd\u7684\u6052\u5b9a\u901f\u7387\u5411\u63a5\u6536\u65b9\u4f20\u9001\u6570\u636e\u3002 \u7535\u8def\u4ea4\u6362\u7f51\u7edc\u4e2d\u7684\u590d\u7528 \u00b6 \u5b58\u50a8\u8f6c\u53d1\u4f20\u8f93 \u00b6 \u591a\u6570\u5206\u7ec4\u4ea4\u6362\u673a\u5728\u94fe\u8def\u7684\u8f93\u5165\u7aef\u4f7f\u7528\u5b58\u50a8\u8f6c\u53d1\u4f20\u8f93( store-and-forward lransmission)\u673a\u5236\uff0c \u5b58\u50a8\u8f6c\u53d1\u673a\u5236\u662f\u6307\u5728\u4ea4\u6362\u673a\u80fd\u591f\u5f00\u59cb\u5411\u8f93\u51fa\u94fe\u8def\u4f20\u8f93\u8be5\u5206\u7ec4\u7684\u7b2c\u4e00\u4e2a\u6bd4\u7279\u4e4b\u524d\uff0c\u5fc5\u987b\u63a5\u6536\u5230\u6574\u4e2a\u5206\u7ec4\u3002 \u6bcf\u4e2a\u5206\u7ec4\u4ea4\u6362\u673a\u6709\u591a\u6761\u94fe\u8def\u4e0e\u4e4b\u76f8\u8fde\u3002\u5bf9\u4e8e\u6bcf\u6761\u76f8\u8fde\u7684\u94fe\u8def\uff0c\u8be5\u5206\u7ec4\u4ea4\u6362\u673a\u5177\u6709\u4e00\u4e2a \u8f93\u51fa\u7f13\u5b58 (output buffer) (\u4e5f\u79f0\u4e3a \u8f93\u51fa\u961f\u5217 output queue) \uff0c\u5b83\u7528\u4e8e\u5b58\u50a8\u8def\u7531\u5668\u51c6\u5907\u53d1\u5f80\u90a3\u6761\u94fe\u8def\u7684\u5206\u7ec4\u3002\u8be5\u8f93\u51fa\u7f13\u5b58\u5728\u5206\u7ec4\u4ea4\u6362\u4e2d\u8d77\u7740\u91cd\u8981\u7684\u4f5c\u7528\u3002\u5982\u679c\u5230\u8fbe\u7684\u5206\u7ec4\u9700\u8981\u4f20\u8f93\u5230\u67d0\u6761\u94fe\u8def\uff0c\u4f46\u53d1\u73b0\u8be5\u94fe\u8def\u6b63\u5fd9\u4e8e\u4f20\u8f93\u5176\u4ed6\u5206\u7ec4\uff0c\u8be5\u5230\u8fbe\u5206\u7ec4\u5fc5\u987b\u5728\u8be5\u8f93\u51fa\u7f13\u5b58\u4e2d\u7b49\u5f85\u3002\u56e0\u6b64\uff0c\u9664\u4e86\u5b58\u50a8\u8f6c\u53d1\u65f6\u5ef6\u4ee5\u5916\uff0c\u5206\u7ec4\u8fd8\u8981\u627f\u53d7\u8f93\u51fa\u7f13\u5b58\u7684 \u6392\u961f\u65f6\u5ef6 (queue delay) \u3002\u8fd9\u4e9b\u65f6\u5ef6\u662f\u53d8\u5316\u7684\uff0c\u53d8\u5316\u7684\u7a0b\u5ea6\u53d6\u51b3\u4e8e\u7f51\u7edc\u4e2d\u7684\u62e5\u585e\u7a0b\u5ea6\u3002\u56e0\u4e3a\u7f13\u5b58\u7a7a\u95f4\u7684\u5927\u5c0f\u662f\u6709\u9650\u7684\uff0c \u4e00\u4e2a\u5230\u8fbe\u7684\u5206\u7ec4\u53ef\u80fd\u53d1\u73b0\u8be5\u7f13\u5b58\u5df2\u88ab\u5176\u4ed6\u7b49\u5f85\u4f20\u8f93\u7684\u5206\u7ec4\u5b8c\u5168\u5145\u6ee1\u4e86\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5c06\u51fa\u73b0 \u5206\u7ec4\u4e22\u5931(\u4e22\u5305) (packet lost) \uff0c\u5230\u8fbe\u7684\u5206\u7ec4\u6216\u5df2\u7ecf\u6392\u961f\u7684\u5206\u7ec4\u4e4b\u4e00\u5c06\u88ab\u4e22\u5f03\u3002 \u8f6c\u53d1\u8868 \u00b6 \u5728\u56e0\u7279\u7f51\u4e2d\uff0c\u6bcf\u4e2a\u7aef\u7cfb\u7edf\u5177\u6709\u4e00\u4e2a\u79f0\u4e3a IP \u5730\u5740\u7684\u5730\u5740\u3002\u5f53\u6e90\u4e3b\u673a\u8981\u5411\u76ee\u7684\u7aef\u7cfb\u7edf\u53d1\u9001\u4e00\u4e2a\u5206\u7ec4\u65f6\uff0c\u6e90\u5728\u8be5\u5206\u7ec4\u7684\u9996\u90e8\u5305\u542b\u4e86\u76ee\u7684\u5730\u7684IP\u5730\u5740\u3002\u5982\u540c\u90ae\u653f\u5730\u5740\u90a3\u6837\uff0c\u8be5\u5730\u5740\u5177\u6709\u4e00\u79cd\u7b49\u7ea7\u7ed3\u6784\u3002\u5f53\u4e00\u4e2a\u5206\u7ec4\u5230\u8fbe\u7f51\u7edc\u4e2d\u7684\u8def\u7531\u5668\u65f6\uff0c\u8def\u7531\u5668\u68c0\u67e5\u8be5\u5206\u7ec4\u7684\u76ee\u7684\u5730\u5740\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u5411\u4e00\u53f0\u76f8\u90bb\u8def\u7531\u5668\u8f6c\u53d1\u8be5\u5206\u7ec4\u3002\u66f4\u7279\u522b\u7684\u662f\uff0c\u6bcf\u53f0\u8def\u7531\u5668\u5177\u6709\u4e00\u4e2a \u8f6c\u53d1\u8868 (forwarding table) \uff0c\u7528\u4e8e\u5c06\u76ee\u7684\u5730\u5740(\u6216\u76ee\u7684\u5730\u5740\u7684\u4e00\u90e8\u5206)\u6620\u5c04\u6210\u4e3a\u8f93\u51fa\u94fe\u8def\u3002\u5f53\u67d0\u5206\u7ec4\u5230\u8fbe\u4e00\u53f0\u8def\u7531\u5668\u65f6\uff0c\u8def\u7531\u5668\u68c0\u67e5\u8be5\u5730\u5740\uff0c\u5e76\u7528\u8fd9\u4e2a\u76ee\u7684\u5730\u5740\u641c\u7d22\u5176\u8f6c\u53d1\u8868\uff0c\u4ee5\u53d1\u73b0\u9002\u5f53\u7684\u51fa\u94fe\u8def\uff0c\u8def\u7531\u5668\u5219\u5c06\u5206\u7ec4\u5bfc\u5411\u8be5\u51fa\u94fe\u8def\u3002\u7aef\u5230\u7aef\u9009\u8def\u7684\u8fc7\u7a0b\u4e0e\u4e00\u4e2a\u53f8\u673a\u4e0d\u4f7f\u7528\u5730\u56fe\u800c\u559c\u6b22\u95ee\u8def\u7684\u8fc7\u7a0b\u7c7b\u4f3c\u3002 \u56e0\u7279\u7f51\u5177\u6709\u4e00\u4e9b\u7279\u6b8a\u7684 \u8def\u7531\u9009\u62e9\u534f\u8bae (routing protocol) \uff0c\u7528\u4e8e\u81ea\u52a8\u5730\u8bbe\u7f6e\u8fd9\u4e9b\u8f6c\u53d1\u8868\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u8def\u7531\u9009\u62e9\u534f\u8bae\u53ef\u4ee5\u51b3\u5b9a\u4ece\u6bcf\u53f0\u8def\u7531\u5668\u5230\u6bcf\u4e2a\u76ee\u7684\u5730\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e9b\u6700\u77ed\u8def\u5f84\u7ed3\u679c\u6765\u914d\u7f6e\u8def\u7531\u5668\u4e2d\u7684\u8f6c\u53d1\u8868\u3002 \u53c2\u8003 \u00b6 \u300a\u8ba1\u7b97\u673a\u7f51\u7edc \u81ea\u9876\u5411\u4e0b\u65b9\u6cd5\u300b\u7b2c6\u7248","title":"1. \u7efc\u8ff0"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#1","text":"","title":"1. \u7efc\u8ff0"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_1","text":"\u56e0\u7279\u7f51\u662f\u4e00\u4e2a\u4e16\u754c\u8303\u56f4\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\uff0c\u5373\u5b83\u662f\u4e00\u4e2a\u4e92\u8054\u4e86\u904d\u53ca\u5168\u4e16\u754c\u7684\u6570\u4ee5\u4ebf\u8ba1\u7684\u8ba1\u7b97\u8bbe\u5907\u7684\u7f51\u7edc\u3002\u5728\u4e0d\u4e45\u524d\uff0c\u8fd9\u4e9b\u8ba1\u7b97\u8bbe\u5907\u591a\u6570\u662f\u4f20\u7edf\u7684\u684c\u9762PC\u3001Linux\u5de5\u4f5c\u7ad9\u4ee5\u53ca\u6240\u8c13\u7684\u670d\u52a1\u5668(\u5b83\u4eec\u7528\u4e8e\u5b58\u50a8\u548c\u4f20\u8f93 Web \u9875\u9762\u548c\u7535\u5b50\u90ae\u4ef6\u62a5\u6587\u7b49\u4fe1\u606f) \u3002\u7136\u800c\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u975e\u4f20\u7edf\u7684\u56e0\u7279\u7f51\u7aef\u7cfb\u7edf(\u5982\u4fbf\u643a\u673a\u3001\u667a\u80fd\u624b\u673a\u3001\u5e73\u677f\u7535\u8111\u3001\u7535\u89c6\u3001\u6e38\u620f\u673a\u3001Web \u76f8\u673a\u3001\u6c7d\u8f66\u3001\u73af\u5883\u4f20\u611f\u8bbe\u5907\u3001\u6570\u5b57\u76f8\u6846\u3001\u5bb6\u7528\u7535\u5668)\u548c\u5b89\u5168\u7cfb\u7edf\uff0c\u6b63\u5728\u4e0e\u56e0\u7279\u7f51\u76f8\u8fde\u3002\u7684\u786e\uff0c\u5728\u8bb8\u591a\u975e\u4f20\u7edf\u8bbe\u5907\u8fde\u63a5\u5230\u56e0\u7279\u7f51\u7684\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u8fd9\u4e2a\u672f\u8bed\u5f00\u59cb\u542c\u8d77\u6765\u6709\u4e9b\u8fc7\u65f6\u4e86\u3002 \u7528\u56e0\u7279\u7f51\u672f\u8bed\u6765\u8bf4\uff0c\u6240\u6709\u8fd9\u4e9b\u8bbe\u5907\u90fd\u79f0\u4e3a \u4e3b\u673a(host) \u6216 \u7aef\u7cfb\u7edf(end system) \u3002\u7aef\u7cfb\u7edf\u901a\u8fc7 \u901a\u4fe1\u94fe\u8def(communication link) \u548c \u5206\u7ec4\u4ea4\u6362\u673a(packet switch) \u8fde\u63a5\u5230\u4e00\u8d77\u3002","title":"\u56e0\u7279\u7f51"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_2","text":"\u901a\u4fe1\u94fe\u8def\u7531\u4e0d\u540c\u7c7b\u578b\u7684\u7269\u7406\u5a92\u4f53\u7ec4\u6210\u3002\u8fd9\u4e9b\u7269\u7406\u5a92\u4f53\u5305\u62ec\u540c\u8f74\u7535\u7f06\u3001\u94dc\u7ebf\u3001\u5149\u7ea4\u548c\u65e0\u7ebf\u7535\u9891\u8c31\u3002\u4e0d\u540c\u7684\u94fe\u8def\u80fd\u591f\u4ee5\u4e0d\u540c\u7684\u901f\u7387\u4f20\u8f93\u6570\u636e\uff0c\u94fe\u8def\u7684\u4f20\u8f93\u901f\u7387\u4ee5\u6bd4\u7279/\u79d2\u5ea6\u91cf(bit/s\uff0c\u6216bps)\u3002","title":"\u901a\u4fe1\u94fe\u8def"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_3","text":"\u5f53\u4e00\u53f0\u7aef\u7cfb\u7edf\u8981\u5411\u53e6\u4e00\u53f0\u7aef\u7cfb\u7edf\u53d1\u9001\u6570\u636e\u65f6\uff0c\u53d1\u9001\u7aef\u7cfb\u7edf\u5c06\u6570\u636e\u5206\u6bb5\uff0c\u5e76\u4e3a\u6bcf\u6bb5\u52a0\u4e0a\u9996\u90e8\u5b57\u8282\u3002\u7531\u6b64\u5f62\u6210\u7684\u4fe1\u606f\u5305\u7528\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u672f\u8bed\u6765\u8bf4\u79f0\u4e3a \u5206\u7ec4(packet) \u3002\u8fd9\u4e9b\u5206\u7ec4\u901a\u8fc7\u7f51\u7edc\u53d1\u9001\u5230\u76ee\u7684\u7aef\u7cfb\u7edf\uff0c\u5728\u90a3\u91cc\u88ab\u88c5\u914d\u6210\u521d\u59cb\u6570\u636e\u3002","title":"\u5206\u7ec4"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_4","text":"\u5206\u7ec4\u4ea4\u6362\u673a\u4ece\u5b83\u7684\u4e00\u6761\u5165\u901a\u4fe1\u94fe\u8def\u63a5\u6536\u5230\u8fbe\u7684\u5206\u7ec4\uff0c\u5e76\u4ece\u5b83\u7684\u4e00\u6761\u51fa\u901a\u4fe1\u94fe\u8def\u8f6c\u53d1\u8be5\u5206\u7ec4\u3002\u5e02\u9762\u4e0a\u6d41\u884c\u7740\u5404\u79cd\u7c7b\u578b\u3001\u5404\u5177\u7279\u8272\u7684\u5206\u7ec4\u4ea4\u6362\u673a\uff0c\u4f46\u5728\u5f53\u4eca\u7684\u56e0\u7279\u7f51\u4e2d\uff0c\u4e24\u79cd\u6700\u8457\u540d\u7684\u7c7b\u578b\u662f \u8def\u7531\u5668(router) \u548c \u94fe\u8def\u5c42\u4ea4\u6362\u673a(link-layer switch) \u3002\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u4ea4\u6362\u673a\u671d\u7740\u6700\u7ec8\u76ee\u7684\u5730\u8f6c\u53d1\u5206\u7ec4\u3002\u94fe\u8def\u5c42\u4ea4\u6362\u673a\u901a\u5e38\u7528\u4e8e\u63a5\u5165\u7f51\u4e2d\uff0c\u800c\u8def\u7531\u5668\u901a\u5e38\u7528\u4e8e\u7f51\u7edc\u6838\u5fc3\u4e2d\u3002","title":"\u4ea4\u6362\u673a"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_5","text":"\u4ece\u53d1\u9001\u7aef\u7cfb\u7edf\u5230\u63a5\u6536\u7aef\u7cfb\u7edf\uff0c\u4e00\u4e2a\u5206\u7ec4\u6240\u7ecf\u5386\u7684\u4e00\u7cfb\u5217\u901a\u4fe1\u94fe\u8def\u548c\u5206\u7ec4\u4ea4\u6362\u673a\u79f0\u4e3a\u901a\u8fc7\u8be5\u7f51\u7edc\u7684 \u8def\u5f84(route\u6216path) \u3002","title":"\u8def\u5f84"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_6","text":"\u7528\u4e8e\u4f20\u9001\u5206\u7ec4\u7684\u5206\u7ec4\u4ea4\u6362\u7f51\u7edc\u5728\u8bb8\u591a\u65b9\u9762\u7c7b\u4f3c\u4e8e\u627f\u8f7d\u8fd0\u8f93\u8f66\u8f86\u7684\u8fd0\u8f93\u7f51\u7edc\uff0c\u8be5\u7f51\u7edc\u5305\u62ec\u4e86\u9ad8\u901f\u516c\u8def\u3001\u516c\u8def\u548c\u7acb\u4ea4\u6865\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e0b\u5217\u60c5\u51b5\uff0c\u4e00\u4e2a\u5de5\u5382\u9700\u8981\u5c06\u5927\u91cf\u8d27\u7269\u642c\u8fd0\u5230\u6570\u5343\u516c\u91cc\u4ee5\u5916\u7684\u67d0\u4e2a\u76ee\u7684\u5730\u4ed3\u5e93\u3002\u5728\u5de5\u5382\u4e2d\uff0c\u8d27\u7269\u8981\u5206\u5f00\u5e76\u88c5\u4e0a\u5361\u8f66\u8f66\u961f\u3002\u7136\u540e\uff0c\u6bcf\u8f86\u5361\u8f66\u72ec\u7acb\u5730\u901a\u8fc7\u9ad8\u901f\u516c\u8def\u3001\u516c\u8def\u548c\u7acb\u4ea4\u6865\u7ec4\u6210\u7684\u7f51\u7edc\u5411\u8be5\u4ed3\u5e93\u8fd0\u9001\u8d27\u7269\u3002\u5728\u76ee\u7684\u5730\u4ed3\u5e93\uff0c\u5378\u4e0b\u8fd9\u4e9b\u8d27\u7269\uff0c\u5e76\u4e14\u4e0e\u4e00\u8d77\u88c5\u8f7d\u7684\u540c\u4e00\u6279\u8d27\u7269\u7684\u5176\u4f59\u90e8\u5206\u5806\u653e\u5728\u4e00\u8d77\u3002\u56e0\u6b64\uff0c\u5728\u8bb8\u591a\u65b9\u9762\uff0c\u5206\u7ec4\u7c7b\u4f3c\u4e8e\u5361\u8f66\uff0c\u901a\u4fe1\u94fe\u8def\u7c7b\u4f3c\u4e8e\u9ad8\u901f\u516c\u8def\u548c\u516c\u8def\uff0c\u5206\u7ec4\u4ea4\u6362\u673a\u7c7b\u4f3c\u4e8e\u7acb\u4ea4\u6865\uff0c\u800c\u7aef\u7cfb\u7edf\u7c7b\u4f3c\u4e8e\u5efa\u7b51\u7269\u3002\u5c31\u50cf\u5361\u8f66\u9009\u53d6\u8fd0\u8f93\u7f51\u7edc\u7684\u4e00\u6761\u8def\u5f84\u524d\u884c\u4e00\u6837\uff0c\u5206\u7ec4\u5219\u9009\u53d6\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u4e00\u6761\u8def\u5f84\u524d\u884c\u3002","title":"\u5206\u7ec4\u4ea4\u6362\u7f51\u7edc"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#isp","text":"\u7aef\u7cfb\u7edf\u901a\u8fc7 \u56e0\u7279\u7f51\u670d\u52a1\u63d0\u4f9b\u5546(Internet Service Provider , ISP) \u63a5\u5165\u56e0\u7279\u7f51\uff0c\u5305\u62ec\u5982\u672c\u5730\u7535\u7f06\u6216\u7535\u8bdd\u516c\u53f8\u90a3\u6837\u7684\u4f4f\u5b85\u533aISP \u3001\u516c\u53f8ISP\u3001\u5927\u5b66ISP \uff0c\u4ee5\u53ca\u90a3\u4e9b\u5728\u673a\u573a\u3001\u65c5\u9986\u3001\u5496\u5561\u5e97\u548c\u5176\u4ed6\u516c\u5171\u573a\u6240\u63d0\u4f9bWiFi \u63a5\u5165\u7684ISP \u3002 \u6bcf\u4e2aISP \u662f\u4e00\u4e2a\u7531\u591a\u4e2a\u5206\u7ec4\u4ea4\u6362\u673a\u548c\u591a\u6bb5\u901a\u4fe1\u94fe\u8def\u7ec4\u6210\u7684\u7f51\u7edc\u3002\u5404ISP \u4e3a\u7aef\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5404\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u7f51\u7edc\u63a5\u5165\uff0c\u5305\u62ec\u5982\u7ebf\u7f06\u8c03\u5236\u89e3\u8c03\u5668\u6216DSL \u90a3\u6837\u7684\u4f4f\u5b85\u5bbd\u5e26\u63a5\u5165\u3001\u9ad8\u901f\u5c40\u57df\u7f51\u63a5\u5165\u3001\u65e0\u7ebf\u63a5\u5165\u548c56kbps \u62e8\u53f7\u8c03\u5236\u89e3\u8c03\u5668\u63a5\u5165\u3002ISP \u4e5f\u4e3a\u5185\u5bb9\u63d0\u4f9b\u8005\u63d0\u4f9b\u56e0\u7279\u7f51\u63a5\u5165\u670d\u52a1\uff0c\u5c06Web \u7ad9\u70b9\u76f4\u63a5\u63a5\u5165\u56e0\u7279\u7f51\u3002 \u56e0\u7279\u7f51\u5c31\u662f\u5c06\u7aef\u7cfb\u7edf\u5f7c\u6b64\u4e92\u8054\uff0c\u56e0\u6b64\u4e3a\u7aef\u7cfb\u7edf\u63d0\u4f9b\u63a5\u5165\u7684ISP \u4e5f\u5fc5\u987b\u4e92\u8054\u3002\u4f4e\u5c42\u7684ISP \u901a\u8fc7\u56fd\u5bb6\u7684\u3001\u56fd\u9645\u7684\u9ad8\u5c42ISP (\u5982Level 3 Communications \u3001AT&T \u3001Sprint \u548cNTI) \u4e92\u8054\u8d77\u6765\u3002\u9ad8\u5c42ISP\u662f\u7531\u901a\u8fc7\u9ad8\u901f\u5149\u7ea4\u94fe\u8def\u4e92\u8054\u7684\u9ad8\u901f\u8def\u7531\u5668\u7ec4\u6210\u7684\u3002 \u65e0\u8bba\u662f\u9ad8\u5c42\u8fd8\u662f\u4f4e\u5c42ISP \u7f51\u7edc\uff0c\u5b83\u4eec\u6bcf\u4e2a\u90fd\u662f\u72ec\u7acb\u7ba1\u7406\u7684\uff0c\u8fd0\u884c\u7740IP\u534f\u8bae\uff0c\u9075\u4ece\u4e00\u5b9a\u7684\u547d\u540d\u548c\u5730\u5740\u4e60\u60ef\u3002","title":"ISP"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_7","text":"\u7aef\u7cfb\u7edf\u3001\u5206\u7ec4\u4ea4\u6362\u673a\u548c\u5176\u4ed6\u56e0\u7279\u7f51\u90e8\u4ef6\u90fd\u8981\u8fd0\u884c\u4e00\u7cfb\u5217\u534f\u8bae( protocol) \uff0c\u8fd9\u4e9b\u534f\u8bae\u63a7\u5236\u56e0\u7279\u7f51\u4e2d\u4fe1\u606f\u7684\u63a5\u6536\u548c\u53d1\u9001\u3002TCP (Transmission Control Protocol \uff0c\u4f20\u8f93\u63a7\u5236\u534f\u8bae)\u548cIP (Internet Protocol \uff0c\u7f51\u9645\u534f\u8bae)\u662f\u56e0\u7279\u7f51\u4e2d\u4e24\u4e2a\u6700\u4e3a\u91cd\u8981\u7684\u534f\u8bae\u3002IP \u534f\u8bae\u5b9a\u4e49\u4e86\u5728\u8def\u7531\u5668\u548c\u7aef\u7cfb\u7edf\u4e4b\u95f4\u53d1\u9001\u548c\u63a5\u6536\u7684\u5206\u7ec4\u683c\u5f0f\u3002\u56e0\u7279\u7f51\u7684\u4e3b\u8981\u534f\u8bae\u7edf\u79f0\u4e3aTCP/IP \u3002 \u7f51\u7edc\u534f\u8bae\u4ea4\u6362\u62a5\u6587\u548c\u91c7\u53d6\u52a8\u4f5c\u7684\u5b9e\u4f53\u662f\u67d0\u4e9b\u8bbe\u5907\u7684\u786c\u4ef6\u6216\u8f6f\u4ef6\u7ec4\u4ef6(\u8fd9\u4e9b\u8bbe\u5907\u53ef\u4ee5\u662f\u8ba1\u7b97\u673a\u3001\u667a\u80fd\u624b\u673a\u3001\u5e73\u677f\u7535\u8111\u3001\u8def\u7531\u5668\u6216\u5176\u4ed6\u5177\u6709\u7f51\u7edc\u80fd\u529b\u7684\u8bbe\u5907) \u3002\u5728\u56e0\u7279\u7f51\u4e2d\uff0c\u51e1\u662f\u6d89\u53ca\u4e24\u4e2a\u6216\u591a\u4e2a\u8fdc\u7a0b\u901a\u4fe1\u5b9e\u4f53\u7684\u6240\u6709\u6d3b\u52a8\u90fd\u53d7\u534f\u8bae\u7684\u5236\u7ea6\u3002\u4f8b\u5982\uff0c\u5728\u4e24\u53f0\u7269\u7406\u4e0a\u8fde\u63a5\u7684\u8ba1\u7b97\u673a\u4e2d\uff0c\u786c\u4ef6\u5b9e\u73b0\u7684\u534f\u8bae\u63a7\u5236\u4e86\u5728\u4e24\u5757\u7f51\u7edc\u63a5\u53e3\u5361\u95f4\u7684\"\u7ebf\u4e0a\"\u7684\u6bd4\u7279\u6d41\uff1b\u5728\u7aef\u7cfb\u7edf\u4e2d\uff0c\u62e5\u585e\u63a7\u5236\u534f\u8bae\u63a7\u5236\u4e86\u5728\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u4e4b\u95f4\u4f20\u8f93\u7684\u5206\u7ec4\u53d1\u9001\u7684\u901f\u7387\u3002\u663e\u7136\uff0c\u534f\u8bae\u5728\u56e0\u7279\u7f51\u4e2d\u65e0\u5904\u4e0d\u5728\u3002 \u4ee5\u5927\u5bb6\u53ef\u80fd\u719f\u6089\u7684\u4e00\u4e2a\u8ba1\u7b97\u673a\u7f51\u7edc\u534f\u8bae\u4e3a\u4f8b\uff0c\u8003\u8651\u5f53\u4f60\u5411\u4e00\u4e2aWeb \u670d\u52a1\u5668\u53d1\u51fa\u8bf7\u6c42(\u5373\u4f60\u5728Web \u6d4f\u89c8\u5668\u4e2d\u952e\u5165\u4e00\u4e2aWeb \u7f51\u9875\u7684URL) \u65f6\u6240\u53d1\u751f\u7684\u60c5\u51b5\u3002\u9996\u5148\uff0c\u4f60\u7684\u8ba1\u7b97\u673a\u5c06\u5411\u8be5Web \u670d\u52a1\u5668\u53d1\u9001\u4e00\u6761\u8fde\u63a5\u8bf7\u6c42\u62a5\u6587\uff0c\u5e76\u7b49\u5f85\u56de\u7b54\u3002\u8be5Web \u670d\u52a1\u5668\u5c06\u6700\u7ec8\u80fd\u63a5\u6536\u5230\u8fde\u63a5\u8bf7\u6c42\u62a5\u6587\uff0c\u5e76\u8fd4\u56de\u4e00\u6761\u8fde\u63a5\u54cd\u5e94\u62a5\u6587\u3002\u5f97\u77e5\u8bf7\u6c42\u8be5Web \u6587\u6863\u6b63\u5e38\u4ee5\u540e\uff0c\u8ba1\u7b97\u673a\u5219\u5728\u4e00\u6761 GET \u62a5\u6587\u4e2d\u53d1\u9001\u8981\u4ece\u8fd9\u53f0 Web \u670d\u52a1\u5668\u4e0a\u53d6\u56de\u7684\u7f51\u9875\u540d\u5b57\u3002\u6700\u540e\uff0c Web \u670d\u52a1\u5668\u5411\u8ba1\u7b97\u673a\u8fd4\u56de\u8be5Web \u7f51\u9875(\u6587\u4ef6) \u3002 \u4ece\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\u53ef\u89c1\uff0c\u62a5\u6587\u7684\u4ea4\u6362\u4ee5\u53ca\u53d1\u9001\u548c\u63a5\u6536\u8fd9\u4e9b\u62a5\u6587\u65f6\u6240\u91c7\u53d6\u7684\u52a8\u4f5c\u662f\u5b9a\u4e49\u4e00\u4e2a\u534f\u8bae\u7684\u5173\u952e\u5143\u7d20\uff1a \u4e00\u4e2a\u534f\u8bae\u5b9a\u4e49\u4e86\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u901a\u4fe1\u5b9e\u4f53\u4e4b\u95f4\u4ea4\u6362\u7684\u62a5\u6587\u683c\u5f0f\u548c\u6b21\u5e8f\uff0c\u4ee5\u53ca\u62a5\u6587\u53d1\u9001\u548c/\u6216\u63a5\u6536\u4e00\u6761\u62a5\u6587\u6216\u5176\u4ed6\u4e8b\u4ef6\u6240\u91c7\u53d6\u7684\u52a8\u4f5c\u3002 \u56e0\u7279\u7f51(\u66f4\u4e00\u822c\u5730\u8bf4\u662f\u8ba1\u7b97\u673a\u7f51\u7edc)\u5e7f\u6cdb\u5730\u4f7f\u7528\u4e86\u534f\u8bae\u3002\u4e0d\u540c\u7684\u534f\u8bae\u7528\u4e8e\u5b8c\u6210\u4e0d\u540c\u7684\u901a\u4fe1\u4efb\u52a1\uff0c\u67d0\u4e9b\u534f\u8bae\u7b80\u5355\u800c\u76f4\u622a\u4e86\u5f53\uff0c\u800c\u53e6\u4e00\u4e9b\u534f\u8bae\u5219\u590d\u6742\u4e14\u6666\u6da9\u96be\u61c2\u3002\u638c\u63e1\u8ba1\u7b97\u673a\u7f51\u7edc\u9886\u57df\u77e5\u8bc6\u7684\u8fc7\u7a0b\u5c31\u662f\u7406\u89e3\u7f51\u7edc\u534f\u8bae\u7684\u6784\u6210\u3001\u539f\u7406\u548c\u5de5\u4f5c\u65b9\u5f0f\u7684\u8fc7\u7a0b\u3002","title":"\u534f\u8bae"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_8","text":"\u9274\u4e8e\u56e0\u7279\u7f51\u534f\u8bae\u7684\u91cd\u8981\u6027\uff0c\u6bcf\u4e2a\u4eba\u5c31\u5404\u4e2a\u534f\u8bae\u53ca\u5176\u4f5c\u7528\u53d6\u5f97\u4e00\u81f4\u8ba4\u8bc6\u662f\u5f88\u91cd\u8981\u7684\uff0c\u8fd9\u6837\u4eba\u4eec\u5c31\u80fd\u591f\u521b\u9020\u534f\u540c\u5de5\u4f5c\u7684\u7cfb\u7edf\u548c\u4ea7\u54c1\u3002\u8fd9\u6b63\u662f\u6807\u51c6\u53d1\u6325\u4f5c\u7528\u7684\u5730\u65b9\u3002 \u56e0\u7279\u7f51\u6807\u51c6( Internet standard) \u7531\u56e0\u7279\u7f51\u5de5\u7a0b\u4efb\u52a1\u7ec4(Internet Engineering Task Force , IETF) [ lETF 2012] \u7814\u53d1\u3002IETF \u7684\u6807\u51c6\u6587\u6863\u79f0\u4e3a\u8bf7\u6c42\u8bc4\u8bba(Request For Comment \uff0cRFC) \u3002RFC\u6700\u521d\u662f\u4f5c\u4e3a\u666e\u901a\u7684\u8bf7\u6c42\u8bc4\u8bba(\u56e0\u6b64\u800c\u5f97\u540d) \uff0c\u4ee5\u89e3\u51b3\u56e0\u7279\u7f51\u5148\u9a71\u8005\u4eec\u9762\u4e34\u7684\u7f51\u7edc\u548c\u534f\u8bae\u95ee\u9898\u3002 RFC\u6587\u6321\u5f80\u5f80\u662f\u6280\u672f\u6027\u5f88\u5f3a\u5e76\u76f8\u5f53\u8be6\u7ec6\u7684\u3002\u5b83\u4eec\u5b9a\u4e49\u4e86TCP \u3001IP \u3001HTTP(\u7528\u4e8eWeb) \u548cSMTP (\u7528\u4e8e\u7535\u5b50\u90ae\u4ef6)\u7b49\u534f\u8bae\u3002\u76ee\u524d\u5df2\u7ecf\u6709\u5c06\u8fd16000 \u4e2aRFC\u3002\u5176\u4ed6\u7ec4\u7ec7\u4e5f\u5728\u5236\u5b9a\u7528\u4e8e\u7f51\u7edc\u7ec4\u4ef6\u7684\u6807\u51c6\uff0c\u6700\u5f15\u4eba\u6ce8\u76ee\u7684\u662f\u9488\u5bf9\u7f51\u7edc\u94fe\u8def\u7684\u6807\u51c6\u3002\u4f8b\u5982\uff0cIEEE 802 LAN/MAN \u6807\u51c6\u5316\u59d4\u5458\u4f1a[IEEE 802 202] \u5236\u5b9a\u4e86\u4ee5\u592a\u7f51\u548c\u65e0\u7ebf WiFi \u7684\u6807\u51c6\u3002","title":"\u6807\u51c6"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_9","text":"\u901a\u5e38\u628a\u4e0e\u56e0\u7279\u7f51\u76f8\u8fde\u7684\u8ba1\u7b97\u673a\u548c\u5176\u4ed6\u8bbe\u5907\u79f0\u4e3a\u7aef\u7cfb\u7edf\u3002\u56e0\u4e3a\u5b83\u4eec\u4f4d\u4e8e\u56e0\u7279\u7f51\u7684\u8fb9\u7f18\uff0c\u6545\u800c\u88ab\u79f0\u4e3a\u7aef\u7cfb\u7edf\u3002\u56e0\u7279\u7f51\u7684\u7aef\u7cfb\u7edf\u5305\u62ec\u4e86\u684c\u9762\u8ba1\u7b97\u673a(\u4f8b\u5982\uff0c\u684c\u9762PC\u3001Mac \u548cLinux \u76d2)\u3001\u670d\u52a1\u5668(\u4f8b\u5982\uff0c Web \u548c\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u5668)\u548c\u79fb\u52a8\u8ba1\u7b97\u673a(\u4f8b\u5982\uff0c\u4fbf\u643a\u673a\u3001\u667a\u80fd\u624b\u673a\u548c\u5e73\u677f\u7535\u8111) \u3002\u6b64\u5916\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u975e\u4f20\u7edf\u8bbe\u5907\u6b63\u88ab\u4f5c\u4e3a\u7aef\u7cfb\u7edf\u4e0e\u56e0\u7279\u7f51\u76f8\u8fde\u3002 \u7aef\u7cfb\u7edf\u4e5f\u79f0\u4e3a\u4e3b\u673a\uff0c\u56e0\u4e3a\u5b83\u4eec\u5bb9\u7eb3(\u5373\u8fd0\u884c)\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982Web \u6d4f\u89c8\u5668\u7a0b\u5e8f\u3001Web\u670d\u52a1\u5668\u7a0b\u5e8f\u3001\u7535\u5b50\u90ae\u4ef6\u9605\u8bfb\u7a0b\u5e8f\u6216\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u5668\u7a0b\u5e8f\u7b49\u3002\u4e3b\u673a\u6709\u65f6\u53c8\u88ab\u8fdb\u4e00\u6b65\u5212\u5206\u4e3a\u4e24\u7c7b:\u5ba2\u6237( client) \u548c\u670d\u52a1\u5668(server) \u3002\u5ba2\u6237\u975e\u6b63\u5f0f\u5730\u7b49\u540c\u4e8e\u684c\u9762PC\u3001\u79fb\u52a8PC \u548c\u667a\u80fd\u624b\u673a\u7b49\uff0c\u800c\u670d\u52a1\u5668\u975e\u6b63\u5f0f\u5730\u7b49\u540c\u4e8e\u66f4\u4e3a\u5f3a\u5927\u7684\u673a\u5668\uff0c\u7528\u4e8e\u5b58\u50a8\u548c\u53d1\u5e03Web \u9875\u9762\u3001\u6d41\u89c6\u9891\u3001\u4e2d\u7ee7\u7535\u5b50\u90ae\u4ef6\u7b49\u3002","title":"\u7aef\u7cfb\u7edf"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_10","text":"\u8003\u8651\u4e86\u4f4d\u4e8e\"\u7f51\u7edc\u8fb9\u7f18\"\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u7aef\u7cfb\u7edf\u540e\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u518d\u8003\u8651\u63a5\u5165\u7f51(access network) \uff0c\u8fd9\u662f\u6307\u5c06\u7aef\u7cfb\u7edf\u8fde\u63a5\u5230\u5176\u8fb9\u7f18\u8def\u7531\u5668(edge router) \u7684\u7269\u7406\u94fe\u8def\u3002\u8fb9\u7f18\u8def\u7531\u5668\u662f\u7aef\u7cfb\u7edf\u5230\u4efb\u4f55\u5176\u4ed6\u8fdc\u7a0b\u7aef\u7cfb\u7edf\u7684\u8def\u5f84\u4e0a\u7684\u7b2c\u4e00\u53f0\u8def\u7531\u5668\u3002","title":"\u63a5\u5165\u7f51"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_11","text":"\u901a\u8fc7\u7f51\u7edc\u94fe\u8def\u548c\u4ea4\u6362\u673a\u79fb\u52a8\u6570\u636e\u6709\u4e24\u79cd\u57fa\u672c\u65b9\u6cd5\uff1a \u7535\u8def\u4ea4\u6362 (circuit sw\u5c71hing) \u548c \u5206\u7ec4\u4ea4\u6362 (packet switching) \u3002 \u5728\u5404\u79cd\u7f51\u7edc\u5e94\u7528\u4e2d\uff0c\u7aef\u7cfb\u7edf\u5f7c\u6b64\u4ea4\u6362\u62a5\u6587(message) \u3002\u62a5\u6587\u80fd\u591f\u5305\u542b\u534f\u8bae\u8bbe\u8ba1\u8005\u9700\u8981\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u62a5\u6587\u53ef\u4ee5\u6267\u884c\u4e00\u79cd\u63a7\u5236\u529f\u80fd\uff0c\u4e5f\u53ef\u4ee5\u5305\u542b\u6570\u636e\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u6570\u636e\u3001JPEG\u56fe\u50cf\u6216MP3\u97f3\u9891\u6587\u4ef6\u3002 \u4e3a\u4e86\u4ece\u6e90\u7aef\u7cfb\u7edf\u5411\u76ee\u7684\u7aef\u7cfb\u7edf\u53d1\u9001\u4e00\u4e2a\u62a5\u6587\uff0c\u6e90\u5c06\u957f\u62a5\u6587\u5212\u5206\u4e3a\u8f83\u5c0f\u7684\u6570\u636e\u5757\uff0c\u79f0\u4e4b\u4e3a\u5206\u7ec4(packet) \u3002\u5728\u6e90\u548c\u76ee\u7684\u5730\u4e4b\u95f4\uff0c\u6bcf\u4e2a\u5206\u7ec4\u90fd\u901a\u8fc7\u901a\u4fe1\u94fe\u8def\u548c\u5206\u7ec4\u4ea4\u6362\u673a(packet switch) (\u4ea4\u6362\u673a\u4e3b\u8981\u6709\u4e24\u7c7b\uff1a\u8def\u7531\u5668\u548c\u94fe\u8def\u5c42\u4ea4\u6362\u673a)\u4f20\u9001\u3002 \u5206\u7ec4\u4ee5\u7b49\u4e8e\u8be5\u94fe\u8def\u6700\u5927\u4f20\u8f93\u901f\u7387\u7684\u901f\u5ea6\u4f20\u8f93\u901a\u8fc7\u901a\u4fe1\u94fe\u8def\u3002\u56e0\u6b64\uff0c\u5982\u679c\u67d0\u6e90\u7aef\u7cfb\u7edf\u6216\u5206\u7ec4\u4ea4\u6362\u673a\u7ecf\u8fc7\u4e00\u6761\u94fe\u8def\u53d1\u9001\u4e00\u4e2a L \u6bd4\u7279\u7684\u5206\u7ec4\uff0c\u94fe\u8def\u7684\u4f20\u8f93\u901f\u7387\u4e3a R \u6bd4\u7279/\u79d2\uff0c\u5219\u4f20\u8f93\u8be5\u5206\u7ec4\u7684\u65f6\u95f4\u4e3a L/R \u79d2\u3002","title":"\u5206\u7ec4\u4ea4\u6362"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_12","text":"\u901a\u8fc7\u7f51\u7edc\u94fe\u8def\u548c\u4ea4\u6362\u673a\u79fb\u52a8\u6570\u636e\u6709\u4e24\u79cd\u57fa\u672c\u65b9\u6cd5\uff1a \u7535\u8def\u4ea4\u6362 (circuit sw\u5c71hing) \u548c \u5206\u7ec4\u4ea4\u6362 (packet switching) \u3002 \u5728\u7535\u8def\u4ea4\u6362\u7f51\u7edc\u4e2d\uff0c\u5728\u7aef\u7cfb\u7edf\u95f4\u901a\u4fe1\u4f1a\u8bdd\u671f\u95f4\uff0c\u9884\u7559\u4e86\u7aef\u7cfb\u7edf\u95f4\u901a\u4fe1\u6cbf\u8def\u5f84\u6240\u9700\u8981\u7684\u8d44\u6e90(\u7f13\u5b58\uff0c\u94fe\u8def\u4f20\u8f93\u901f\u7387) \u3002\uff08\u800c\u5728\u5206\u7ec4\u4ea4\u6362\u7f51\u7edc\u4e2d\uff0c\u8fd9\u4e9b\u8d44\u6e90\u5219\u4e0d\u662f\u9884\u7559\u7684\uff0c\u4f1a\u8bdd\u7684\u62a5\u6587\u6309\u9700\u4f7f\u7528\u8fd9\u4e9b\u8d44\u6e90\uff0c\u5176\u540e\u679c\u53ef\u80fd\u662f\u4e0d\u5f97\u4e0d\u6392\u961f\u7b49\u5f85\u63a5\u5165\u901a\u4fe1\u7ebf\u8def\u3002\uff09 \u4f20\u7edf\u7684\u7535\u8bdd\u7f51\u7edc\u662f\u7535\u8def\u4ea4\u6362\u7f51\u7edc\u7684\u4f8b\u5b50\u3002\u8003\u8651\u5f53\u4e00\u4e2a\u4eba\u901a\u8fc7\u7535\u8bdd\u7f51\u5411\u53e6\u4e00\u4e2a\u4eba\u53d1\u9001\u4fe1\u606f(\u8bed\u97f3\u6216\u4f20\u771f)\u65f6\u6240\u53d1\u751f\u7684\u60c5\u51b5\u3002\u5728\u53d1\u9001\u65b9\u80fd\u591f\u53d1\u9001\u4fe1\u606f\u4e4b\u524d\uff0c\u8be5\u7f51\u7edc\u5fc5\u987b\u5728\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u4e4b\u95f4\u5efa\u7acb\u4e00\u6761\u8fde\u63a5\u3002\u8fd9\u662f\u4e00\u4e2a\u540d\u526f\u5176\u5b9e\u7684\u8fde\u63a5\uff0c\u56e0\u4e3a\u6b64\u65f6\u6cbf\u7740\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u4e4b\u95f4\u8def\u5f84\u4e0a\u7684\u4ea4\u6362\u673a\u90fd\u5c06\u4e3a\u8be5\u8fde\u63a5\u7ef4\u62a4\u8fde\u63a5\u72b6\u6001\u3002\u7528\u7535\u8bdd\u7684\u672f\u8bed\u6765\u8bf4\uff0c\u8be5\u8fde\u63a5\u88ab\u79f0\u4e3a\u4e00\u6761\u7535\u8def(circuit) \u3002\u5f53\u7f51\u7edc\u521b\u5efa\u8fd9\u79cd\u7535\u8def\u65f6\uff0c\u5b83\u4e5f\u5728\u8fde\u63a5\u671f\u95f4\u5728\u8be5\u7f51\u7edc\u94fe\u8def\u4e0a\u9884\u7559\u4e86\u6052\u5b9a\u7684\u4f20\u8f93\u901f\u7387(\u8868\u793a\u4e3a\u6bcf\u6761\u94fe\u8def\u4f20\u8f93\u5bb9\u91cf\u7684\u4e00\u90e8\u5206) \u3002\u65e2\u7136\u5df2\u7ecf\u4e3a\u8be5\u53d1\u9001\u65b9-\u63a5\u6536\u65b9\u8fde\u63a5\u9884\u7559\u4e86\u5e26\u5bbd\uff0c\u5219\u53d1\u9001\u65b9\u80fd\u591f\u4ee5\u786e\u4fdd\u7684\u6052\u5b9a\u901f\u7387\u5411\u63a5\u6536\u65b9\u4f20\u9001\u6570\u636e\u3002","title":"\u7535\u8def\u4ea4\u6362"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_13","text":"","title":"\u7535\u8def\u4ea4\u6362\u7f51\u7edc\u4e2d\u7684\u590d\u7528"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_14","text":"\u591a\u6570\u5206\u7ec4\u4ea4\u6362\u673a\u5728\u94fe\u8def\u7684\u8f93\u5165\u7aef\u4f7f\u7528\u5b58\u50a8\u8f6c\u53d1\u4f20\u8f93( store-and-forward lransmission)\u673a\u5236\uff0c \u5b58\u50a8\u8f6c\u53d1\u673a\u5236\u662f\u6307\u5728\u4ea4\u6362\u673a\u80fd\u591f\u5f00\u59cb\u5411\u8f93\u51fa\u94fe\u8def\u4f20\u8f93\u8be5\u5206\u7ec4\u7684\u7b2c\u4e00\u4e2a\u6bd4\u7279\u4e4b\u524d\uff0c\u5fc5\u987b\u63a5\u6536\u5230\u6574\u4e2a\u5206\u7ec4\u3002 \u6bcf\u4e2a\u5206\u7ec4\u4ea4\u6362\u673a\u6709\u591a\u6761\u94fe\u8def\u4e0e\u4e4b\u76f8\u8fde\u3002\u5bf9\u4e8e\u6bcf\u6761\u76f8\u8fde\u7684\u94fe\u8def\uff0c\u8be5\u5206\u7ec4\u4ea4\u6362\u673a\u5177\u6709\u4e00\u4e2a \u8f93\u51fa\u7f13\u5b58 (output buffer) (\u4e5f\u79f0\u4e3a \u8f93\u51fa\u961f\u5217 output queue) \uff0c\u5b83\u7528\u4e8e\u5b58\u50a8\u8def\u7531\u5668\u51c6\u5907\u53d1\u5f80\u90a3\u6761\u94fe\u8def\u7684\u5206\u7ec4\u3002\u8be5\u8f93\u51fa\u7f13\u5b58\u5728\u5206\u7ec4\u4ea4\u6362\u4e2d\u8d77\u7740\u91cd\u8981\u7684\u4f5c\u7528\u3002\u5982\u679c\u5230\u8fbe\u7684\u5206\u7ec4\u9700\u8981\u4f20\u8f93\u5230\u67d0\u6761\u94fe\u8def\uff0c\u4f46\u53d1\u73b0\u8be5\u94fe\u8def\u6b63\u5fd9\u4e8e\u4f20\u8f93\u5176\u4ed6\u5206\u7ec4\uff0c\u8be5\u5230\u8fbe\u5206\u7ec4\u5fc5\u987b\u5728\u8be5\u8f93\u51fa\u7f13\u5b58\u4e2d\u7b49\u5f85\u3002\u56e0\u6b64\uff0c\u9664\u4e86\u5b58\u50a8\u8f6c\u53d1\u65f6\u5ef6\u4ee5\u5916\uff0c\u5206\u7ec4\u8fd8\u8981\u627f\u53d7\u8f93\u51fa\u7f13\u5b58\u7684 \u6392\u961f\u65f6\u5ef6 (queue delay) \u3002\u8fd9\u4e9b\u65f6\u5ef6\u662f\u53d8\u5316\u7684\uff0c\u53d8\u5316\u7684\u7a0b\u5ea6\u53d6\u51b3\u4e8e\u7f51\u7edc\u4e2d\u7684\u62e5\u585e\u7a0b\u5ea6\u3002\u56e0\u4e3a\u7f13\u5b58\u7a7a\u95f4\u7684\u5927\u5c0f\u662f\u6709\u9650\u7684\uff0c \u4e00\u4e2a\u5230\u8fbe\u7684\u5206\u7ec4\u53ef\u80fd\u53d1\u73b0\u8be5\u7f13\u5b58\u5df2\u88ab\u5176\u4ed6\u7b49\u5f85\u4f20\u8f93\u7684\u5206\u7ec4\u5b8c\u5168\u5145\u6ee1\u4e86\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5c06\u51fa\u73b0 \u5206\u7ec4\u4e22\u5931(\u4e22\u5305) (packet lost) \uff0c\u5230\u8fbe\u7684\u5206\u7ec4\u6216\u5df2\u7ecf\u6392\u961f\u7684\u5206\u7ec4\u4e4b\u4e00\u5c06\u88ab\u4e22\u5f03\u3002","title":"\u5b58\u50a8\u8f6c\u53d1\u4f20\u8f93"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_15","text":"\u5728\u56e0\u7279\u7f51\u4e2d\uff0c\u6bcf\u4e2a\u7aef\u7cfb\u7edf\u5177\u6709\u4e00\u4e2a\u79f0\u4e3a IP \u5730\u5740\u7684\u5730\u5740\u3002\u5f53\u6e90\u4e3b\u673a\u8981\u5411\u76ee\u7684\u7aef\u7cfb\u7edf\u53d1\u9001\u4e00\u4e2a\u5206\u7ec4\u65f6\uff0c\u6e90\u5728\u8be5\u5206\u7ec4\u7684\u9996\u90e8\u5305\u542b\u4e86\u76ee\u7684\u5730\u7684IP\u5730\u5740\u3002\u5982\u540c\u90ae\u653f\u5730\u5740\u90a3\u6837\uff0c\u8be5\u5730\u5740\u5177\u6709\u4e00\u79cd\u7b49\u7ea7\u7ed3\u6784\u3002\u5f53\u4e00\u4e2a\u5206\u7ec4\u5230\u8fbe\u7f51\u7edc\u4e2d\u7684\u8def\u7531\u5668\u65f6\uff0c\u8def\u7531\u5668\u68c0\u67e5\u8be5\u5206\u7ec4\u7684\u76ee\u7684\u5730\u5740\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u5411\u4e00\u53f0\u76f8\u90bb\u8def\u7531\u5668\u8f6c\u53d1\u8be5\u5206\u7ec4\u3002\u66f4\u7279\u522b\u7684\u662f\uff0c\u6bcf\u53f0\u8def\u7531\u5668\u5177\u6709\u4e00\u4e2a \u8f6c\u53d1\u8868 (forwarding table) \uff0c\u7528\u4e8e\u5c06\u76ee\u7684\u5730\u5740(\u6216\u76ee\u7684\u5730\u5740\u7684\u4e00\u90e8\u5206)\u6620\u5c04\u6210\u4e3a\u8f93\u51fa\u94fe\u8def\u3002\u5f53\u67d0\u5206\u7ec4\u5230\u8fbe\u4e00\u53f0\u8def\u7531\u5668\u65f6\uff0c\u8def\u7531\u5668\u68c0\u67e5\u8be5\u5730\u5740\uff0c\u5e76\u7528\u8fd9\u4e2a\u76ee\u7684\u5730\u5740\u641c\u7d22\u5176\u8f6c\u53d1\u8868\uff0c\u4ee5\u53d1\u73b0\u9002\u5f53\u7684\u51fa\u94fe\u8def\uff0c\u8def\u7531\u5668\u5219\u5c06\u5206\u7ec4\u5bfc\u5411\u8be5\u51fa\u94fe\u8def\u3002\u7aef\u5230\u7aef\u9009\u8def\u7684\u8fc7\u7a0b\u4e0e\u4e00\u4e2a\u53f8\u673a\u4e0d\u4f7f\u7528\u5730\u56fe\u800c\u559c\u6b22\u95ee\u8def\u7684\u8fc7\u7a0b\u7c7b\u4f3c\u3002 \u56e0\u7279\u7f51\u5177\u6709\u4e00\u4e9b\u7279\u6b8a\u7684 \u8def\u7531\u9009\u62e9\u534f\u8bae (routing protocol) \uff0c\u7528\u4e8e\u81ea\u52a8\u5730\u8bbe\u7f6e\u8fd9\u4e9b\u8f6c\u53d1\u8868\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u8def\u7531\u9009\u62e9\u534f\u8bae\u53ef\u4ee5\u51b3\u5b9a\u4ece\u6bcf\u53f0\u8def\u7531\u5668\u5230\u6bcf\u4e2a\u76ee\u7684\u5730\u7684\u6700\u77ed\u8def\u5f84\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e9b\u6700\u77ed\u8def\u5f84\u7ed3\u679c\u6765\u914d\u7f6e\u8def\u7531\u5668\u4e2d\u7684\u8f6c\u53d1\u8868\u3002","title":"\u8f6c\u53d1\u8868"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%20%E7%BB%BC%E8%BF%B0/#_16","text":"\u300a\u8ba1\u7b97\u673a\u7f51\u7edc \u81ea\u9876\u5411\u4e0b\u65b9\u6cd5\u300b\u7b2c6\u7248","title":"\u53c2\u8003"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.%20%E7%89%A9%E7%90%86%E5%B1%82/","text":"","title":"2. \u7269\u7406\u5c42"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.%20%E9%93%BE%E8%B7%AF%E5%B1%82/","text":"","title":"3. \u94fe\u8def\u5c42"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.%20%E7%BD%91%E7%BB%9C%E5%B1%82/","text":"","title":"4. \u7f51\u7edc\u5c42"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.%20%E4%BC%A0%E8%BE%93%E5%B1%82/","text":"\u534f\u8bae \u00b6 TCP (Transmission Control Protocol) UDP (User Datagram Protocol) QUIC (Quick UDP Internet Connections) New","title":"5. \u4f20\u8f93\u5c42"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.%20%E4%BC%A0%E8%BE%93%E5%B1%82/#_1","text":"TCP (Transmission Control Protocol) UDP (User Datagram Protocol) QUIC (Quick UDP Internet Connections) New","title":"\u534f\u8bae"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6.%20%E5%BA%94%E7%94%A8%E5%B1%82/","text":"","title":"6. \u5e94\u7528\u5c42"},{"location":"%E9%9D%A2%E7%BB%8F/","text":"README \u00b6 \u5168\u662f\u4ece\u725b\u5ba2\u7f51\u6252\u62c9\u4e0b\u6765\u7684\uff0c\u53ef\u80fd\u5b58\u5728\u94fe\u63a5\u5931\u6548\u7684\u60c5\u51b5\uff0c\u4f1a\u5b9a\u671f\u6e05\u7406\u3002 \u6bcf\u4e2a\u9762\u7ecf\u90fd\u8981\u81ea\u5df1\u8fc7\u4e00\u904d\uff0c\u4e0d\u8981\u770b\u4e00\u904d\u8111\u5185\u8fc7\u4e00\u4e0b\u5c31\u7ed3\u675f\u4e86\uff0c \u6bcf\u4e2a\u9898\u76ee\u5355\u72ec\u62ce\u51fa\u6765\u505a\u6210\u4e00\u4e2a\u95ee\u5377 \u7136\u540e\u81ea\u5df1\u6253\u5b57\u56de\u7b54\u4e00\u4e0b\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u67e5\u6f0f\u8865\u7f3a\u3002 \u5b89\u5353\u5de5\u7a0b\u5e08\u7cbe\u9009\u9762\u7ecf\u6c47\u603b \u5b57\u8282\u8df3\u52a8\u9762\u7ecf\u6c47\u603b \u5b57\u8282\u5b89\u5353\u9762\u7ecf\u6c47\u603b Android\u9762\u7ecf\u6536\u96c6 \u00b6 \u5b57\u8282\u8df3\u52a8part \u00b6 \u5b57\u8282\u63d0\u524d\u6279\u6821\u62db\u4e00\u9762Android\u5de5\u7a0b\u5e082020[\u5df2\u6302] \u79fb\u52a8\u5ba2\u6237\u7aef\u5f00\u53d1\uff08\u6296\u97f3\uff09\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u5b89\u5353\u4e00\u9762\u4e8c\u9762\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u4fe9\u5c0f\u65f6\u9762\u8bd5\u611f\u60f3_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8\u9762\u8bd5\u96be\u5417\uff0c\u5e94\u8be5\u5982\u4f55\u5e94\u5bf9\uff1f \u5b57\u8282\u8df3\u52a8-\u4e09\u9762\u7ecf-\u987a\u4fbfoffer\u8bb8\u613f\uff3b\u5df2\u8fd8\u613f:\u6536\u5230\u610f\u5411\u4e66\uff3d_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8\uff0cAndroid\u5f00\u53d1\u63d0\u524d\u6279\uff0c\u65b0\u9c9c\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 [21\u5c4a\u79cb\u62db] \u5b57\u8282--\u5b89\u5353\u5f00\u53d1\u5b9e\u4e60\u751f \u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u63d0\u524d\u6279\u6821\u62db\u4e00\u9762Android\u5de5\u7a0b\u5e082020[\u5df2\u6302] \u5b57\u8282\u8df3\u52a8\u5ba2\u6237\u7aef\u9762\u7ecf\uff08\u5df2Offer\uff09_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 [21\u5c4a\u79cb\u62db] \u5b57\u8282--\u5b89\u5353\u5f00\u53d1\u5b9e\u4e60\u751f \u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8\u5ba2\u6237\u7aef\u5f00\u53d1\u4e00\u9762_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8 \u4e09\u6b21\u5931\u8d25\u7684\u4e00\u9762_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u5317\u4eac\u6296\u97f3\u5ba2\u6237\u7aef\u4e00\u9762\u4e8c\u9762\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8-\u5934\u6761Android\u5f00\u53d1\u5b9e\u4e60\u751f\u9762\u8bd5_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8Android\u5c97\u793e\u62db\u9762\u7b4b \u83dc\u9e21\u5b57\u8282\u79cb\u62db\u9762\u7b4b\uff08\u518d\u53d1\u4e00\u6b21\uff09 \u5b57\u8282\u5ba2\u6237\u7aef \u4e00\u3001\u4e8c\u9762\u9762\u7ecf\uff0c\u8bb8\u613f\u4e09\u9762~ \u5b57\u8282\u5ba2\u6237\u7aef\u4e09~\u56db\u9762\u9762\u7ecf\uff0c\u5df2oc\uff08\u66f4\u65b0\uff1a\u5df2\u90ae\u4ef6\uff09 \u9762\u8bd5\u9898 \u00b6 Android\u9762\u8bd5\u5b9d\u5178 \u8fd9\u4e2a\u7ad9\u5b50\u6709\u70b9\u4e1c\u897f","title":"README"},{"location":"%E9%9D%A2%E7%BB%8F/#readme","text":"\u5168\u662f\u4ece\u725b\u5ba2\u7f51\u6252\u62c9\u4e0b\u6765\u7684\uff0c\u53ef\u80fd\u5b58\u5728\u94fe\u63a5\u5931\u6548\u7684\u60c5\u51b5\uff0c\u4f1a\u5b9a\u671f\u6e05\u7406\u3002 \u6bcf\u4e2a\u9762\u7ecf\u90fd\u8981\u81ea\u5df1\u8fc7\u4e00\u904d\uff0c\u4e0d\u8981\u770b\u4e00\u904d\u8111\u5185\u8fc7\u4e00\u4e0b\u5c31\u7ed3\u675f\u4e86\uff0c \u6bcf\u4e2a\u9898\u76ee\u5355\u72ec\u62ce\u51fa\u6765\u505a\u6210\u4e00\u4e2a\u95ee\u5377 \u7136\u540e\u81ea\u5df1\u6253\u5b57\u56de\u7b54\u4e00\u4e0b\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u67e5\u6f0f\u8865\u7f3a\u3002 \u5b89\u5353\u5de5\u7a0b\u5e08\u7cbe\u9009\u9762\u7ecf\u6c47\u603b \u5b57\u8282\u8df3\u52a8\u9762\u7ecf\u6c47\u603b \u5b57\u8282\u5b89\u5353\u9762\u7ecf\u6c47\u603b","title":"README"},{"location":"%E9%9D%A2%E7%BB%8F/#android","text":"","title":"Android\u9762\u7ecf\u6536\u96c6"},{"location":"%E9%9D%A2%E7%BB%8F/#part","text":"\u5b57\u8282\u63d0\u524d\u6279\u6821\u62db\u4e00\u9762Android\u5de5\u7a0b\u5e082020[\u5df2\u6302] \u79fb\u52a8\u5ba2\u6237\u7aef\u5f00\u53d1\uff08\u6296\u97f3\uff09\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u5b89\u5353\u4e00\u9762\u4e8c\u9762\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u4fe9\u5c0f\u65f6\u9762\u8bd5\u611f\u60f3_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8\u9762\u8bd5\u96be\u5417\uff0c\u5e94\u8be5\u5982\u4f55\u5e94\u5bf9\uff1f \u5b57\u8282\u8df3\u52a8-\u4e09\u9762\u7ecf-\u987a\u4fbfoffer\u8bb8\u613f\uff3b\u5df2\u8fd8\u613f:\u6536\u5230\u610f\u5411\u4e66\uff3d_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8\uff0cAndroid\u5f00\u53d1\u63d0\u524d\u6279\uff0c\u65b0\u9c9c\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 [21\u5c4a\u79cb\u62db] \u5b57\u8282--\u5b89\u5353\u5f00\u53d1\u5b9e\u4e60\u751f \u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u63d0\u524d\u6279\u6821\u62db\u4e00\u9762Android\u5de5\u7a0b\u5e082020[\u5df2\u6302] \u5b57\u8282\u8df3\u52a8\u5ba2\u6237\u7aef\u9762\u7ecf\uff08\u5df2Offer\uff09_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 [21\u5c4a\u79cb\u62db] \u5b57\u8282--\u5b89\u5353\u5f00\u53d1\u5b9e\u4e60\u751f \u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8\u5ba2\u6237\u7aef\u5f00\u53d1\u4e00\u9762_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8 \u4e09\u6b21\u5931\u8d25\u7684\u4e00\u9762_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u5317\u4eac\u6296\u97f3\u5ba2\u6237\u7aef\u4e00\u9762\u4e8c\u9762\u9762\u7ecf_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8-\u5934\u6761Android\u5f00\u53d1\u5b9e\u4e60\u751f\u9762\u8bd5_\u7b14\u7ecf\u9762\u7ecf_\u725b\u5ba2\u7f51 \u5b57\u8282\u8df3\u52a8Android\u5c97\u793e\u62db\u9762\u7b4b \u83dc\u9e21\u5b57\u8282\u79cb\u62db\u9762\u7b4b\uff08\u518d\u53d1\u4e00\u6b21\uff09 \u5b57\u8282\u5ba2\u6237\u7aef \u4e00\u3001\u4e8c\u9762\u9762\u7ecf\uff0c\u8bb8\u613f\u4e09\u9762~ \u5b57\u8282\u5ba2\u6237\u7aef\u4e09~\u56db\u9762\u9762\u7ecf\uff0c\u5df2oc\uff08\u66f4\u65b0\uff1a\u5df2\u90ae\u4ef6\uff09","title":"\u5b57\u8282\u8df3\u52a8part"},{"location":"%E9%9D%A2%E7%BB%8F/#_1","text":"Android\u9762\u8bd5\u5b9d\u5178 \u8fd9\u4e2a\u7ad9\u5b50\u6709\u70b9\u4e1c\u897f","title":"\u9762\u8bd5\u9898"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/","text":"\u6e90\u9762\u7ecf \u00b6 \u5b57\u8282\u8df3\u52a8\uff0cAndroid\u5f00\u53d1\u63d0\u524d\u6279\uff0c\u65b0\u9c9c\u9762\u7ecf - \u4f20\u5947\u7684\u5c0f\u8c61 \u9762\u8bd5\u9898\u76ee \u00b6 Q1 \u95ee\u7b80\u5386 \u00b6 \u6309\u7167\u7b80\u5386\u4ecb\u7ecd\u7684\u9879\u76ee\uff0c\u8be2\u95ee\u4e4b\u524d\u505a\u8fc7\u7684\u4e1c\u897f\uff08\u534a\u4e2a\u5c0f\u65f6\u5de6\u53f3\uff09 \u7b80\u5386\u95ee\u7b54\u90e8\u5206\u9760\u81ea\u5df1\u89c1\u62db\u62c6\u62db\u2220( \u141b \u300d\u2220)_\uff0c\u6709\u4e00\u70b9\u662f\u5343\u4e07\u522b\u8bf4\u81ea\u5df1 \u7cbe\u901a \u4ec0\u4e48\u4e1c\u897f\uff0c\u81ea\u6398\u575f\u5893\u554a\u5144\u5f1f\u3002 Q2 Android - SurfaceView \u00b6 Surfaceview\u6709\u7528\u8fc7\u4e48\uff1f\u8bf7\u4ecb\u7ecd\u4e00\u4e0b\uff0c\uff08\u7528\u8fc7\u4f46\u4e0d\u77e5\u9053\u539f\u7406\uff09\u90a3textureview\u5462\uff1f\u4ecb\u7ecd\u4e00\u4e0b\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_ Q3 Android - Activity \u00b6 Activity\u7684\u751f\u547d\u5468\u671f\uff1f Android-\u4e86\u89e3 Activity \u751f\u547d\u5468\u671f \u4e3a\u4e86\u5728 Activity \u751f\u547d\u5468\u671f\u7684\u5404\u4e2a\u9636\u6bb5\u4e4b\u95f4\u5bfc\u822a\u8f6c\u6362\uff0cActivity \u7c7b\u63d0\u4f9b\u516d\u4e2a\u6838\u5fc3\u56de\u8c03\uff1a onCreate() \u3001 onStart() \u3001 onResume() \u3001 onPause() \u3001 onStop() \u548c onDestroy() \u3002\u5f53 Activity \u8fdb\u5165\u65b0\u72b6\u6001\u65f6\uff0c\u7cfb\u7edf\u4f1a\u8c03\u7528\u5176\u4e2d\u6bcf\u4e2a\u56de\u8c03\u3002 onCreate() \uff1a\u60a8\u5fc5\u987b\u5b9e\u73b0\u6b64\u56de\u8c03\uff0c\u5b83\u4f1a\u5728\u7cfb\u7edf\u9996\u6b21\u521b\u5efa Activity \u65f6\u89e6\u53d1\u3002Activity \u4f1a\u5728\u521b\u5efa\u540e\u8fdb\u5165\u201c\u5df2\u521b\u5efa\u201d\u72b6\u6001\u3002\u5728 onCreate() \u65b9\u6cd5\u4e2d\uff0c\u60a8\u9700\u6267\u884c\u57fa\u672c\u5e94\u7528\u542f\u52a8\u903b\u8f91\uff0c\u8be5\u903b\u8f91\u5728 Activity \u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\u53ea\u5e94\u53d1\u751f\u4e00\u6b21\u3002\u4f8b\u5982\uff0c onCreate() \u7684\u5b9e\u73b0\u53ef\u80fd\u4f1a\u5c06\u6570\u636e\u7ed1\u5b9a\u5230\u5217\u8868\uff0c\u5c06 Activity \u4e0e ViewModel \u76f8\u5173\u8054\uff0c\u5e76\u5b9e\u4f8b\u5316\u67d0\u4e9b\u7c7b\u4f5c\u7528\u57df\u53d8\u91cf\u3002 onCreate() \u65b9\u6cd5\u5b8c\u6210\u6267\u884c\u540e\uff0cActivity \u8fdb\u5165\u201c\u5df2\u5f00\u59cb\u201d\u72b6\u6001\uff0c\u7cfb\u7edf\u4f1a\u76f8\u7ee7\u8c03\u7528 onStart() \u548c onResume() \u65b9\u6cd5\u3002 onStart() \uff1a\u5f53 Activity \u8fdb\u5165\u201c\u5df2\u5f00\u59cb\u201d\u72b6\u6001\u65f6\uff0c\u7cfb\u7edf\u4f1a\u8c03\u7528\u6b64\u56de\u8c03\u3002 onStart() \u8c03\u7528\u4f7f Activity \u5bf9\u7528\u6237\u53ef\u89c1\uff0c\u56e0\u4e3a\u5e94\u7528\u4f1a\u4e3a Activity \u8fdb\u5165\u524d\u53f0\u5e76\u652f\u6301\u4e92\u52a8\u505a\u51c6\u5907\u3002 onStart() \u65b9\u6cd5\u4f1a\u975e\u5e38\u5feb\u901f\u5730\u5b8c\u6210\uff0c\u5e76\u4e14\u4e0e\u201c\u5df2\u521b\u5efa\u201d\u72b6\u6001\u4e00\u6837\uff0cActivity \u4e0d\u4f1a\u4e00\u76f4\u5904\u4e8e\u201c\u5df2\u5f00\u59cb\u201d\u72b6\u6001\u3002\u4e00\u65e6\u6b64\u56de\u8c03\u7ed3\u675f\uff0cActivity \u4fbf\u4f1a\u8fdb\u5165\u201c\u5df2\u6062\u590d\u201d\u72b6\u6001\uff0c\u7cfb\u7edf\u5c06\u8c03\u7528 onResume() \u65b9\u6cd5\u3002 onResume() \uff1aActivity \u4f1a\u5728\u8fdb\u5165\u201c\u5df2\u6062\u590d\u201d\u72b6\u6001\u65f6\u6765\u5230\u524d\u53f0\uff0c\u7136\u540e\u7cfb\u7edf\u8c03\u7528 onResume() \u56de\u8c03\u3002\u8fd9\u662f\u5e94\u7528\u4e0e\u7528\u6237\u4e92\u52a8\u7684\u72b6\u6001\u3002\u5e94\u7528\u4f1a\u4e00\u76f4\u4fdd\u6301\u8fd9\u79cd\u72b6\u6001\uff0c\u76f4\u5230\u67d0\u4e9b\u4e8b\u4ef6\u53d1\u751f\uff0c\u8ba9\u7126\u70b9\u8fdc\u79bb\u5e94\u7528\u3002\u6b64\u7c7b\u4e8b\u4ef6\u5305\u62ec\u63a5\u5230\u6765\u7535\u3001\u7528\u6237\u5bfc\u822a\u5230\u53e6\u4e00\u4e2a Activity\uff0c\u6216\u8bbe\u5907\u5c4f\u5e55\u5173\u95ed\u3002\u5f53\u53d1\u751f\u4e2d\u65ad\u4e8b\u4ef6\u65f6\uff0cActivity \u8fdb\u5165\u201c\u5df2\u6682\u505c\u201d\u72b6\u6001\uff0c\u7cfb\u7edf\u8c03\u7528 onPause() \u56de\u8c03\u3002\u5982\u679c Activity \u4ece\u201c\u5df2\u6682\u505c\u201d\u72b6\u6001\u8fd4\u56de\u201c\u5df2\u6062\u590d\u201d\u72b6\u6001\uff0c\u7cfb\u7edf\u5c06\u518d\u6b21\u8c03\u7528 onResume() \u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u60a8\u5e94\u5b9e\u73b0 onResume() \uff0c\u4ee5\u521d\u59cb\u5316\u5728 onPause() \u671f\u95f4\u91ca\u653e\u7684\u7ec4\u4ef6\uff0c\u5e76\u6267\u884c\u6bcf\u6b21 Activity \u8fdb\u5165\u201c\u5df2\u6062\u590d\u201d\u72b6\u6001\u65f6\u5fc5\u987b\u5b8c\u6210\u7684\u4efb\u4f55\u5176\u4ed6\u521d\u59cb\u5316\u64cd\u4f5c\u3002 onPause() \uff1a\u7edf\u5c06\u6b64\u65b9\u6cd5\u89c6\u4e3a\u7528\u6237\u5c06\u8981\u79bb\u5f00\u60a8\u7684 Activity \u7684\u7b2c\u4e00\u4e2a\u6807\u5fd7\uff08\u5c3d\u7ba1\u8fd9\u5e76\u4e0d\u603b\u662f\u610f\u5473\u7740 Activity \u4f1a\u88ab\u9500\u6bc1\uff09\uff1b\u6b64\u65b9\u6cd5\u8868\u793a Activity \u4e0d\u518d\u4f4d\u4e8e\u524d\u53f0\uff08\u5c3d\u7ba1\u5728\u7528\u6237\u5904\u4e8e\u591a\u7a97\u53e3\u6a21\u5f0f\u65f6 Activity \u4ecd\u7136\u53ef\u89c1\uff09\u3002\u4f7f\u7528 onPause() \u65b9\u6cd5\u6682\u505c\u6216\u8c03\u6574\u5f53 Activity \u5904\u4e8e\u201c\u5df2\u6682\u505c\u201d\u72b6\u6001\u65f6\u4e0d\u5e94\u7ee7\u7eed\uff08\u6216\u5e94\u6709\u8282\u5236\u5730\u7ee7\u7eed\uff09\u7684\u64cd\u4f5c\uff0c\u4ee5\u53ca\u60a8\u5e0c\u671b\u5f88\u5feb\u6062\u590d\u7684\u64cd\u4f5c\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 onPause() \u65b9\u6cd5\u91ca\u653e\u7cfb\u7edf\u8d44\u6e90\u3001\u4f20\u611f\u5668\uff08\u4f8b\u5982 GPS\uff09\u624b\u67c4\uff0c\u6216\u5f53\u60a8\u7684 Activity \u6682\u505c\u4e14\u7528\u6237\u4e0d\u9700\u8981\u5b83\u4eec\u65f6\u4ecd\u7136\u53ef\u80fd\u5f71\u54cd\u7535\u6c60\u7eed\u822a\u65f6\u95f4\u7684\u4efb\u4f55\u8d44\u6e90\u3002 onPause() \u65b9\u6cd5\u7684\u5b8c\u6210\u5e76\u4e0d\u610f\u5473\u7740 Activity \u79bb\u5f00\u201c\u5df2\u6682\u505c\u201d\u72b6\u6001\u3002\u76f8\u53cd\uff0cActivity \u4f1a\u4fdd\u6301\u6b64\u72b6\u6001\uff0c\u76f4\u5230\u5176\u6062\u590d\u6216\u53d8\u6210\u5bf9\u7528\u6237\u5b8c\u5168\u4e0d\u53ef\u89c1\u3002\u5982\u679c Activity \u6062\u590d\uff0c\u7cfb\u7edf\u5c06\u518d\u6b21\u8c03\u7528 onResume() \u56de\u8c03\u3002\u5982\u679c Activity \u53d8\u4e3a\u5b8c\u5168\u4e0d\u53ef\u89c1\uff0c\u7cfb\u7edf\u4f1a\u8c03\u7528 onStop() \u3002 onStop() \uff1a\u5982\u679c\u60a8\u7684 Activity \u4e0d\u518d\u5bf9\u7528\u6237\u53ef\u89c1\uff0c\u8bf4\u660e\u5176\u5df2\u8fdb\u5165\u201c\u5df2\u505c\u6b62\u201d\u72b6\u6001\uff0c\u56e0\u6b64\u7cfb\u7edf\u5c06\u8c03\u7528 onStop() \u56de\u8c03\u3002\u5728 onStop() \u65b9\u6cd5\u4e2d\uff0c\u5e94\u7528\u5e94\u91ca\u653e\u6216\u8c03\u6574\u5728\u5e94\u7528\u5bf9\u7528\u6237\u4e0d\u53ef\u89c1\u65f6\u7684\u65e0\u7528\u8d44\u6e90\u3002\u60a8\u8fd8\u5e94\u4f7f\u7528 onStop() \u6267\u884c CPU \u76f8\u5bf9\u5bc6\u96c6\u7684\u5173\u95ed\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u65e0\u6cd5\u627e\u5230\u66f4\u5408\u9002\u7684\u65f6\u673a\u6765\u5c06\u4fe1\u606f\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff0c\u53ef\u4ee5\u5728 onStop() \u671f\u95f4\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u5f53\u60a8\u7684 Activity \u8fdb\u5165\u201c\u5df2\u505c\u6b62\u201d\u72b6\u6001\u65f6\uff0c Activity \u5bf9\u8c61\u4f1a\u7ee7\u7eed\u9a7b\u7559\u5728\u5185\u5b58\u4e2d\uff1a\u8be5\u5bf9\u8c61\u5c06\u7ef4\u62a4\u6240\u6709\u72b6\u6001\u548c\u6210\u5458\u4fe1\u606f\uff0c\u4f46\u4e0d\u4f1a\u9644\u52a0\u5230\u7a97\u53e3\u7ba1\u7406\u5668\u3002Activity \u6062\u590d\u540e\uff0cActivity \u4f1a\u91cd\u65b0\u8c03\u7528\u8fd9\u4e9b\u4fe1\u606f\u3002 onDestroy() \uff1a\u9500\u6bc1 Ativity \u4e4b\u524d\uff0c\u7cfb\u7edf\u4f1a\u5148\u8c03\u7528 onDestroy() \u3002\u5982\u679c Activity \u5373\u5c06\u7ed3\u675f\uff0conDestroy() \u662f Activity \u6536\u5230\u7684\u6700\u540e\u4e00\u4e2a\u751f\u547d\u5468\u671f\u56de\u8c03\u3002 onDestroy() \u56de\u8c03\u5e94\u91ca\u653e\u5148\u524d\u7684\u56de\u8c03\uff08\u4f8b\u5982 onStop() \uff09\u5c1a\u672a\u91ca\u653e\u7684\u6240\u6709\u8d44\u6e90\u3002 \u7a0d\u5fae\u7b80\u6d01\u4e00\u70b9\u7684\u63cf\u8ff0\u53ef\u4ee5\u89c1\u300a\u7b2c\u4e00\u884c\u4ee3\u7801\u300b\u4e2d\u300c\u6d3b\u52a8\u7684\u751f\u547d\u5468\u671f\u300d\u4e00\u8282\uff1a Q4 Java - \u7ebf\u7a0b \u00b6 \u7ebf\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u65b9\u5f0f\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_ Q5 Android - \u5185\u5b58 \u00b6 \u5185\u5b58\u6cc4\u6f0f\u7684\u5904\u7406\u65b9\u5f0f\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_ Q6 \u5f15\u7528 \u00b6 \u8f6f\u5f15\u7528\u548c\u5f31\u5f15\u7528\u7684\u533a\u522b\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_ Q7 Android - \u7f51\u7edc\u4f18\u5316 \u00b6 \u662f\u5426\u4e86\u89e3Android\u7f51\u7edc\u4f18\u5316\u65b9\u5f0f\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_ Q8 \u8ba1\u7b97\u673a\u7f51\u7edc - \u534f\u8bae \u00b6 \u662f\u5426\u542c\u8bf4\u8fc7HTTP2.0\uff0c\u4ecb\u7ecd\u4e00\u4e0b \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_ Q9 \u8ba1\u7b97\u673a\u7f51\u7edc - \u534f\u8bae \u00b6 \u662f\u5426\u542c\u8bf4\u8fc7QUIC\u534f\u8bae\uff1f QUIC - \u767e\u5ea6\u767e\u79d1 QUIC\uff08Quick UDP Internet Connection\uff09\u662f\u8c37\u6b4c\u5236\u5b9a\u7684\u4e00\u79cd\u57fa\u4e8eUDP\u7684\u4f4e\u65f6\u5ef6\u7684\u4e92\u8054\u7f51\u4f20\u8f93\u5c42\u534f\u8bae\u3002\u57282016\u5e7411\u6708\u56fd\u9645\u4e92\u8054\u7f51\u5de5\u7a0b\u4efb\u52a1\u7ec4(IETF)\u53ec\u5f00\u4e86\u7b2c\u4e00\u6b21QUIC\u5de5\u4f5c\u7ec4\u4f1a\u8bae\uff0c\u53d7\u5230\u4e86\u4e1a\u754c\u7684\u5e7f\u6cdb\u5173\u6ce8\u3002\u8fd9\u4e5f\u610f\u5473\u7740QUIC\u5f00\u59cb\u4e86\u5b83\u7684\u6807\u51c6\u5316\u8fc7\u7a0b\uff0c\u6210\u4e3a\u65b0\u4e00\u4ee3\u4f20\u8f93\u5c42\u534f\u8bae\u3002QUIC\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u5f53\u4eca\u4f20\u8f93\u5c42\u548c\u5e94\u7528\u5c42\u9762\u4e34\u7684\u5404\u79cd\u9700\u6c42\uff0c\u5305\u62ec\u5904\u7406\u66f4\u591a\u7684\u8fde\u63a5\uff0c\u5b89\u5168\u6027\uff0c\u548c\u4f4e\u5ef6\u8fdf\u3002QUIC\u878d\u5408\u4e86\u5305\u62ecTCP\uff0cTLS\uff0cHTTP/2\u7b49\u534f\u8bae\u7684\u7279\u6027\uff0c\u4f46\u57fa\u4e8eUDP\u4f20\u8f93\u3002QUIC\u7684\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\u5c31\u662f\u51cf\u5c11\u8fde\u63a5\u5ef6\u8fdf\uff0c\u5f53\u5ba2\u6237\u7aef\u7b2c\u4e00\u6b21\u8fde\u63a5\u670d\u52a1\u5668\u65f6\uff0cQUIC\u53ea\u9700\u89811RTT\uff08Round-Trip Time\uff09\u7684\u5ef6\u8fdf\u5c31\u53ef\u4ee5\u5efa\u7acb\u53ef\u9760\u5b89\u5168\u7684\u8fde\u63a5,\u76f8\u5bf9\u4e8eTCP+TLS\u76841-3\u6b21RTT\u8981\u66f4\u52a0\u5feb\u6377\u3002\u4e4b\u540e\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728\u672c\u5730\u7f13\u5b58\u52a0\u5bc6\u7684\u8ba4\u8bc1\u4fe1\u606f\uff0c\u5728\u518d\u6b21\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u65f6\u53ef\u4ee5\u5b9e\u73b00-RTT\u7684\u8fde\u63a5\u5efa\u7acb\u5ef6\u8fdf\u3002 QUIC\u540c\u65f6\u590d\u7528\u4e86HTTP/2\u534f\u8bae\u7684\u591a\u8def\u590d\u7528\u529f\u80fd\uff08Multiplexing\uff09\uff0c\u4f46\u7531\u4e8eQUIC\u57fa\u4e8eUDP\u6240\u4ee5\u907f\u514d\u4e86HTTP/2\u7684\u7ebf\u5934\u963b\u585e\uff08Head-of-Line Blocking\uff09\u95ee\u9898\u3002\u56e0\u4e3aQUIC\u57fa\u4e8eUDP\uff0c\u8fd0\u884c\u5728\u7528\u6237\u57df\u800c\u4e0d\u662f\u7cfb\u7edf\u5185\u6838\uff0c\u4f7f\u5f97QUIC\u534f\u8bae\u53ef\u4ee5\u5feb\u901f\u7684\u66f4\u65b0\u548c\u90e8\u7f72\uff0c\u4ece\u800c\u5f88\u597d\u5730\u89e3\u51b3\u4e86TCP\u534f\u8bae\u90e8\u7f72\u53ca\u66f4\u65b0\u7684\u56f0\u96be\u3002 Q10 \u8ba1\u7b97\u673a\u7f51\u7edc - \u534f\u8bae \u00b6 TCP\u4e09\u6b21\u63e1\u624b\u56db\u6b21\u6325\u624b \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_ Q11 Java - \u6cdb\u578b \u00b6 Java\u6cdb\u578b\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff0c\u539f\u7406\u8bb2\u4e00\u4e0b\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_ Q12 Java - \u7ebf\u7a0b\u6c60 \u00b6 Java\u7ebf\u7a0b\u6c60\u4ecb\u7ecd \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_ Q13 C++ \u00b6 C++\u662f\u600e\u4e48\u53bb\u8c03\u7528C\u8bed\u8a00\u4ee3\u7801\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_ Q14 C++ \u00b6 C/C++\u7f16\u8bd1\u540e\u7684\u7ed3\u679c\u6709\u5565\u4e0d\u540c \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_ Q15 \u7b97\u6cd5 - \u9012\u5f52 \u00b6 \u751f\u5154\u5b50\u7684\u95ee\u9898\uff0c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002\u4f60\u4e3a\u4ec0\u4e48\u89c9\u5f97\u8fd9\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1f\u95ee\u80fd\u4e0d\u80fd\u7528\u516c\u5f0f\u63a8\u5bfc\u4e00\u4e0b\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Interview 1"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#_1","text":"\u5b57\u8282\u8df3\u52a8\uff0cAndroid\u5f00\u53d1\u63d0\u524d\u6279\uff0c\u65b0\u9c9c\u9762\u7ecf - \u4f20\u5947\u7684\u5c0f\u8c61","title":"\u6e90\u9762\u7ecf"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#_2","text":"","title":"\u9762\u8bd5\u9898\u76ee"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q1","text":"\u6309\u7167\u7b80\u5386\u4ecb\u7ecd\u7684\u9879\u76ee\uff0c\u8be2\u95ee\u4e4b\u524d\u505a\u8fc7\u7684\u4e1c\u897f\uff08\u534a\u4e2a\u5c0f\u65f6\u5de6\u53f3\uff09 \u7b80\u5386\u95ee\u7b54\u90e8\u5206\u9760\u81ea\u5df1\u89c1\u62db\u62c6\u62db\u2220( \u141b \u300d\u2220)_\uff0c\u6709\u4e00\u70b9\u662f\u5343\u4e07\u522b\u8bf4\u81ea\u5df1 \u7cbe\u901a \u4ec0\u4e48\u4e1c\u897f\uff0c\u81ea\u6398\u575f\u5893\u554a\u5144\u5f1f\u3002","title":"Q1 \u95ee\u7b80\u5386"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q2-android-surfaceview","text":"Surfaceview\u6709\u7528\u8fc7\u4e48\uff1f\u8bf7\u4ecb\u7ecd\u4e00\u4e0b\uff0c\uff08\u7528\u8fc7\u4f46\u4e0d\u77e5\u9053\u539f\u7406\uff09\u90a3textureview\u5462\uff1f\u4ecb\u7ecd\u4e00\u4e0b\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q2 Android - SurfaceView"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q3-android-activity","text":"Activity\u7684\u751f\u547d\u5468\u671f\uff1f Android-\u4e86\u89e3 Activity \u751f\u547d\u5468\u671f \u4e3a\u4e86\u5728 Activity \u751f\u547d\u5468\u671f\u7684\u5404\u4e2a\u9636\u6bb5\u4e4b\u95f4\u5bfc\u822a\u8f6c\u6362\uff0cActivity \u7c7b\u63d0\u4f9b\u516d\u4e2a\u6838\u5fc3\u56de\u8c03\uff1a onCreate() \u3001 onStart() \u3001 onResume() \u3001 onPause() \u3001 onStop() \u548c onDestroy() \u3002\u5f53 Activity \u8fdb\u5165\u65b0\u72b6\u6001\u65f6\uff0c\u7cfb\u7edf\u4f1a\u8c03\u7528\u5176\u4e2d\u6bcf\u4e2a\u56de\u8c03\u3002 onCreate() \uff1a\u60a8\u5fc5\u987b\u5b9e\u73b0\u6b64\u56de\u8c03\uff0c\u5b83\u4f1a\u5728\u7cfb\u7edf\u9996\u6b21\u521b\u5efa Activity \u65f6\u89e6\u53d1\u3002Activity \u4f1a\u5728\u521b\u5efa\u540e\u8fdb\u5165\u201c\u5df2\u521b\u5efa\u201d\u72b6\u6001\u3002\u5728 onCreate() \u65b9\u6cd5\u4e2d\uff0c\u60a8\u9700\u6267\u884c\u57fa\u672c\u5e94\u7528\u542f\u52a8\u903b\u8f91\uff0c\u8be5\u903b\u8f91\u5728 Activity \u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\u53ea\u5e94\u53d1\u751f\u4e00\u6b21\u3002\u4f8b\u5982\uff0c onCreate() \u7684\u5b9e\u73b0\u53ef\u80fd\u4f1a\u5c06\u6570\u636e\u7ed1\u5b9a\u5230\u5217\u8868\uff0c\u5c06 Activity \u4e0e ViewModel \u76f8\u5173\u8054\uff0c\u5e76\u5b9e\u4f8b\u5316\u67d0\u4e9b\u7c7b\u4f5c\u7528\u57df\u53d8\u91cf\u3002 onCreate() \u65b9\u6cd5\u5b8c\u6210\u6267\u884c\u540e\uff0cActivity \u8fdb\u5165\u201c\u5df2\u5f00\u59cb\u201d\u72b6\u6001\uff0c\u7cfb\u7edf\u4f1a\u76f8\u7ee7\u8c03\u7528 onStart() \u548c onResume() \u65b9\u6cd5\u3002 onStart() \uff1a\u5f53 Activity \u8fdb\u5165\u201c\u5df2\u5f00\u59cb\u201d\u72b6\u6001\u65f6\uff0c\u7cfb\u7edf\u4f1a\u8c03\u7528\u6b64\u56de\u8c03\u3002 onStart() \u8c03\u7528\u4f7f Activity \u5bf9\u7528\u6237\u53ef\u89c1\uff0c\u56e0\u4e3a\u5e94\u7528\u4f1a\u4e3a Activity \u8fdb\u5165\u524d\u53f0\u5e76\u652f\u6301\u4e92\u52a8\u505a\u51c6\u5907\u3002 onStart() \u65b9\u6cd5\u4f1a\u975e\u5e38\u5feb\u901f\u5730\u5b8c\u6210\uff0c\u5e76\u4e14\u4e0e\u201c\u5df2\u521b\u5efa\u201d\u72b6\u6001\u4e00\u6837\uff0cActivity \u4e0d\u4f1a\u4e00\u76f4\u5904\u4e8e\u201c\u5df2\u5f00\u59cb\u201d\u72b6\u6001\u3002\u4e00\u65e6\u6b64\u56de\u8c03\u7ed3\u675f\uff0cActivity \u4fbf\u4f1a\u8fdb\u5165\u201c\u5df2\u6062\u590d\u201d\u72b6\u6001\uff0c\u7cfb\u7edf\u5c06\u8c03\u7528 onResume() \u65b9\u6cd5\u3002 onResume() \uff1aActivity \u4f1a\u5728\u8fdb\u5165\u201c\u5df2\u6062\u590d\u201d\u72b6\u6001\u65f6\u6765\u5230\u524d\u53f0\uff0c\u7136\u540e\u7cfb\u7edf\u8c03\u7528 onResume() \u56de\u8c03\u3002\u8fd9\u662f\u5e94\u7528\u4e0e\u7528\u6237\u4e92\u52a8\u7684\u72b6\u6001\u3002\u5e94\u7528\u4f1a\u4e00\u76f4\u4fdd\u6301\u8fd9\u79cd\u72b6\u6001\uff0c\u76f4\u5230\u67d0\u4e9b\u4e8b\u4ef6\u53d1\u751f\uff0c\u8ba9\u7126\u70b9\u8fdc\u79bb\u5e94\u7528\u3002\u6b64\u7c7b\u4e8b\u4ef6\u5305\u62ec\u63a5\u5230\u6765\u7535\u3001\u7528\u6237\u5bfc\u822a\u5230\u53e6\u4e00\u4e2a Activity\uff0c\u6216\u8bbe\u5907\u5c4f\u5e55\u5173\u95ed\u3002\u5f53\u53d1\u751f\u4e2d\u65ad\u4e8b\u4ef6\u65f6\uff0cActivity \u8fdb\u5165\u201c\u5df2\u6682\u505c\u201d\u72b6\u6001\uff0c\u7cfb\u7edf\u8c03\u7528 onPause() \u56de\u8c03\u3002\u5982\u679c Activity \u4ece\u201c\u5df2\u6682\u505c\u201d\u72b6\u6001\u8fd4\u56de\u201c\u5df2\u6062\u590d\u201d\u72b6\u6001\uff0c\u7cfb\u7edf\u5c06\u518d\u6b21\u8c03\u7528 onResume() \u65b9\u6cd5\u3002\u56e0\u6b64\uff0c\u60a8\u5e94\u5b9e\u73b0 onResume() \uff0c\u4ee5\u521d\u59cb\u5316\u5728 onPause() \u671f\u95f4\u91ca\u653e\u7684\u7ec4\u4ef6\uff0c\u5e76\u6267\u884c\u6bcf\u6b21 Activity \u8fdb\u5165\u201c\u5df2\u6062\u590d\u201d\u72b6\u6001\u65f6\u5fc5\u987b\u5b8c\u6210\u7684\u4efb\u4f55\u5176\u4ed6\u521d\u59cb\u5316\u64cd\u4f5c\u3002 onPause() \uff1a\u7edf\u5c06\u6b64\u65b9\u6cd5\u89c6\u4e3a\u7528\u6237\u5c06\u8981\u79bb\u5f00\u60a8\u7684 Activity \u7684\u7b2c\u4e00\u4e2a\u6807\u5fd7\uff08\u5c3d\u7ba1\u8fd9\u5e76\u4e0d\u603b\u662f\u610f\u5473\u7740 Activity \u4f1a\u88ab\u9500\u6bc1\uff09\uff1b\u6b64\u65b9\u6cd5\u8868\u793a Activity \u4e0d\u518d\u4f4d\u4e8e\u524d\u53f0\uff08\u5c3d\u7ba1\u5728\u7528\u6237\u5904\u4e8e\u591a\u7a97\u53e3\u6a21\u5f0f\u65f6 Activity \u4ecd\u7136\u53ef\u89c1\uff09\u3002\u4f7f\u7528 onPause() \u65b9\u6cd5\u6682\u505c\u6216\u8c03\u6574\u5f53 Activity \u5904\u4e8e\u201c\u5df2\u6682\u505c\u201d\u72b6\u6001\u65f6\u4e0d\u5e94\u7ee7\u7eed\uff08\u6216\u5e94\u6709\u8282\u5236\u5730\u7ee7\u7eed\uff09\u7684\u64cd\u4f5c\uff0c\u4ee5\u53ca\u60a8\u5e0c\u671b\u5f88\u5feb\u6062\u590d\u7684\u64cd\u4f5c\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 onPause() \u65b9\u6cd5\u91ca\u653e\u7cfb\u7edf\u8d44\u6e90\u3001\u4f20\u611f\u5668\uff08\u4f8b\u5982 GPS\uff09\u624b\u67c4\uff0c\u6216\u5f53\u60a8\u7684 Activity \u6682\u505c\u4e14\u7528\u6237\u4e0d\u9700\u8981\u5b83\u4eec\u65f6\u4ecd\u7136\u53ef\u80fd\u5f71\u54cd\u7535\u6c60\u7eed\u822a\u65f6\u95f4\u7684\u4efb\u4f55\u8d44\u6e90\u3002 onPause() \u65b9\u6cd5\u7684\u5b8c\u6210\u5e76\u4e0d\u610f\u5473\u7740 Activity \u79bb\u5f00\u201c\u5df2\u6682\u505c\u201d\u72b6\u6001\u3002\u76f8\u53cd\uff0cActivity \u4f1a\u4fdd\u6301\u6b64\u72b6\u6001\uff0c\u76f4\u5230\u5176\u6062\u590d\u6216\u53d8\u6210\u5bf9\u7528\u6237\u5b8c\u5168\u4e0d\u53ef\u89c1\u3002\u5982\u679c Activity \u6062\u590d\uff0c\u7cfb\u7edf\u5c06\u518d\u6b21\u8c03\u7528 onResume() \u56de\u8c03\u3002\u5982\u679c Activity \u53d8\u4e3a\u5b8c\u5168\u4e0d\u53ef\u89c1\uff0c\u7cfb\u7edf\u4f1a\u8c03\u7528 onStop() \u3002 onStop() \uff1a\u5982\u679c\u60a8\u7684 Activity \u4e0d\u518d\u5bf9\u7528\u6237\u53ef\u89c1\uff0c\u8bf4\u660e\u5176\u5df2\u8fdb\u5165\u201c\u5df2\u505c\u6b62\u201d\u72b6\u6001\uff0c\u56e0\u6b64\u7cfb\u7edf\u5c06\u8c03\u7528 onStop() \u56de\u8c03\u3002\u5728 onStop() \u65b9\u6cd5\u4e2d\uff0c\u5e94\u7528\u5e94\u91ca\u653e\u6216\u8c03\u6574\u5728\u5e94\u7528\u5bf9\u7528\u6237\u4e0d\u53ef\u89c1\u65f6\u7684\u65e0\u7528\u8d44\u6e90\u3002\u60a8\u8fd8\u5e94\u4f7f\u7528 onStop() \u6267\u884c CPU \u76f8\u5bf9\u5bc6\u96c6\u7684\u5173\u95ed\u64cd\u4f5c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u65e0\u6cd5\u627e\u5230\u66f4\u5408\u9002\u7684\u65f6\u673a\u6765\u5c06\u4fe1\u606f\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff0c\u53ef\u4ee5\u5728 onStop() \u671f\u95f4\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u5f53\u60a8\u7684 Activity \u8fdb\u5165\u201c\u5df2\u505c\u6b62\u201d\u72b6\u6001\u65f6\uff0c Activity \u5bf9\u8c61\u4f1a\u7ee7\u7eed\u9a7b\u7559\u5728\u5185\u5b58\u4e2d\uff1a\u8be5\u5bf9\u8c61\u5c06\u7ef4\u62a4\u6240\u6709\u72b6\u6001\u548c\u6210\u5458\u4fe1\u606f\uff0c\u4f46\u4e0d\u4f1a\u9644\u52a0\u5230\u7a97\u53e3\u7ba1\u7406\u5668\u3002Activity \u6062\u590d\u540e\uff0cActivity \u4f1a\u91cd\u65b0\u8c03\u7528\u8fd9\u4e9b\u4fe1\u606f\u3002 onDestroy() \uff1a\u9500\u6bc1 Ativity \u4e4b\u524d\uff0c\u7cfb\u7edf\u4f1a\u5148\u8c03\u7528 onDestroy() \u3002\u5982\u679c Activity \u5373\u5c06\u7ed3\u675f\uff0conDestroy() \u662f Activity \u6536\u5230\u7684\u6700\u540e\u4e00\u4e2a\u751f\u547d\u5468\u671f\u56de\u8c03\u3002 onDestroy() \u56de\u8c03\u5e94\u91ca\u653e\u5148\u524d\u7684\u56de\u8c03\uff08\u4f8b\u5982 onStop() \uff09\u5c1a\u672a\u91ca\u653e\u7684\u6240\u6709\u8d44\u6e90\u3002 \u7a0d\u5fae\u7b80\u6d01\u4e00\u70b9\u7684\u63cf\u8ff0\u53ef\u4ee5\u89c1\u300a\u7b2c\u4e00\u884c\u4ee3\u7801\u300b\u4e2d\u300c\u6d3b\u52a8\u7684\u751f\u547d\u5468\u671f\u300d\u4e00\u8282\uff1a","title":"Q3 Android - Activity"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q4-java-","text":"\u7ebf\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u65b9\u5f0f\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q4 Java - \u7ebf\u7a0b"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q5-android-","text":"\u5185\u5b58\u6cc4\u6f0f\u7684\u5904\u7406\u65b9\u5f0f\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q5 Android - \u5185\u5b58"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q6","text":"\u8f6f\u5f15\u7528\u548c\u5f31\u5f15\u7528\u7684\u533a\u522b\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q6 \u5f15\u7528"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q7-android-","text":"\u662f\u5426\u4e86\u89e3Android\u7f51\u7edc\u4f18\u5316\u65b9\u5f0f\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q7 Android - \u7f51\u7edc\u4f18\u5316"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q8-","text":"\u662f\u5426\u542c\u8bf4\u8fc7HTTP2.0\uff0c\u4ecb\u7ecd\u4e00\u4e0b \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q8 \u8ba1\u7b97\u673a\u7f51\u7edc - \u534f\u8bae"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q9-","text":"\u662f\u5426\u542c\u8bf4\u8fc7QUIC\u534f\u8bae\uff1f QUIC - \u767e\u5ea6\u767e\u79d1 QUIC\uff08Quick UDP Internet Connection\uff09\u662f\u8c37\u6b4c\u5236\u5b9a\u7684\u4e00\u79cd\u57fa\u4e8eUDP\u7684\u4f4e\u65f6\u5ef6\u7684\u4e92\u8054\u7f51\u4f20\u8f93\u5c42\u534f\u8bae\u3002\u57282016\u5e7411\u6708\u56fd\u9645\u4e92\u8054\u7f51\u5de5\u7a0b\u4efb\u52a1\u7ec4(IETF)\u53ec\u5f00\u4e86\u7b2c\u4e00\u6b21QUIC\u5de5\u4f5c\u7ec4\u4f1a\u8bae\uff0c\u53d7\u5230\u4e86\u4e1a\u754c\u7684\u5e7f\u6cdb\u5173\u6ce8\u3002\u8fd9\u4e5f\u610f\u5473\u7740QUIC\u5f00\u59cb\u4e86\u5b83\u7684\u6807\u51c6\u5316\u8fc7\u7a0b\uff0c\u6210\u4e3a\u65b0\u4e00\u4ee3\u4f20\u8f93\u5c42\u534f\u8bae\u3002QUIC\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u5f53\u4eca\u4f20\u8f93\u5c42\u548c\u5e94\u7528\u5c42\u9762\u4e34\u7684\u5404\u79cd\u9700\u6c42\uff0c\u5305\u62ec\u5904\u7406\u66f4\u591a\u7684\u8fde\u63a5\uff0c\u5b89\u5168\u6027\uff0c\u548c\u4f4e\u5ef6\u8fdf\u3002QUIC\u878d\u5408\u4e86\u5305\u62ecTCP\uff0cTLS\uff0cHTTP/2\u7b49\u534f\u8bae\u7684\u7279\u6027\uff0c\u4f46\u57fa\u4e8eUDP\u4f20\u8f93\u3002QUIC\u7684\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\u5c31\u662f\u51cf\u5c11\u8fde\u63a5\u5ef6\u8fdf\uff0c\u5f53\u5ba2\u6237\u7aef\u7b2c\u4e00\u6b21\u8fde\u63a5\u670d\u52a1\u5668\u65f6\uff0cQUIC\u53ea\u9700\u89811RTT\uff08Round-Trip Time\uff09\u7684\u5ef6\u8fdf\u5c31\u53ef\u4ee5\u5efa\u7acb\u53ef\u9760\u5b89\u5168\u7684\u8fde\u63a5,\u76f8\u5bf9\u4e8eTCP+TLS\u76841-3\u6b21RTT\u8981\u66f4\u52a0\u5feb\u6377\u3002\u4e4b\u540e\u5ba2\u6237\u7aef\u53ef\u4ee5\u5728\u672c\u5730\u7f13\u5b58\u52a0\u5bc6\u7684\u8ba4\u8bc1\u4fe1\u606f\uff0c\u5728\u518d\u6b21\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u65f6\u53ef\u4ee5\u5b9e\u73b00-RTT\u7684\u8fde\u63a5\u5efa\u7acb\u5ef6\u8fdf\u3002 QUIC\u540c\u65f6\u590d\u7528\u4e86HTTP/2\u534f\u8bae\u7684\u591a\u8def\u590d\u7528\u529f\u80fd\uff08Multiplexing\uff09\uff0c\u4f46\u7531\u4e8eQUIC\u57fa\u4e8eUDP\u6240\u4ee5\u907f\u514d\u4e86HTTP/2\u7684\u7ebf\u5934\u963b\u585e\uff08Head-of-Line Blocking\uff09\u95ee\u9898\u3002\u56e0\u4e3aQUIC\u57fa\u4e8eUDP\uff0c\u8fd0\u884c\u5728\u7528\u6237\u57df\u800c\u4e0d\u662f\u7cfb\u7edf\u5185\u6838\uff0c\u4f7f\u5f97QUIC\u534f\u8bae\u53ef\u4ee5\u5feb\u901f\u7684\u66f4\u65b0\u548c\u90e8\u7f72\uff0c\u4ece\u800c\u5f88\u597d\u5730\u89e3\u51b3\u4e86TCP\u534f\u8bae\u90e8\u7f72\u53ca\u66f4\u65b0\u7684\u56f0\u96be\u3002","title":"Q9 \u8ba1\u7b97\u673a\u7f51\u7edc - \u534f\u8bae"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q10-","text":"TCP\u4e09\u6b21\u63e1\u624b\u56db\u6b21\u6325\u624b \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q10 \u8ba1\u7b97\u673a\u7f51\u7edc - \u534f\u8bae"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q11-java-","text":"Java\u6cdb\u578b\u662f\u600e\u4e48\u5b9e\u73b0\u7684\uff0c\u539f\u7406\u8bb2\u4e00\u4e0b\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q11 Java - \u6cdb\u578b"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q12-java-","text":"Java\u7ebf\u7a0b\u6c60\u4ecb\u7ecd \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q12 Java - \u7ebf\u7a0b\u6c60"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q13-c","text":"C++\u662f\u600e\u4e48\u53bb\u8c03\u7528C\u8bed\u8a00\u4ee3\u7801\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q13 C++"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q14-c","text":"C/C++\u7f16\u8bd1\u540e\u7684\u7ed3\u679c\u6709\u5565\u4e0d\u540c \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q14 C++"},{"location":"%E9%9D%A2%E7%BB%8F/%E6%A8%A1%E6%8B%9F%E9%9D%A2%E8%AF%95/Interview%201/#q15-","text":"\u751f\u5154\u5b50\u7684\u95ee\u9898\uff0c\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002\u4f60\u4e3a\u4ec0\u4e48\u89c9\u5f97\u8fd9\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1f\u95ee\u80fd\u4e0d\u80fd\u7528\u516c\u5f0f\u63a8\u5bfc\u4e00\u4e0b\uff1f \u5df4\u62c9\u5df4\u62c9\u5df4\u62c9\uff0c\u7b54\u6848\u8fd8\u5728\u8def\u4e0a\u2220( \u141b \u300d\u2220)_","title":"Q15 \u7b97\u6cd5 - \u9012\u5f52"}]}